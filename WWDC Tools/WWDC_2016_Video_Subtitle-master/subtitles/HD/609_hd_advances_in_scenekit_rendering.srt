1
00:00:06,516 --> 00:00:18,500
[ Music ]


2
00:00:22,501 --> 00:00:24,501
[ Applause ]


3
00:00:24,986 --> 00:00:25,546
>> Good morning.


4
00:00:29,046 --> 00:00:32,186
Good morning and welcome to
Advances in SceneKit Rendering.


5
00:00:32,186 --> 00:00:36,096
My name is Amaury and
I'm delighted to be here


6
00:00:36,306 --> 00:00:38,996
to present you how we brought
SceneKit to the next level


7
00:00:38,996 --> 00:00:40,746
with state of the art graphics.


8
00:00:41,916 --> 00:00:43,996
So we have a lot to cover today.


9
00:00:44,146 --> 00:00:47,596
So I will start with a quick
intro on SceneKit before we dive


10
00:00:47,706 --> 00:00:49,616
into this new rendering
advances.


11
00:00:50,446 --> 00:00:53,916
Next Jean-Baptiste and
Sebastien will join me on stage


12
00:00:53,956 --> 00:00:56,826
to present a cool demo,
explain how we built it,


13
00:00:57,506 --> 00:00:59,056
and present all the new features


14
00:00:59,166 --> 00:01:00,906
such as great new
camera effects.


15
00:01:01,386 --> 00:01:07,186
And finally, Nick will join us
to present a base to Model I/O.


16
00:01:07,366 --> 00:01:08,386
So in a nutshell.


17
00:01:09,996 --> 00:01:12,576
As you know, SceneKit
is a high level API


18
00:01:12,576 --> 00:01:16,866
under the GameKit umbrella
and it focuses on 3D graphics.


19
00:01:17,586 --> 00:01:20,676
It plays nicely with
[inaudible] and it's built


20
00:01:20,786 --> 00:01:22,536
on top of Metal [inaudible].


21
00:01:22,536 --> 00:01:26,766
And use SceneKit in any
situation where you need


22
00:01:26,766 --> 00:01:28,496
to disperse with the
graphics on screen.


23
00:01:29,226 --> 00:01:31,616
And when you start to think
about it they are used


24
00:01:31,786 --> 00:01:33,016
in a great deal of places.


25
00:01:34,236 --> 00:01:37,726
For instance, we just
introduced Swift Playgrounds


26
00:01:38,316 --> 00:01:42,406
where SceneKit makes scenes
more visual and helps kids


27
00:01:42,406 --> 00:01:46,746
in the first steps in
learning how to program.


28
00:01:47,336 --> 00:01:51,986
In Xcode we use SceneKit
to create an innovative


29
00:01:51,986 --> 00:01:53,936
and extremely useful interface


30
00:01:54,416 --> 00:01:56,896
that helps you develop
your apps view hierarchy.


31
00:01:58,356 --> 00:02:02,066
In iBooks and iBooks Author
people can create rich books


32
00:02:02,356 --> 00:02:06,616
with enhanced illustrations
which are interactive.


33
00:02:07,826 --> 00:02:10,106
And of course SceneKit
can be used for games.


34
00:02:11,506 --> 00:02:13,546
Last, but not least, thank you.


35
00:02:14,016 --> 00:02:17,866
You guys found of so use cases
for SceneKit and 3D graphics.


36
00:02:18,366 --> 00:02:21,216
You published thousands
SceneKit-based applications


37
00:02:21,246 --> 00:02:21,926
to the Store.


38
00:02:22,256 --> 00:02:22,726
So thank you.


39
00:02:23,516 --> 00:02:29,036
[ Applause ]


40
00:02:29,536 --> 00:02:33,006
Now, as you know, SceneKit
is tightly integrated


41
00:02:33,006 --> 00:02:33,796
with the system.


42
00:02:34,316 --> 00:02:36,936
It works seamlessly with
all the Apple technologies


43
00:02:37,316 --> 00:02:40,066
and it takes the
most of macOS and iOS


44
00:02:40,536 --> 00:02:42,536
where it's been available
for a few years now.


45
00:02:43,696 --> 00:02:47,296
And sense we last talked at
WWDC we also introduced SceneKit


46
00:02:47,726 --> 00:02:48,436
on tvOS.


47
00:02:49,886 --> 00:02:53,006
All we had to do for the
[inaudible] sample code was


48
00:02:53,056 --> 00:02:56,466
to add two ports for game
controllers and it was ready


49
00:02:56,466 --> 00:02:58,296
to be played on the big screen.


50
00:02:59,026 --> 00:03:02,236
So it's absolutely fantastic
to see how the same game


51
00:03:02,546 --> 00:03:04,656
and code can run on
macOS, iOS, and tvOS.


52
00:03:04,656 --> 00:03:08,656
And this year we
are closing the loop


53
00:03:08,916 --> 00:03:10,926
with SceneKit coming to watchOS.


54
00:03:11,196 --> 00:03:13,196
[ Applause ]


55
00:03:13,376 --> 00:03:14,406
Thank you.


56
00:03:15,331 --> 00:03:17,331
[ Applause ]


57
00:03:17,646 --> 00:03:22,816
So SceneKit on watchOS is a
great opportunity to start


58
00:03:22,816 --> 00:03:25,136
to think about new
interactions and a way


59
00:03:25,136 --> 00:03:27,736
to present content
on your wrists.


60
00:03:27,916 --> 00:03:31,086
Now, as you might imagine,
there's a lot to say


61
00:03:31,086 --> 00:03:33,036
about the [inaudible]
for the Apple Watch.


62
00:03:33,286 --> 00:03:35,946
And we won't have time
to cover this today.


63
00:03:35,946 --> 00:03:38,776
But we have a [inaudible]
sessions, "Game Technologies


64
00:03:38,916 --> 00:03:42,426
for Apple Watch," on Friday,
where you will learn more


65
00:03:42,426 --> 00:03:45,766
about what's available, how to
play with SceneKit, SpritKit


66
00:03:45,766 --> 00:03:46,826
and other technologies.


67
00:03:47,336 --> 00:03:50,776
And if you are new to SceneKit
and want to learn more,


68
00:03:50,776 --> 00:03:54,446
you can always go online to
check previous WWDC sessions


69
00:03:54,856 --> 00:03:56,456
where we explained basic,


70
00:03:56,586 --> 00:03:59,076
but also really advanced,
features of SceneKit.


71
00:04:00,656 --> 00:04:04,596
Okay. So now let's dive into
this new rendering capabilities.


72
00:04:05,726 --> 00:04:08,356
Well, this year SceneKit puts
physically [inaudible] rendering


73
00:04:08,356 --> 00:04:10,576
in the hands of everyone.


74
00:04:11,686 --> 00:04:13,716
It means that developers,
you guys,


75
00:04:14,166 --> 00:04:18,185
get to have stunning graphics
for the arts and games.


76
00:04:18,716 --> 00:04:23,316
It's the biggest leap forward in
SceneKits rendering capabilities


77
00:04:23,446 --> 00:04:24,966
since its introduction.


78
00:04:25,586 --> 00:04:28,096
We rely on the latest
advances in 3D graphics


79
00:04:28,466 --> 00:04:32,136
and leverage modern technologies
to provide accurate rendering


80
00:04:32,446 --> 00:04:33,546
and physically based shading.


81
00:04:34,066 --> 00:04:38,096
Now, physically based
shading has several


82
00:04:38,096 --> 00:04:38,916
[inaudible] requirements.


83
00:04:39,156 --> 00:04:41,706
So we start with
linear rendering.


84
00:04:43,146 --> 00:04:46,976
So what you see here is a smooth
radiance that goes from zero


85
00:04:46,976 --> 00:04:50,296
to one and, as you can see,
everything looks perfect.


86
00:04:51,136 --> 00:04:54,166
That is until you comprise
it so that it can be stored


87
00:04:54,166 --> 00:04:56,746
in an eight disk optic
set image, for instance.


88
00:04:57,536 --> 00:05:00,106
And, as you can see,
bending occurs.


89
00:05:00,196 --> 00:05:04,246
And that's new because our eye
is more sensible to variations


90
00:05:04,356 --> 00:05:05,256
in the dark effluence.


91
00:05:06,526 --> 00:05:10,836
Now by applying gamma encoding
we can assign more values


92
00:05:10,906 --> 00:05:12,386
to these darker turns.


93
00:05:13,666 --> 00:05:15,956
So, for instance,
here's an illustration


94
00:05:16,296 --> 00:05:18,096
which shows the difference


95
00:05:18,096 --> 00:05:20,746
between storing pixel
data used ordinarily


96
00:05:21,296 --> 00:05:22,396
or using gamma encoding.


97
00:05:22,956 --> 00:05:28,646
Now the thing is that when
shading is [inaudible] all the


98
00:05:28,646 --> 00:05:29,806
lighting information


99
00:05:29,806 --> 00:05:32,926
and equations are
expressed in a linear space.


100
00:05:34,056 --> 00:05:37,926
So in a non-linear pipeline
what you end up with is color


101
00:05:37,986 --> 00:05:38,826
that [inaudible] that is rich


102
00:05:38,826 --> 00:05:40,726
with gamma encoded
[inaudible] texture


103
00:05:41,366 --> 00:05:44,026
and then it's processed
using many [inaudible]


104
00:05:44,026 --> 00:05:46,666
and the resulting
enrichment is written


105
00:05:46,666 --> 00:05:48,006
to a texture or framebuffer.


106
00:05:48,876 --> 00:05:51,016
And, as you might imagine,
that's not correct.


107
00:05:52,076 --> 00:05:55,866
For the final image to be
correct all the operations need


108
00:05:55,866 --> 00:05:58,096
to happen in enough space.


109
00:05:59,496 --> 00:06:02,436
So, as an illustration,
here is a scene


110
00:06:02,696 --> 00:06:05,706
with lighting occurring
in gamma space.


111
00:06:06,536 --> 00:06:09,806
And here is the same scene
with shading in linear space.


112
00:06:11,066 --> 00:06:13,756
And if you compare them, you
will see how light fall-offs


113
00:06:13,966 --> 00:06:19,096
and edges appear harsher
in linear rendering.


114
00:06:19,096 --> 00:06:21,116
Now linear rendering
is essential


115
00:06:21,116 --> 00:06:25,116
for physically based rendering
but it actually applies to any


116
00:06:25,116 --> 00:06:26,276
of the SceneKit lighting model


117
00:06:26,646 --> 00:06:28,476
because it just makes
the [inaudible] white.


118
00:06:30,516 --> 00:06:33,596
Now, as you know, color is a
big [inaudible] thing this year


119
00:06:33,596 --> 00:06:39,466
at WWDC so in addition to
gamma corrections [inaudible]


120
00:06:39,566 --> 00:06:42,756
management automatically.


121
00:06:44,696 --> 00:06:45,806
So what does that mean?


122
00:06:46,566 --> 00:06:49,006
It means that the color
profile that is assigned


123
00:06:49,006 --> 00:06:50,616
to a texture will
now be [inaudible].


124
00:06:51,766 --> 00:06:54,956
Any operation that happens
between the image is loaded


125
00:06:55,016 --> 00:06:57,986
from disk to the moment
it's handed to the system


126
00:06:57,986 --> 00:06:59,546
so that it can be
displayed on screen,


127
00:07:00,046 --> 00:07:02,606
we will respect the
integrity of the color data.


128
00:07:03,856 --> 00:07:08,876
So a SceneKit-based application
will pull this wonders


129
00:07:08,876 --> 00:07:10,876
of the color accuracy


130
00:07:11,706 --> 00:07:15,046
of a professional
[inaudible] application.


131
00:07:15,046 --> 00:07:19,416
Now, as you know, [inaudible]
just stop raw data that happen


132
00:07:19,556 --> 00:07:21,386
to be stored as colors.


133
00:07:21,766 --> 00:07:22,776
And SceneKit knows that


134
00:07:22,776 --> 00:07:24,976
and so it won't color
match such images.


135
00:07:24,976 --> 00:07:28,556
Now to help you with that
there's a great new features


136
00:07:28,556 --> 00:07:32,986
in Xcode 8 asset catalogs
and they are texture sets.


137
00:07:34,456 --> 00:07:39,586
In a texture set one can specify
whether an image holds color


138
00:07:39,586 --> 00:07:44,226
data or raw data and then Xcode
can automatically convert these


139
00:07:44,226 --> 00:07:48,356
images to CPU and GPU
efficient texture formats.


140
00:07:48,866 --> 00:07:51,786
But to learn more about
that we have a session right


141
00:07:51,786 --> 00:07:53,986
after lunch, "Working
with Wide Color,"


142
00:07:54,326 --> 00:07:58,906
where the Metal team gets
into [inaudible] details.


143
00:07:59,036 --> 00:08:01,336
Now, in addition to textures,


144
00:08:01,786 --> 00:08:04,226
color management also
applies to color objects.


145
00:08:05,306 --> 00:08:08,106
So color components are no
longer assumed to be sRGB.


146
00:08:08,976 --> 00:08:11,056
And so if you are creating
colors programmatically,


147
00:08:11,316 --> 00:08:14,416
it's now really important that
you use the right initializer.


148
00:08:15,586 --> 00:08:18,676
So here is an illustration
with two color objects,


149
00:08:19,016 --> 00:08:21,556
one Display P3 and
the other sRGB,


150
00:08:21,976 --> 00:08:24,256
that were created using
the same components.


151
00:08:25,916 --> 00:08:28,616
When working with color
pickers pay attention


152
00:08:28,616 --> 00:08:29,916
to the color space
that you choose.


153
00:08:30,446 --> 00:08:33,775
Above the menu we let you choose
from [inaudible] color spaces,


154
00:08:34,275 --> 00:08:36,296
including device
independent ones,


155
00:08:36,436 --> 00:08:37,525
such as [inaudible]
and [inaudible].


156
00:08:37,736 --> 00:08:42,296
And there's also a handy
option to display values


157
00:08:42,366 --> 00:08:44,236
as [inaudible] rather
than integers


158
00:08:44,236 --> 00:08:48,496
so that they can be
easily copy-pasted to code.


159
00:08:48,496 --> 00:08:50,996
And speaking of which,
as you know,


160
00:08:51,636 --> 00:08:53,856
shader modifiers are a
great feature in SceneKit


161
00:08:54,026 --> 00:08:57,006
that will allow you to
customize our rendering.


162
00:08:58,016 --> 00:09:01,706
Now, as I said, this year
shading appears in linear space.


163
00:09:02,216 --> 00:09:04,916
So you must be sure
to convert your colors


164
00:09:05,376 --> 00:09:09,126
to the linear extended sRGB
color space before these


165
00:09:09,126 --> 00:09:11,096
components are used
for color [inaudible].


166
00:09:11,166 --> 00:09:18,716
Now a few notes about
backward compatibility now.


167
00:09:18,896 --> 00:09:22,276
Linear rendering and color
management are automatically


168
00:09:22,276 --> 00:09:25,506
enabled whenever you link your
app against the new [inaudible].


169
00:09:26,326 --> 00:09:28,856
There's no performance
cost in enabling them


170
00:09:29,056 --> 00:09:31,666
but they will dramatically
change the look


171
00:09:31,666 --> 00:09:32,116
of [inaudible] scenes.


172
00:09:32,936 --> 00:09:35,496
So, for instance,
here's last year's demo


173
00:09:35,886 --> 00:09:37,696
which did not use
linear rendering.


174
00:09:38,596 --> 00:09:42,526
And here's what happens
if you just recombine it.


175
00:09:42,716 --> 00:09:45,326
Now, of course, textures,
lighting,


176
00:09:45,446 --> 00:09:47,136
and shadow modifiers
can be reworked


177
00:09:47,556 --> 00:09:48,816
with linear rendering in mind.


178
00:09:49,596 --> 00:09:52,786
But if you want to deploy your
application to older versions


179
00:09:52,786 --> 00:09:55,696
of the system, or want to
update a linear rendering


180
00:09:55,696 --> 00:09:57,276
in color management
for some reason,


181
00:09:57,796 --> 00:09:58,906
we have found a way to do that.


182
00:09:59,436 --> 00:10:03,686
You can [inaudible]
level by specifying a key


183
00:10:03,806 --> 00:10:05,846
in your apps Info.plist file.


184
00:10:06,376 --> 00:10:10,176
And then there is
wide gamut content.


185
00:10:10,616 --> 00:10:13,786
So, as you know, with
wide gamut color spaces


186
00:10:13,786 --> 00:10:17,586
such as extended sRGB
[inaudible] exists


187
00:10:17,586 --> 00:10:19,286
and they are really important


188
00:10:19,466 --> 00:10:20,976
when working for
modern hardware.


189
00:10:22,486 --> 00:10:24,746
The new iPad Pro and iMac


190
00:10:24,826 --> 00:10:27,376
with Retina Display
have wide gamut displays


191
00:10:27,376 --> 00:10:29,216
that SceneKit can
[inaudible] automatically.


192
00:10:30,066 --> 00:10:32,756
All you have to do is to
bring your wide gamut content,


193
00:10:33,156 --> 00:10:35,716
so textures or colors,


194
00:10:35,986 --> 00:10:40,376
and SceneKit will enter
that transparently.


195
00:10:42,036 --> 00:10:43,326
Now wide gamut textures


196
00:10:43,326 --> 00:10:47,236
and framebuffer will require
more memory to hold that data


197
00:10:47,236 --> 00:10:49,806
and that will lead to an
increased bandwidth usage.


198
00:10:50,056 --> 00:10:52,286
So may you experience
any performance issue,


199
00:10:52,386 --> 00:11:01,376
we offer a way to upload again
at the [inaudible] app level.


200
00:11:01,516 --> 00:11:04,466
Now let me mention the color
gamut showcase sample code


201
00:11:05,176 --> 00:11:06,606
that we built in collaboration


202
00:11:06,606 --> 00:11:08,416
with the Cocoa and
Cocoa Touch team.


203
00:11:09,286 --> 00:11:12,256
It's a synching-based
application that will allow you


204
00:11:12,396 --> 00:11:14,846
to see the out of
gamut color components


205
00:11:15,806 --> 00:11:17,026
and it's also really useful


206
00:11:17,026 --> 00:11:20,236
because on the wide gamut
display you will be able


207
00:11:20,236 --> 00:11:21,956
to see what this display brings


208
00:11:22,036 --> 00:11:24,726
because you can simulate
a non-wide gamut display.


209
00:11:25,296 --> 00:11:29,686
So to learn now about working
with wide colors and how


210
00:11:29,686 --> 00:11:34,626
to convert color components
from between color spaces,


211
00:11:35,176 --> 00:11:36,856
again we have a great
session this afternoon.


212
00:11:37,386 --> 00:11:41,756
And so that works for accurate
rendering which is a requirement


213
00:11:42,396 --> 00:11:44,046
of physically based rendering.


214
00:11:45,626 --> 00:11:50,276
Now what is physically
base rendering and why?


215
00:11:51,166 --> 00:11:54,176
Well, [inaudible] scenes
with detailed models.


216
00:11:54,176 --> 00:11:59,316
And that is definitely true.


217
00:11:59,316 --> 00:12:02,306
But shading is what
makes objects tangible.


218
00:12:03,256 --> 00:12:05,436
So all you see here
on the screen used


219
00:12:05,436 --> 00:12:06,796
to be a soup of polygons.


220
00:12:07,776 --> 00:12:10,706
And shading is a process
of finding the right color


221
00:12:10,706 --> 00:12:12,216
for each detail on the screen.


222
00:12:12,516 --> 00:12:16,516
So all the highlights,
shadows, and the sense of depth,


223
00:12:17,026 --> 00:12:18,076
it comes from shading.


224
00:12:19,776 --> 00:12:22,826
Shading is that magical
operation


225
00:12:22,916 --> 00:12:24,426
that can bring a scene to life.


226
00:12:25,426 --> 00:12:26,756
Now how does it work?


227
00:12:27,506 --> 00:12:30,306
Well, first there is light
which is emitted from a source.


228
00:12:31,056 --> 00:12:35,546
And when light hits an object it
interacts with matter according


229
00:12:35,626 --> 00:12:38,896
to properties of the surface
and then light is reflected


230
00:12:38,896 --> 00:12:41,906
to find your eye or a
camera in this case.


231
00:12:42,456 --> 00:12:46,786
Now this interaction between
light and matter is something


232
00:12:46,786 --> 00:12:47,776
that is really complex.


233
00:12:48,436 --> 00:12:50,896
And over the years many
mathematical models were


234
00:12:50,896 --> 00:12:54,356
developed to try to
best describe it.


235
00:12:54,556 --> 00:12:58,596
Physically based rendering is an
approximation of light transport


236
00:12:58,806 --> 00:13:01,886
that relies on such mathematical
models and they take


237
00:13:01,886 --> 00:13:04,496
into account the physical
properties of light and matter.


238
00:13:05,446 --> 00:13:09,066
But, as you know, SceneKit is
a high-level API and we want


239
00:13:09,186 --> 00:13:12,076
to allow anyone to benefit
from this new lighting model.


240
00:13:12,536 --> 00:13:15,596
So we will expose a
super easy-to-use API


241
00:13:15,956 --> 00:13:17,956
so that you can use
physically based rendering


242
00:13:18,096 --> 00:13:19,346
that artists love.


243
00:13:20,256 --> 00:13:23,096
So at the end of this session
you will be able to get


244
00:13:23,096 --> 00:13:25,326
from this rendering,
which is standard,


245
00:13:25,326 --> 00:13:27,336
to a physically based one.


246
00:13:27,916 --> 00:13:32,596
Okay. So in SceneKit we
will export physically based


247
00:13:32,596 --> 00:13:34,086
rendering from two angles.


248
00:13:34,606 --> 00:13:37,346
First, physically based
materials and then,


249
00:13:37,656 --> 00:13:38,596
physically based lights.


250
00:13:38,666 --> 00:13:45,286
So first, physically
based materials.


251
00:13:46,936 --> 00:13:49,866
Here is a description of
a point on the surface


252
00:13:50,236 --> 00:13:53,166
with normally indicating its
orientation is for the space.


253
00:13:54,396 --> 00:13:57,306
And when light hits that point,
it's split into two terms,


254
00:13:58,186 --> 00:14:00,706
diffuse reflection and
specular reflection.


255
00:14:01,346 --> 00:14:04,206
Now diffuse reflection
corresponds to light


256
00:14:04,566 --> 00:14:08,036
that goes underneath the surface
and is scattered so many times


257
00:14:08,036 --> 00:14:10,616
and in so many directions
that it appears uniform.


258
00:14:12,076 --> 00:14:15,086
The color of the diffuse
reflection is albedo


259
00:14:15,676 --> 00:14:16,916
or the base color of the object.


260
00:14:17,536 --> 00:14:20,456
So when designing the interface
for physically based material


261
00:14:20,456 --> 00:14:24,586
in SceneKit we will want
to use an albedo map.


262
00:14:24,766 --> 00:14:28,926
Now specular reflection
does not follow that way.


263
00:14:29,056 --> 00:14:31,286
Specular reflection
is just made of lights


264
00:14:31,346 --> 00:14:33,566
that bounces off the
surface and so it's


265
00:14:33,566 --> 00:14:35,386
of the color of the
incoming ray.


266
00:14:35,946 --> 00:14:37,966
So here is what we
call a cube map.


267
00:14:38,386 --> 00:14:41,956
It's a collection of six spaces
that represent the environment


268
00:14:41,956 --> 00:14:44,336
around the location in 3D space.


269
00:14:45,606 --> 00:14:48,116
And when we place a
perfectly specular object


270
00:14:48,116 --> 00:14:51,336
in such an environment we will
see that acts like a mirror.


271
00:14:51,336 --> 00:14:56,456
Now let's take a more realistic
example with a plastic ball.


272
00:14:57,356 --> 00:14:59,136
As you can see, it's
not a perfect mirror.


273
00:14:59,136 --> 00:15:03,946
At the center is the reflection
is dim but as you move closer


274
00:15:04,066 --> 00:15:05,636
to the edge it gets brighter.


275
00:15:06,496 --> 00:15:09,676
And actually for raising
angles all light is reflected.


276
00:15:11,166 --> 00:15:14,446
Now not all materials have
the same reflectivity amount.


277
00:15:14,906 --> 00:15:17,336
What you see on the
top is a curve


278
00:15:17,386 --> 00:15:21,176
which represents the
reflected values in function


279
00:15:21,266 --> 00:15:23,716
of the incident angle
from zero to 90 degrees.


280
00:15:24,376 --> 00:15:27,796
And you will see that these
reflectivity values stays almost


281
00:15:27,796 --> 00:15:29,676
constant from zero to 45 degrees


282
00:15:30,036 --> 00:15:31,716
and actually we can
use this value


283
00:15:32,116 --> 00:15:33,296
to reconstruct the whole curve.


284
00:15:33,296 --> 00:15:36,806
Now gold is an interesting
example


285
00:15:37,276 --> 00:15:40,676
because it has different
reflectivity values of the red,


286
00:15:40,676 --> 00:15:42,246
green, and blue components.


287
00:15:43,586 --> 00:15:47,906
The one last thing to note here
is that metals, such as aluminum


288
00:15:47,906 --> 00:15:52,756
and gold, have high reflectivity
values whereas non-metals


289
00:15:53,036 --> 00:15:56,346
or dielectrics have low
reflectivity values.


290
00:15:56,646 --> 00:15:58,756
And this difference


291
00:15:58,756 --> 00:16:01,116
in reflectivity is
actually essential


292
00:16:01,116 --> 00:16:02,326
for the final look
of the object.


293
00:16:02,766 --> 00:16:05,636
So in SceneKit we want
to expose a metalness map


294
00:16:06,486 --> 00:16:10,566
which will indicate which
parts of the object is metallic


295
00:16:10,566 --> 00:16:12,286
and which part is not.


296
00:16:13,616 --> 00:16:15,436
So in addition to reflectivity


297
00:16:15,486 --> 00:16:17,536
to different type
reflectivity values,


298
00:16:18,026 --> 00:16:21,046
also note that metals will
absorb all light beneath the


299
00:16:21,046 --> 00:16:24,256
surface where dielectric
will scatter with light.


300
00:16:24,636 --> 00:16:26,766
So the visual effect of this is


301
00:16:27,416 --> 00:16:31,146
that metals have a wide
specular reflection


302
00:16:31,346 --> 00:16:35,746
and no diffuse reflection and
dielectric will have a lot


303
00:16:35,746 --> 00:16:39,556
of diffusion and specular
reflection will almost be seen


304
00:16:39,606 --> 00:16:40,916
only at raising angles.


305
00:16:42,306 --> 00:16:47,426
So in SceneKit we will reuse
the diffuse Metal property


306
00:16:47,866 --> 00:16:50,866
to store the reflectivity
values of metals


307
00:16:50,866 --> 00:16:53,436
and the albedo of dielectrics.


308
00:16:54,596 --> 00:16:57,126
And for the reflectivity values


309
00:16:57,126 --> 00:17:01,046
of dieletrics we just use
a global low constant.


310
00:17:03,096 --> 00:17:06,906
So we just reuse the
diffuse Metal property


311
00:17:07,156 --> 00:17:10,476
that we brought from
[inaudible].


312
00:17:10,656 --> 00:17:13,236
Now one last aspect
I would like to talk


313
00:17:13,236 --> 00:17:15,476
about is the surface roughness.


314
00:17:16,856 --> 00:17:19,925
So, as you know, no
surface is perfectly smooth.


315
00:17:20,415 --> 00:17:23,576
As a microscopic level
you always have tiny bumps


316
00:17:24,056 --> 00:17:26,715
and cracks that will affect
the specular reflection.


317
00:17:27,996 --> 00:17:30,076
So the rougher the
microsurface is,


318
00:17:30,996 --> 00:17:34,746
the blurrier the reflection
will be because reflected rays


319
00:17:34,746 --> 00:17:36,346
of light are no longer aligned.


320
00:17:37,296 --> 00:17:40,526
So again in SceneKit we would
want to expose the roughness map


321
00:17:40,966 --> 00:17:45,216
which will indicate which
parts of the surface is rough


322
00:17:45,256 --> 00:17:46,456
and which part is smooth.


323
00:17:46,926 --> 00:17:48,676
And this one is a
[inaudible] image.


324
00:17:51,286 --> 00:17:56,916
So we just saw how we can divide
three fundamental properties


325
00:17:57,496 --> 00:18:00,656
and each of them has a
clear meaning and is derived


326
00:18:00,826 --> 00:18:02,096
from [inaudible]
properties of the surface.


327
00:18:02,096 --> 00:18:05,436
Now creating a physically
based material


328
00:18:05,476 --> 00:18:08,266
in SceneKit is straightforward.


329
00:18:08,736 --> 00:18:12,456
You first create a material,
then set its lighting model


330
00:18:12,456 --> 00:18:14,456
to the new physically
based lighting model,


331
00:18:14,936 --> 00:18:16,526
and finally you provide
your maps.


332
00:18:17,846 --> 00:18:19,406
So let's take an example.


333
00:18:19,856 --> 00:18:23,046
We start with a mine cart
and only a diffuse map.


334
00:18:23,986 --> 00:18:25,376
We will then add
a roughness map.


335
00:18:25,786 --> 00:18:27,906
So, for instance,
take a look at coal.


336
00:18:28,666 --> 00:18:31,856
Coal is rough so there
is no [inaudible].


337
00:18:32,796 --> 00:18:35,786
And finally we will
add a metalness map.


338
00:18:36,256 --> 00:18:39,196
So, for instance, take a
look at rails and wheels.


339
00:18:39,726 --> 00:18:42,856
Let's take another example.


340
00:18:43,086 --> 00:18:44,236
We have a fire truck.


341
00:18:45,326 --> 00:18:46,696
Again, we start with
a diffuse map.


342
00:18:46,696 --> 00:18:49,516
Now we will add a metalness map.


343
00:18:50,076 --> 00:18:53,136
And finally a roughness map.


344
00:18:53,346 --> 00:18:58,956
So for instance,
take a look at tires.


345
00:18:59,126 --> 00:19:02,116
Now one thing I would
like to mention.


346
00:19:02,806 --> 00:19:05,816
For the metalness, roughness,
and ambient occlusion maps,


347
00:19:06,266 --> 00:19:08,136
please use grayscale images.


348
00:19:08,646 --> 00:19:11,056
Having different channels
for the red, green,


349
00:19:11,056 --> 00:19:13,466
and blue would just
be a waste of memory.


350
00:19:13,826 --> 00:19:15,636
And even more if you
add another function in.


351
00:19:16,976 --> 00:19:19,456
Now, furthermore, if you
want to use the same value


352
00:19:19,456 --> 00:19:22,146
over the whole surface, you
can use the color object,


353
00:19:22,746 --> 00:19:26,116
or even better, for these
metal properties we know


354
00:19:26,386 --> 00:19:26,756
[inaudible] numbers.


355
00:19:28,896 --> 00:19:31,956
So we just saw how we can
create a really simple


356
00:19:31,956 --> 00:19:35,476
and high-level API to create
a wide variety of materials.


357
00:19:36,116 --> 00:19:37,176
Here is the same object


358
00:19:37,906 --> 00:19:40,576
and on one axis we changed
the roughness values


359
00:19:41,006 --> 00:19:44,236
and on the other axis we
changed the roughness value.


360
00:19:46,296 --> 00:19:49,406
Now remember how we said that
we would export physically


361
00:19:49,456 --> 00:19:50,036
based rendering.


362
00:19:51,146 --> 00:19:54,016
Let's now have a look at
physically based lights.


363
00:19:54,956 --> 00:19:57,816
Well, in SceneKit lights can
be split into three categories.


364
00:19:58,256 --> 00:20:02,296
I will start with image
based lighting, or IBL,


365
00:20:02,996 --> 00:20:05,546
then cover light probes,
and finally point lights.


366
00:20:06,766 --> 00:20:08,586
So image based lighting.


367
00:20:09,126 --> 00:20:14,586
As I said, you can use a cube
map to describe the environment


368
00:20:14,776 --> 00:20:17,136
around a location in 3D space.


369
00:20:18,536 --> 00:20:19,866
So when shading a point


370
00:20:19,866 --> 00:20:22,436
on the surface we can
consider the finish here


371
00:20:22,436 --> 00:20:24,736
above the end point
according to its normal


372
00:20:25,196 --> 00:20:27,846
and the right lighting
information on the color


373
00:20:27,966 --> 00:20:29,866
that is [inaudible]
in this cube map.


374
00:20:30,496 --> 00:20:32,826
So for instance,
here is an object


375
00:20:33,176 --> 00:20:36,016
which is lit only using
image based lighting.


376
00:20:36,316 --> 00:20:37,756
There is no light in that scene.


377
00:20:38,276 --> 00:20:39,476
And you can see how changing


378
00:20:39,476 --> 00:20:44,236
to cube map dramatically
affects the look of the object.


379
00:20:44,396 --> 00:20:47,006
Using image based
lighting all the objects


380
00:20:47,006 --> 00:20:49,166
in your scene will
have a coherent look


381
00:20:49,326 --> 00:20:50,696
and will work nicely together.


382
00:20:51,316 --> 00:20:53,606
By using image based lighting


383
00:20:53,726 --> 00:20:55,316
in SceneKit is really
straightforward.


384
00:20:55,986 --> 00:20:59,216
We added a lighting environment
property of the scene.


385
00:20:59,936 --> 00:21:02,336
And you can simply set a
cube map to its contents.


386
00:21:03,226 --> 00:21:05,426
And what's great is
that it works perfectly


387
00:21:05,426 --> 00:21:06,536
with the background property.


388
00:21:07,786 --> 00:21:13,106
So for instance, if you take an
object and set the same image


389
00:21:13,186 --> 00:21:15,706
to the background and
lighting environ properties,


390
00:21:15,706 --> 00:21:19,346
you will be able to display
an object in its context.


391
00:21:21,096 --> 00:21:25,416
Now cube map, it can show
the distant environment


392
00:21:25,416 --> 00:21:26,316
and the aesthetic.


393
00:21:27,556 --> 00:21:30,316
So when shading a point on
the surface it's possible


394
00:21:30,686 --> 00:21:34,946
that this environment is not
visible because you're in a cave


395
00:21:35,236 --> 00:21:37,166
or there's another
object between them.


396
00:21:37,166 --> 00:21:40,016
And that can be taken
into account


397
00:21:40,056 --> 00:21:41,136
with image based lighting.


398
00:21:41,326 --> 00:21:45,456
So it does not work very
well for occluded objects.


399
00:21:45,546 --> 00:21:51,536
Luckily we have a solution
for that: Light probes.


400
00:21:51,536 --> 00:21:55,276
Light probes are local lights
that are faced towards the scene


401
00:21:55,466 --> 00:21:59,756
and they capture the local
diffused contribution.


402
00:22:00,236 --> 00:22:01,706
So when shading a point


403
00:22:01,706 --> 00:22:06,126
on a surface we can find the
four closest light probes


404
00:22:06,126 --> 00:22:08,996
and interpolate lighting
from these probes.


405
00:22:08,996 --> 00:22:13,556
So as I said, light probes,
they are local lights


406
00:22:13,656 --> 00:22:15,536
and so they can account
for occlusion.


407
00:22:16,446 --> 00:22:18,556
And they are implemented
in such a way


408
00:22:18,556 --> 00:22:20,546
that they are really
lightweight and efficient.


409
00:22:21,346 --> 00:22:24,046
You can have dozens of
light probes in the scene.


410
00:22:24,396 --> 00:22:25,826
And we actually recommend that.


411
00:22:26,686 --> 00:22:28,216
Because the more
probes you have,


412
00:22:29,276 --> 00:22:30,476
the finer the [inaudible]
will be


413
00:22:30,626 --> 00:22:33,286
and the better local lighting
information you will have.


414
00:22:34,456 --> 00:22:36,486
So creating a light
probe is easy.


415
00:22:37,156 --> 00:22:39,106
You create the light and
then change its type.


416
00:22:40,126 --> 00:22:41,956
That can be done
either programmatically


417
00:22:42,456 --> 00:22:44,856
or within the Xcode
SceneKit scene editor.


418
00:22:46,306 --> 00:22:48,056
Now just like cube maps,


419
00:22:48,436 --> 00:22:51,506
light probes capture
static lighting information.


420
00:22:52,016 --> 00:22:53,926
And this information
will be baked


421
00:22:54,296 --> 00:22:59,506
into the probe easily using the
Xcode scene editor of this API.


422
00:23:00,536 --> 00:23:02,866
So we just saw how using IBL


423
00:23:02,866 --> 00:23:09,266
or light probes you can have
indirect lighting in the scene.


424
00:23:09,876 --> 00:23:13,006
But of course if you want direct
lighting, you still have access


425
00:23:13,036 --> 00:23:14,606
to all the other kind of lights.


426
00:23:15,746 --> 00:23:20,016
So omnidirectional, directional,
and spot lights work


427
00:23:20,016 --> 00:23:21,316
with physically based rendering.


428
00:23:21,746 --> 00:23:23,836
And actually we have [inaudible]


429
00:23:24,406 --> 00:23:26,516
so that you can be
a better configure.


430
00:23:27,836 --> 00:23:30,856
For instance, we added
the light's intensity.


431
00:23:31,886 --> 00:23:35,796
A light's intensity is expressed
in lumens which a default


432
00:23:35,796 --> 00:23:38,146
of watt 1000 which
is in the order


433
00:23:38,146 --> 00:23:39,566
of magnitude of a light bulb.


434
00:23:40,646 --> 00:23:44,746
We also added a light's
temperature which is expressed


435
00:23:44,746 --> 00:23:47,346
in Kelvin and from which
we can divide for color.


436
00:23:48,796 --> 00:23:51,736
And one great new feature,
we added a new kind


437
00:23:51,736 --> 00:23:52,996
of lights, IES lights.


438
00:23:54,396 --> 00:23:56,786
So IES lights, or
photometric lights,


439
00:23:57,046 --> 00:23:59,316
can account for any
attenuation shape.


440
00:24:00,136 --> 00:24:01,876
So while the spot light


441
00:24:01,996 --> 00:24:06,356
or omnidirectional light has a
really symmetrical attenuation


442
00:24:07,216 --> 00:24:10,406
curve, IES lights can better
accumulate the behavior


443
00:24:10,406 --> 00:24:11,706
of a theater world light.


444
00:24:12,746 --> 00:24:15,106
And, for instance, it can
account for [inaudible].


445
00:24:15,316 --> 00:24:16,866
It can account for shadows.


446
00:24:17,406 --> 00:24:19,736
For example, due to
the frame of the light.


447
00:24:20,556 --> 00:24:24,506
Now creating photometric lights
in SceneKit is really easy.


448
00:24:24,876 --> 00:24:25,876
Again, you create the light.


449
00:24:26,406 --> 00:24:27,576
Then you change its type.


450
00:24:28,406 --> 00:24:32,596
And finally you provide the
URL to put them into profile


451
00:24:32,626 --> 00:24:34,886
which can, for instance,
be downloaded


452
00:24:34,886 --> 00:24:36,616
from the website
of a manufacturer.


453
00:24:37,206 --> 00:24:43,116
So as a quick recap, we
just saw how simple it is


454
00:24:43,116 --> 00:24:45,756
to create a physically
based material in SceneKit


455
00:24:46,106 --> 00:24:49,496
and all these properties derive
from here where properties


456
00:24:49,496 --> 00:24:52,096
on the surface so they are
really easy to understand


457
00:24:52,536 --> 00:24:54,816
and how we can work with
lights in the context


458
00:24:54,876 --> 00:24:56,106
of physically based material.


459
00:24:56,886 --> 00:25:00,406
So with that please
welcome Jean-Baptiste


460
00:25:00,406 --> 00:25:01,976
and Sebastien for great demos.


461
00:25:02,116 --> 00:25:04,116
[ Applause ]


462
00:25:04,216 --> 00:25:07,536
>> So thank you, Amaury,
for this great presentation


463
00:25:08,036 --> 00:25:10,826
of the new rendering
capabilities of SceneKit.


464
00:25:12,156 --> 00:25:16,246
So let's see them in
action, the [inaudible].


465
00:25:16,246 --> 00:25:20,376
So, as you will see,
almost everything


466
00:25:20,416 --> 00:25:21,206
that has been presented


467
00:25:21,206 --> 00:25:25,396
by Amaury is actually
very [inaudible] available


468
00:25:25,396 --> 00:25:25,706
in the [inaudible].


469
00:25:25,806 --> 00:25:31,716
You will be able
to tweak properties


470
00:25:31,896 --> 00:25:33,336
and see the result in real time.


471
00:25:34,066 --> 00:25:37,266
So I have a very simple
scene ordered here


472
00:25:38,006 --> 00:25:40,916
with just one light
on this truck.


473
00:25:41,686 --> 00:25:47,336
I go to the Materials inspector.


474
00:25:47,336 --> 00:25:50,076
As you can see we have just
two materials of the subject.


475
00:25:50,776 --> 00:25:52,826
One for the body and one for
the accessories, et cetera.


476
00:25:52,956 --> 00:25:55,486
So I'm going to select
those two.


477
00:25:56,686 --> 00:25:59,896
We are continue using the Blinn
lighting model so we'll switch


478
00:25:59,896 --> 00:26:01,396
to the physically
based lighting model.


479
00:26:01,986 --> 00:26:05,966
Now I've set the two
materials as metallic.


480
00:26:07,256 --> 00:26:09,226
And, as you can see,
there is an issue


481
00:26:09,226 --> 00:26:13,126
because we don't see the
reflection of the environment.


482
00:26:13,526 --> 00:26:18,566
So we can go to the Scene
inspector and we have


483
00:26:18,566 --> 00:26:20,406
to set the lighting
environment for project.


484
00:26:20,976 --> 00:26:29,466
So for that I will use the cube
map, for example, this cube map


485
00:26:29,466 --> 00:26:39,076
of a parking as the
lighting environment.


486
00:26:41,516 --> 00:26:45,156
So. Shortly I'm focusing on
those three main properties


487
00:26:45,286 --> 00:26:47,236
of the physically
based lighting model.


488
00:26:48,056 --> 00:26:50,206
So let's now move to
the roughness value.


489
00:26:51,456 --> 00:26:57,926
The roughness is indicate
how smooth the surface is.


490
00:26:58,086 --> 00:27:03,506
So you will see that the
rougher the surface is,


491
00:27:03,666 --> 00:27:06,846
the blurrier the
surface will be.


492
00:27:06,936 --> 00:27:10,396
So if I move the value of
the roughness closer to one,


493
00:27:10,396 --> 00:27:14,696
I have a blurry reflection.


494
00:27:14,696 --> 00:27:17,406
And then almost no reflection
at all when we reach one.


495
00:27:20,216 --> 00:27:24,516
So if I move back to zero, I
have a very smooth surface and,


496
00:27:25,106 --> 00:27:30,226
as you can see, everything is,


497
00:27:30,226 --> 00:27:36,726
the whole environment is
reflected in the metal.


498
00:27:36,726 --> 00:27:39,926
So now I'm using just
one constant value


499
00:27:39,926 --> 00:27:41,776
for the roughness.


500
00:27:41,776 --> 00:27:45,666
And I would like to be able
to use, to specify a value


501
00:27:45,666 --> 00:27:46,706
for each part of the object.


502
00:27:46,746 --> 00:27:48,596
For that I just have
to use a roughness map.


503
00:27:49,196 --> 00:27:51,116
So let's use a roughness
map for the body.


504
00:27:59,596 --> 00:28:01,486
And a roughness map
for the accessories.


505
00:28:02,506 --> 00:28:05,186
So we have the same kind of
issue with the metalness.


506
00:28:05,326 --> 00:28:07,256
So we want to be able
to specify which part


507
00:28:07,256 --> 00:28:08,466
of the object is
metallic or not.


508
00:28:08,976 --> 00:28:10,866
So for that we [inaudible].


509
00:28:11,296 --> 00:28:15,706
So let's set the metalness
map for the accessories.


510
00:28:16,236 --> 00:28:18,486
A different map.


511
00:28:24,416 --> 00:28:26,656
So, as you can see,
the body parts


512
00:28:26,806 --> 00:28:32,206
of the object is nonmetallic
while the front radiator grill


513
00:28:32,376 --> 00:28:33,846
is completely metallic.


514
00:28:38,336 --> 00:28:39,976
The final touch is
to add the albedo.


515
00:28:49,026 --> 00:28:49,976
And we will be done.


516
00:28:55,116 --> 00:28:55,866
So that's it.


517
00:28:56,026 --> 00:28:58,726
So we have a full [inaudible]
rendering of this fire truck.


518
00:28:59,206 --> 00:29:02,116
I can now switch
to the [inaudible]


519
00:29:02,116 --> 00:29:03,566
and change the cube map.


520
00:29:04,196 --> 00:29:05,146
For example, this cube map


521
00:29:05,206 --> 00:29:08,756
of the lighting environment
with trees.


522
00:29:09,246 --> 00:29:10,796
I can set it in the background.


523
00:29:13,316 --> 00:29:14,056
So that's it.


524
00:29:15,226 --> 00:29:18,636
So, as you've seen,
it's very simple


525
00:29:19,136 --> 00:29:22,956
to use the new SceneKit
scene detail.


526
00:29:23,416 --> 00:29:25,556
And, you know, now to
demonstrate this kind


527
00:29:25,646 --> 00:29:29,066
of rendering in action we've
built a cool demo that I'm going


528
00:29:29,066 --> 00:29:34,236
to show you now while
Sebastien is presenting it.


529
00:29:34,776 --> 00:29:34,976
>> Hello.


530
00:29:35,016 --> 00:29:36,336
[ Applause ]


531
00:29:36,336 --> 00:29:37,536
Thank you.


532
00:29:38,371 --> 00:29:40,371
[ Applause ]


533
00:29:40,726 --> 00:29:43,226
So I'm delighted to present
you our new furry friends


534
00:29:43,346 --> 00:29:43,946
for this year.


535
00:29:44,446 --> 00:29:45,996
Bub. Bub is a badger.


536
00:29:46,086 --> 00:29:47,486
He rides in the mining cart.


537
00:29:47,926 --> 00:29:52,296
And he tries to catch gems
and boosters for speed.


538
00:29:54,396 --> 00:29:55,636
So everything you
see is rendered


539
00:29:55,636 --> 00:29:56,986
with the new SceneKit's
renderer.


540
00:29:57,896 --> 00:30:00,206
All the materials
are physically based.


541
00:30:00,266 --> 00:30:00,876
All the lights, too.


542
00:30:01,046 --> 00:30:09,336
We also used the usual
properties of SceneKits


543
00:30:09,546 --> 00:30:17,206
such as action, animations, and
everything you used to have.


544
00:30:17,266 --> 00:30:21,546
It's a Swift application that
runs on macOS, iOS, and tvOS.


545
00:30:22,776 --> 00:30:27,386
It's fully built with Swift,
about 700 lines of code.


546
00:30:28,466 --> 00:30:32,226
We placed light probes
along the track to take


547
00:30:32,226 --> 00:30:34,906
into account the
change of local light.


548
00:30:34,906 --> 00:30:38,836
And pay attention to the
light that changes when we go


549
00:30:38,876 --> 00:30:42,686
in the caves or in the tunnels.


550
00:30:42,686 --> 00:30:48,956
We have also added new
effects such as motion blur


551
00:30:49,266 --> 00:30:52,846
which you can see when Bub
catches a speed bonus just


552
00:30:53,526 --> 00:30:55,416
like this.


553
00:30:55,626 --> 00:30:59,876
We have a new HGI camera
which is why the light changes


554
00:30:59,876 --> 00:31:02,886
and when there is a bright light
or when the environment changes.


555
00:31:04,006 --> 00:31:08,116
We also use IDL's for
the light environment.


556
00:31:09,486 --> 00:31:12,806
Again some new, some,
we love the motion blur.


557
00:31:14,276 --> 00:31:19,086
You can also see bloom when
there are bright lights.


558
00:31:20,506 --> 00:31:23,946
And all the materials, as
you see, are completely PBR


559
00:31:24,376 --> 00:31:26,356
so we have free reflections
for the crystals,


560
00:31:26,606 --> 00:31:30,806
and for all the bonuses,
and the gems.


561
00:31:30,806 --> 00:31:32,236
Once again, you will
see the light change.


562
00:31:32,936 --> 00:31:35,836
It's tone mapping
doing the work.


563
00:31:36,226 --> 00:31:36,536
Thank you.


564
00:31:37,516 --> 00:31:41,646
[ Applause ]


565
00:31:42,146 --> 00:31:43,786
So, let's go to the slides now.


566
00:31:44,246 --> 00:31:47,046
I will tell you a bit
more about this demo.


567
00:31:48,116 --> 00:31:50,736
And the first thing
that we're very glad


568
00:31:50,736 --> 00:31:55,326
to tell you this year is that as
usual the demo is a simple code.


569
00:31:55,446 --> 00:31:57,526
Yes. Thank you.


570
00:31:58,106 --> 00:32:00,106
[ Applause ]


571
00:32:00,196 --> 00:32:03,106
You can download the code on
all the assets from the website,


572
00:32:03,106 --> 00:32:05,516
from the developer
website, and play with it,


573
00:32:05,516 --> 00:32:09,286
inspect the scene code,
see how we build it.


574
00:32:09,436 --> 00:32:12,036
And it's 700 lines
of Swift code.


575
00:32:12,196 --> 00:32:13,816
We think it's pretty
simple to understand


576
00:32:13,816 --> 00:32:17,156
and we hope you really like
what you see and learn a couple


577
00:32:17,156 --> 00:32:18,576
of things from the demo.


578
00:32:19,956 --> 00:32:23,286
So this year we had to
decide if, for the demo,


579
00:32:23,286 --> 00:32:25,886
we discussed it with
our artists.


580
00:32:26,016 --> 00:32:30,696
And we produced some
drafts to take


581
00:32:30,696 --> 00:32:32,666
into account the
design idea we had.


582
00:32:33,366 --> 00:32:35,616
And once we agreed
on the design ideas


583
00:32:35,786 --> 00:32:39,876
and the workflow the artists
started to model the world.


584
00:32:40,356 --> 00:32:44,966
And as it's an interactive
process we really needed tools


585
00:32:44,966 --> 00:32:47,866
to be able to ingest the
models as they were built


586
00:32:48,156 --> 00:32:49,736
and to start programming
right away,


587
00:32:49,846 --> 00:32:52,956
without waiting for
the final assets.


588
00:32:54,126 --> 00:32:56,096
So we have a custom
tool written in SceneKit


589
00:32:56,096 --> 00:32:58,436
that uses the full
power of SceneKit


590
00:32:58,686 --> 00:33:00,736
in a common line application.


591
00:33:00,876 --> 00:33:06,076
To involve the tools from the
DAE files they convert the units


592
00:33:06,076 --> 00:33:09,226
to meters and they also place
light probes automatically


593
00:33:09,226 --> 00:33:11,796
in the scene because there
are more than 200 light probes


594
00:33:11,886 --> 00:33:14,766
and we don't want, we
didn't want it to placed


595
00:33:14,766 --> 00:33:16,546
in by hand each time
the scene changes.


596
00:33:17,076 --> 00:33:21,796
We have used image
based lighting.


597
00:33:22,196 --> 00:33:25,126
So we have a cube map
for the background image,


598
00:33:25,366 --> 00:33:27,496
another cube map for the
lighting environment.


599
00:33:27,866 --> 00:33:29,996
We used the lighting environment
to add the reflections.


600
00:33:30,446 --> 00:33:32,716
And it's, as you've seen,
great for outdoor scenes.


601
00:33:34,376 --> 00:33:36,256
We have also used light probes.


602
00:33:36,566 --> 00:33:40,076
You can see these light probes
as they were displayed in Xcode


603
00:33:40,366 --> 00:33:41,896
and we've highlighted them.


604
00:33:41,896 --> 00:33:43,256
You see that only
from this point


605
00:33:43,256 --> 00:33:44,686
of view there are
already many light probes


606
00:33:44,686 --> 00:33:46,996
so you can imagine how many
there are for the whole scene.


607
00:33:47,606 --> 00:33:49,456
So the custom tools placed them


608
00:33:49,456 --> 00:33:52,476
in the environment
and compute them.


609
00:33:52,476 --> 00:33:56,296
You can also do it by hand
in Xcode but, of course,


610
00:33:56,366 --> 00:33:59,576
the more light probes you
have, the more tedious it gets.


611
00:34:00,426 --> 00:34:04,096
It's essential for the inside
but it's also adds a nice touch


612
00:34:04,096 --> 00:34:06,096
to the view in the outside


613
00:34:06,096 --> 00:34:08,916
to detect small changes
in the scene.


614
00:34:09,326 --> 00:34:13,886
We have added light
maps for the inside


615
00:34:13,976 --> 00:34:15,676
because it overrides
the environment,


616
00:34:16,186 --> 00:34:19,536
the lighting environment, which
is very important for the caves


617
00:34:19,536 --> 00:34:21,146
as the light is very
different in the caves


618
00:34:21,146 --> 00:34:24,626
so we have the probes and the
light maps that change the light


619
00:34:24,626 --> 00:34:26,556
and the mood of this
part of the scene.


620
00:34:27,056 --> 00:34:30,806
Of course we use
normal maps as usual


621
00:34:30,806 --> 00:34:33,996
to add details to the models.


622
00:34:33,996 --> 00:34:36,556
We also use baked
ambient occlusion maps


623
00:34:36,835 --> 00:34:40,866
for a very much better
lighting view and rendering.


624
00:34:41,416 --> 00:34:45,906
We have one big point
light to simulate the sun.


625
00:34:46,246 --> 00:34:48,775
It's very high in the sky
in the scene and we use it


626
00:34:48,775 --> 00:34:51,876
to create dynamic shadows and
to improve global lighting.


627
00:34:51,946 --> 00:34:56,146
As I said, all the
materials you see


628
00:34:56,146 --> 00:34:59,406
in the demo are 100%
physically based materials.


629
00:35:00,066 --> 00:35:04,296
So we get the nice water palms
reflecting the environment


630
00:35:04,296 --> 00:35:05,216
as well as the crystals.


631
00:35:06,126 --> 00:35:08,216
Talking about crystals,
this is very simple material


632
00:35:08,216 --> 00:35:09,896
that we built.


633
00:35:09,896 --> 00:35:12,776
It has no texture map so
it's very simple to create.


634
00:35:13,236 --> 00:35:16,196
It's fully metallic and
has no roughness at all.


635
00:35:16,536 --> 00:35:18,196
And just a diffuse color.


636
00:35:18,406 --> 00:35:21,166
So it's a very nice
way to create a gem


637
00:35:21,166 --> 00:35:23,246
that reflects the
environment almost for free.


638
00:35:24,576 --> 00:35:27,546
On the other side of the
spectrum you can see this tower


639
00:35:27,786 --> 00:35:30,756
which is one object
with metallic parts


640
00:35:30,756 --> 00:35:32,536
and nonmetallic parts.


641
00:35:32,696 --> 00:35:35,826
We used, of course,
metalness and roughness maps,


642
00:35:36,036 --> 00:35:38,096
texture maps to create that.


643
00:35:38,676 --> 00:35:40,676
And, as you see, we
still have diffuse color


644
00:35:40,676 --> 00:35:44,956
on the normal map to add detail.


645
00:35:45,086 --> 00:35:47,986
So basically the demo used
all the new capabilities


646
00:35:47,986 --> 00:35:48,496
of SceneKit.


647
00:35:49,506 --> 00:35:52,596
Physically based shading,
all the SceneKit API


648
00:35:52,596 --> 00:35:53,856
for materials, lights.


649
00:35:54,166 --> 00:35:55,866
We used Xcode integration


650
00:35:56,636 --> 00:36:01,226
and also new custom tools
we built for the work flow.


651
00:36:01,616 --> 00:36:03,556
And we think it's
a great showcase


652
00:36:03,556 --> 00:36:06,226
for this year's capabilities
and a great sample code


653
00:36:06,226 --> 00:36:08,086
for you to learn new things.


654
00:36:08,086 --> 00:36:10,126
And we hope you will
really like it.


655
00:36:11,056 --> 00:36:12,366
Thank you.


656
00:36:13,516 --> 00:36:16,936
[ Applause ]


657
00:36:17,436 --> 00:36:21,706
So, as you've seen, we've
quite upgraded what's happening


658
00:36:21,706 --> 00:36:24,176
with materials and
light this year.


659
00:36:24,666 --> 00:36:28,626
But we also had to change how
the camera behaves because now


660
00:36:28,626 --> 00:36:30,616
that we have great
materials and light,


661
00:36:31,286 --> 00:36:32,926
we also needed a
much better camera.


662
00:36:33,606 --> 00:36:38,006
And now that we have light
that are realistic we needed


663
00:36:38,006 --> 00:36:40,926
to have an HDR camera
or High Dynamic Range


664
00:36:41,786 --> 00:36:44,956
because the usual camera used
to have Low Dynamic Range


665
00:36:45,336 --> 00:36:46,776
which is 8-bits per components.


666
00:36:46,776 --> 00:36:51,086
Now we have float per components
so we can have very small,


667
00:36:51,086 --> 00:36:55,436
very unbright light such as a
candle or a light bulb going to,


668
00:36:55,436 --> 00:36:58,546
for example, the sun which
is very, very bright light.


669
00:36:59,166 --> 00:37:01,536
So this creates a very high
dynamic range that we need


670
00:37:01,536 --> 00:37:04,356
to remap to the dynamic
range of the screen.


671
00:37:04,916 --> 00:37:06,366
And for that we used
tone mapping.


672
00:37:06,656 --> 00:37:10,236
Tone mapping is the action of
remapping part of the rendering


673
00:37:10,236 --> 00:37:12,386
to a smaller capability device.


674
00:37:14,536 --> 00:37:16,866
So we need to enable
the HDR camera.


675
00:37:16,866 --> 00:37:18,476
It's not automatically
set by default.


676
00:37:18,476 --> 00:37:20,646
You can set that in
the API or in Xcode.


677
00:37:20,646 --> 00:37:23,266
And you can configure
the tone mapping.


678
00:37:23,266 --> 00:37:25,266
You can change the gray
point, the white point,


679
00:37:25,456 --> 00:37:27,666
and the range you
want to expose.


680
00:37:28,026 --> 00:37:30,386
And you can also frost
the exposure offset.


681
00:37:30,546 --> 00:37:33,776
So, for example, you can have
this nice look of the scene,


682
00:37:33,776 --> 00:37:37,126
but you can create a low key
one with underexposed rendering


683
00:37:37,476 --> 00:37:40,266
or overexpose it, well, but
just by changing the offset.


684
00:37:40,266 --> 00:37:41,026
It's very simple.


685
00:37:41,566 --> 00:37:45,646
We have added also very
nice effects thanks


686
00:37:45,646 --> 00:37:46,906
to the new HDR camera.


687
00:37:47,406 --> 00:37:49,266
The first one is bloom.


688
00:37:49,696 --> 00:37:53,076
Bloom is a way to simulate being
blinded by very bright lights


689
00:37:53,346 --> 00:37:55,086
from the scene and reflections.


690
00:37:55,676 --> 00:38:00,636
And it will be created
by bleeding the ejection


691
00:38:00,636 --> 00:38:02,236
on the light on the
surrounding pixels.


692
00:38:02,776 --> 00:38:04,836
So you can see in this example
it's a very nice effects


693
00:38:04,836 --> 00:38:08,516
and we can see how it looks
in action with a reflection


694
00:38:08,516 --> 00:38:09,776
on the roof of the tower.


695
00:38:09,776 --> 00:38:14,186
I think it's a very nice way
to see how the light bleeds


696
00:38:14,276 --> 00:38:15,286
on the surrounding pixels.


697
00:38:16,126 --> 00:38:18,706
And it adds a very nice
touch to the rendering.


698
00:38:19,196 --> 00:38:23,936
Next we have added motion blur
as you've seen in the demo.


699
00:38:24,686 --> 00:38:26,136
So it smoothens the
camera movements.


700
00:38:27,016 --> 00:38:29,686
And the thing is when
you just add motion blur


701
00:38:29,686 --> 00:38:31,116
to the whole scene
this is what you get


702
00:38:31,216 --> 00:38:34,086
so sometimes we don't
want to blur everything.


703
00:38:34,196 --> 00:38:36,816
For example, we wanted
the badger and the cart


704
00:38:37,146 --> 00:38:39,296
to be sharp and crisp.


705
00:38:39,696 --> 00:38:42,486
So we have a new
API that enables us


706
00:38:42,486 --> 00:38:45,936
to exclude some objects
from the motion blur


707
00:38:46,496 --> 00:38:50,436
and the result gives you a nice,
crisp look for the subjects.


708
00:38:50,996 --> 00:38:57,086
We have added a couple
of variations


709
00:38:57,086 --> 00:38:59,806
from real life camera
lenses this year.


710
00:39:00,506 --> 00:39:02,126
The first one is vignetting.


711
00:39:02,426 --> 00:39:07,076
Vignetting is a way to, is an
aberration in real life lenses


712
00:39:07,326 --> 00:39:09,826
that creates shades on
the corner of images.


713
00:39:10,426 --> 00:39:14,926
So you can change it from
this image to this one.


714
00:39:15,126 --> 00:39:16,516
And you can also
change environmentals


715
00:39:16,516 --> 00:39:19,496
to change the filtering going
from the center of the image


716
00:39:19,496 --> 00:39:21,346
to the border of the image.


717
00:39:22,466 --> 00:39:25,806
Another aberration we have
simulated this year is


718
00:39:25,806 --> 00:39:26,396
color fringe.


719
00:39:26,776 --> 00:39:29,066
Color fringe is a defraction
of lights that happens


720
00:39:29,066 --> 00:39:32,016
in real lenses, in the
glass of real lenses.


721
00:39:32,706 --> 00:39:37,596
So it creates a magenta
and sienna shadow


722
00:39:37,596 --> 00:39:39,686
of the lights in the rendering.


723
00:39:39,686 --> 00:39:41,066
And we go from this
look to this look.


724
00:39:41,376 --> 00:39:42,866
This is a very exaggerated one.


725
00:39:43,076 --> 00:39:45,496
You can go more subtle
to get a nice look.


726
00:39:45,876 --> 00:39:50,336
We have also added a very
nice way to change the mood


727
00:39:50,336 --> 00:39:51,856
of your scene with
color correction.


728
00:39:52,336 --> 00:39:53,896
So you can change
the saturation,


729
00:39:53,896 --> 00:39:56,166
go for an almost
black and white look


730
00:39:56,406 --> 00:39:58,116
or overblow the colors
if you want to.


731
00:39:58,116 --> 00:39:59,976
And you can also change
the contrast of the scene.


732
00:40:00,046 --> 00:40:05,526
So you can have the normal
look or a desaturated one,


733
00:40:07,046 --> 00:40:09,656
or oversaturated image,
and change the contrast.


734
00:40:10,146 --> 00:40:17,666
And the last one we have, it's
a really very great effect.


735
00:40:18,106 --> 00:40:19,276
It's color grading.


736
00:40:19,276 --> 00:40:22,966
Color grading enables us to
completely remap the colors


737
00:40:22,966 --> 00:40:25,256
of the scene to completely
different colors.


738
00:40:25,706 --> 00:40:28,646
So we use a strip
of a square image


739
00:40:28,836 --> 00:40:32,066
to create the 3D color cube
that we use as a lookup table


740
00:40:32,626 --> 00:40:35,096
to remap the original
colors in new ones.


741
00:40:35,096 --> 00:40:39,016
For example, in this case would
remap normal color that you see


742
00:40:39,016 --> 00:40:41,476
on the upper side
to a sepia tone.


743
00:40:41,726 --> 00:40:46,756
So we get this looking like
that, like on, in sepia.


744
00:40:46,756 --> 00:40:49,686
And it's very simple to use
and we think it's great.


745
00:40:49,686 --> 00:40:50,516
It's a very nice look.


746
00:40:50,996 --> 00:40:55,066
So that's all we have
for HDR camera this year.


747
00:40:55,336 --> 00:40:58,116
We think it's a very
nice upgrade for cameras.


748
00:40:58,566 --> 00:41:00,146
We can't wait to see
what you do with that.


749
00:41:00,206 --> 00:41:03,776
We got brand new effects that
are cumulative so you can use,


750
00:41:03,836 --> 00:41:05,126
you don't have to
choose in between,


751
00:41:05,126 --> 00:41:06,516
for example, bloom
or motion blur.


752
00:41:06,656 --> 00:41:08,166
You can use all at
the same time.


753
00:41:08,366 --> 00:41:11,416
Of course it has a cost but you
can really create a very nice


754
00:41:11,816 --> 00:41:14,866
image and very cool
looking scenes.


755
00:41:15,876 --> 00:41:17,856
So now I hand over
to Nick to tell you


756
00:41:17,856 --> 00:41:19,916
about Model I/O improvements
for this year.


757
00:41:20,146 --> 00:41:20,736
Thank you very much.


758
00:41:21,516 --> 00:41:27,556
[ Applause ]


759
00:41:28,056 --> 00:41:28,646
>> All right.


760
00:41:28,876 --> 00:41:29,396
Hi, everybody.


761
00:41:29,826 --> 00:41:31,066
So I'd just like to start


762
00:41:31,066 --> 00:41:35,056
out by covering a little
bit that's improved on input


763
00:41:35,176 --> 00:41:37,986
and output of models
and SceneKit.


764
00:41:39,166 --> 00:41:43,576
So this year SceneKit
can import models


765
00:41:43,666 --> 00:41:46,356
in their native authored
format, i.e.,


766
00:41:47,026 --> 00:41:50,876
not necessarily just triangles
as before, but in the topology


767
00:41:51,106 --> 00:41:53,826
of quadrilaterals or
arbitrary polygons


768
00:41:53,866 --> 00:41:57,056
that the authors originally
created their content in.


769
00:41:57,606 --> 00:42:00,386
SceneKit, if necessary, will
automatically triangulate


770
00:42:00,386 --> 00:42:02,576
for you in order to
perform rendering.


771
00:42:03,046 --> 00:42:05,546
And the thing is if you want


772
00:42:05,546 --> 00:42:09,236
to use our new tessellation
facilities you're going to want


773
00:42:09,306 --> 00:42:12,686
to have accurate
tessellation for good shapes.


774
00:42:12,686 --> 00:42:13,886
So you'll need to opt-in,


775
00:42:14,286 --> 00:42:16,396
using the preserved
original topology flag.


776
00:42:16,856 --> 00:42:19,216
That flag corresponds to
the same flag in Model I/O


777
00:42:19,496 --> 00:42:22,586
and you bring in the
assets and you specify this.


778
00:42:22,586 --> 00:42:24,976
It will preserve holes, and
creases, and all the things


779
00:42:24,976 --> 00:42:25,546
that are important


780
00:42:25,546 --> 00:42:27,916
for an accurate rendition
of the object.


781
00:42:29,066 --> 00:42:33,606
Now this year we have improved
our subdivision algorithms


782
00:42:33,766 --> 00:42:37,636
to the new system and
OpenSubdiv 3 from Pixar.


783
00:42:37,686 --> 00:42:39,156
You can see in this example here


784
00:42:39,426 --> 00:42:41,966
that previously we would
have imported as triangles


785
00:42:41,966 --> 00:42:45,426
and when you do the tessellation
that box which we want


786
00:42:45,426 --> 00:42:47,336
to smoothly subdivide comes
out a little bit lumpy.


787
00:42:47,966 --> 00:42:50,496
Now if you bring it in
preserving its topology,


788
00:42:50,846 --> 00:42:57,116
you can see that the quads go
to a uniformly round surface


789
00:42:57,116 --> 00:42:58,126
and it looks very nice.


790
00:42:58,596 --> 00:43:00,906
So this kind of facility
is great


791
00:43:01,086 --> 00:43:04,646
for having lightweight objects
that can scale the resolution


792
00:43:04,966 --> 00:43:06,396
to your scene, and
so on and so forth.


793
00:43:06,916 --> 00:43:11,156
Now the other aspect of
input and output that I want


794
00:43:11,156 --> 00:43:15,336
to emphasize is that last year
we introduced physically based


795
00:43:15,506 --> 00:43:17,106
materials and things
to Model I/O.


796
00:43:17,406 --> 00:43:21,296
They bridge naturally onto
all of the SceneKit stuff.


797
00:43:21,296 --> 00:43:24,516
So if you have a high
dynamic range camera specified


798
00:43:24,936 --> 00:43:26,886
in Model I/O, it
will come across


799
00:43:27,156 --> 00:43:28,616
and without losing
any attributes.


800
00:43:30,436 --> 00:43:33,016
So on to Model I/O.


801
00:43:33,016 --> 00:43:34,066
Yeah. Quick refresher.


802
00:43:34,826 --> 00:43:37,806
As it says on the [inaudible],
it's for input and output


803
00:43:37,806 --> 00:43:42,226
of models onto our
frameworks and systems.


804
00:43:42,306 --> 00:43:45,586
Need this so obviously to
bring your data from your apps


805
00:43:45,586 --> 00:43:48,596
where you've created
things, translate objects


806
00:43:48,646 --> 00:43:50,706
between frameworks,
such as SceneKit


807
00:43:50,706 --> 00:43:52,016
and MetalKit, and so on.


808
00:43:52,526 --> 00:43:56,656
And we provide support for a
number of standard file formats.


809
00:43:57,066 --> 00:44:01,386
Now file formats are the
method by which things come


810
00:44:01,386 --> 00:44:03,366
from your art program
into your tools.


811
00:44:03,366 --> 00:44:05,296
And historically the formats


812
00:44:05,446 --> 00:44:08,026
that we had have been
quite narrowly specialized.


813
00:44:08,216 --> 00:44:10,606
For example, they might
just bring in a model.


814
00:44:10,606 --> 00:44:12,496
Or they just might
bring in bulk data.


815
00:44:12,996 --> 00:44:16,566
Now really exciting thing that
I'm bringing to you this year,


816
00:44:16,846 --> 00:44:21,206
we're bringing to you, is in
conjunction with our friends


817
00:44:21,206 --> 00:44:23,406
at Pixar we're introducing
support


818
00:44:23,716 --> 00:44:25,436
for Universal Scene Description.


819
00:44:26,476 --> 00:44:32,116
Now Universal Scene Description
is a new open standard.


820
00:44:32,796 --> 00:44:36,586
And the thing that's really
interesting and exciting


821
00:44:36,586 --> 00:44:41,946
about it is it's not only
a file system and a format


822
00:44:42,236 --> 00:44:45,666
that can be either easy to
read in ASCII or efficient


823
00:44:45,836 --> 00:44:47,116
for loading in binary


824
00:44:47,666 --> 00:44:51,086
but it also includes a
scene composition engine.


825
00:44:51,586 --> 00:44:53,096
That really distinguishes it


826
00:44:53,326 --> 00:44:55,246
from any other format
that's come before.


827
00:44:55,786 --> 00:44:58,676
It embodies years of practical
production experience.


828
00:44:58,676 --> 00:45:00,676
Pixar uses this for their films.


829
00:45:01,026 --> 00:45:03,436
And "Finding Dory,"
coming out tomorrow,


830
00:45:03,436 --> 00:45:06,826
is rendered entirely
from USD files.


831
00:45:07,426 --> 00:45:10,866
Now USD has data types that
are specialized for scenes.


832
00:45:11,326 --> 00:45:14,366
And it introduces, once
again unique to this format


833
00:45:14,436 --> 00:45:17,316
as an open format,
is file layering


834
00:45:17,716 --> 00:45:19,506
to enable concurrent workflows.


835
00:45:19,926 --> 00:45:23,746
Now concurrent workflows is
kind of an awesome thing.


836
00:45:25,186 --> 00:45:29,166
Here is a representation
that might get


837
00:45:29,166 --> 00:45:32,136
in Universal Scene Description
for a typical scene in a film.


838
00:45:32,716 --> 00:45:36,946
We have a shot layer, the
layer, the shot is layered


839
00:45:37,166 --> 00:45:39,496
from components,
background, characters.


840
00:45:39,496 --> 00:45:42,046
The characters themselves might
be made out of many components.


841
00:45:42,616 --> 00:45:44,966
Now you can see there's
layers in that image


842
00:45:44,966 --> 00:45:45,926
of a shot layer there.


843
00:45:46,166 --> 00:45:49,696
That's because not only can you
just create the scene with all


844
00:45:49,696 --> 00:45:53,036
of these things composed,
but you can make variations.


845
00:45:53,106 --> 00:45:56,316
And so the scene description
will know that this is


846
00:45:56,316 --> 00:45:58,726
like take three, maybe
the characters come


847
00:45:58,726 --> 00:46:00,426
in a little bit faster
or a little bit slower.


848
00:46:00,836 --> 00:46:03,396
And you can have all of
those variations embodied


849
00:46:03,396 --> 00:46:05,726
in one file and for review.


850
00:46:06,836 --> 00:46:11,646
Now another really unique aspect


851
00:46:12,186 --> 00:46:15,146
to Universal Scene Description
is, as far as I know,


852
00:46:15,146 --> 00:46:16,696
it's the only open
source file format


853
00:46:17,086 --> 00:46:20,856
that allows the specification
of classes


854
00:46:20,856 --> 00:46:22,316
in variations of objects.


855
00:46:22,776 --> 00:46:26,006
Now, you can imagine that
you might have some sort


856
00:46:26,006 --> 00:46:27,806
of a situation where you
have lots of monsters,


857
00:46:27,806 --> 00:46:29,256
and they all want to go
to university and stuff,


858
00:46:29,256 --> 00:46:30,096
and there's like books.


859
00:46:30,586 --> 00:46:34,336
Now in a traditional
workflow you're probably going


860
00:46:34,336 --> 00:46:37,136
to find yourself creating
your books and your program,


861
00:46:37,236 --> 00:46:39,096
slaving out millions and
millions of different files


862
00:46:39,096 --> 00:46:41,596
for every little book, and then
placing them on your bookcase,


863
00:46:41,596 --> 00:46:44,076
and getting it out for
rendering like that.


864
00:46:44,606 --> 00:46:46,436
Now that is tedious.


865
00:46:46,646 --> 00:46:49,946
In games you have things
like teams of characters,


866
00:46:49,946 --> 00:46:52,796
maybe they all differ in
like hairstyle and shirt.


867
00:46:53,196 --> 00:46:55,586
And you might have to
bake those all out.


868
00:46:55,586 --> 00:46:59,586
Now Universal Scene Description
allows you to specify


869
00:46:59,586 --> 00:47:01,946
in a single file
classes of objects.


870
00:47:02,016 --> 00:47:08,116
So the class represented
here obviously is a book.


871
00:47:08,116 --> 00:47:13,446
So the file can represent
many different geometrical


872
00:47:13,446 --> 00:47:15,066
interpretations of books.


873
00:47:15,386 --> 00:47:17,006
Like you obviously
got a wide one,


874
00:47:17,006 --> 00:47:18,866
and a tall one, and a thick one.


875
00:47:19,576 --> 00:47:22,836
And when you instantiate
your book


876
00:47:22,836 --> 00:47:25,736
into the bookcase you can tell
Universal Scene Description,


877
00:47:26,016 --> 00:47:29,546
"I want this book and I want it
to be this wide and that tall."


878
00:47:29,546 --> 00:47:31,696
And it will provide the
information that you need


879
00:47:31,696 --> 00:47:35,026
to instantiate that
into your runtime,


880
00:47:35,026 --> 00:47:36,716
or your shot, or whatever.


881
00:47:39,266 --> 00:47:41,706
The variations that you can have


882
00:47:41,706 --> 00:47:46,126
in a single file can
vary along many axes.


883
00:47:46,486 --> 00:47:48,876
In this case I'm changing
some shading properties.


884
00:47:48,996 --> 00:47:51,146
So previously I had
all those books.


885
00:47:51,146 --> 00:47:52,826
I can make them whatever
color I want as well.


886
00:47:53,356 --> 00:47:58,296
And the magic of that is I place
the book and when I finally ask,


887
00:47:58,426 --> 00:48:00,796
for the purposes of rendering,
"What color is the book


888
00:48:00,796 --> 00:48:02,436
on the shelf in this place?"


889
00:48:02,686 --> 00:48:05,596
it will work out,
according to all of the logic


890
00:48:05,806 --> 00:48:09,466
about scene composition that
file and the engine embodies,


891
00:48:10,066 --> 00:48:11,896
the way that it should
be represented.


892
00:48:13,116 --> 00:48:16,796
Now beyond that you can
also represent a simple,


893
00:48:16,976 --> 00:48:19,626
in a single file,
different capabilities.


894
00:48:19,946 --> 00:48:23,656
So what I'm showing here is
that on the very low end,


895
00:48:23,656 --> 00:48:27,806
like say for a wearable device,
I might have a low poly version.


896
00:48:27,916 --> 00:48:31,566
The same file can have one
that's suitable for use


897
00:48:32,396 --> 00:48:35,266
in the highest rendering
capability that you've got.


898
00:48:36,136 --> 00:48:40,986
Now we've integrated Universal
Scene Description across all


899
00:48:40,986 --> 00:48:42,206
of our systems and frameworks.


900
00:48:42,866 --> 00:48:46,476
So at a very nuts
and bolts level.


901
00:48:46,686 --> 00:48:49,016
If you import a Universal
Scene Description file


902
00:48:49,136 --> 00:48:51,886
into Model I/O -- I don't expect
you to be able to read that --


903
00:48:52,036 --> 00:48:53,976
you're going to be
able to get a hierarchy


904
00:48:54,226 --> 00:48:56,706
of familiar Model I/O objects
with all the properties


905
00:48:56,706 --> 00:48:59,056
that were in the Universal
Scene Description file exactly


906
00:48:59,056 --> 00:49:02,116
represented so that you can
use our tools that are provided


907
00:49:02,116 --> 00:49:05,606
in Model I/O, such as
placing light probes


908
00:49:05,606 --> 00:49:08,056
and evaluating them
towards optimal positions.


909
00:49:10,286 --> 00:49:15,806
However, beyond that, let's say
that you're working on a project


910
00:49:15,806 --> 00:49:18,256
and your art team just gave
you a folder full of stuff.


911
00:49:19,136 --> 00:49:22,746
You can just open that window
in the binder with all the stuff


912
00:49:22,746 --> 00:49:25,846
that you just got and Finder
will prepare thumbnails for you


913
00:49:25,846 --> 00:49:26,916
so you can see what's there.


914
00:49:27,326 --> 00:49:29,166
And Quick Look works
with it as well.


915
00:49:29,166 --> 00:49:32,016
So you can select one of these
things, whack the spacebar,


916
00:49:32,016 --> 00:49:34,486
and it'll pop up and
you can tumble it.


917
00:49:34,486 --> 00:49:38,156
Now, of course Quick Look
shows you one thing at a time.


918
00:49:38,366 --> 00:49:40,916
If you want to hold
things up for comparison


919
00:49:40,916 --> 00:49:44,086
or maybe your USD file has
multiple cameras or something


920
00:49:44,086 --> 00:49:46,696
in it that you want to inspect
individually, you can bring


921
00:49:46,696 --> 00:49:50,506
that up in preview and Universal
Scene Description is working


922
00:49:50,506 --> 00:49:50,976
great there.


923
00:49:51,056 --> 00:49:55,896
And if you're bringing
Universal Scene Description file


924
00:49:55,896 --> 00:50:00,786
into Xcode, it imports via
Model I/O into SceneKit


925
00:50:00,786 --> 00:50:03,126
with an exact representation
of what was in that file


926
00:50:03,266 --> 00:50:06,496
so that you can inspect it
in the hierarchy browser,


927
00:50:06,686 --> 00:50:07,896
you can look at the properties,


928
00:50:08,126 --> 00:50:11,086
you can move things
around, you can add cameras.


929
00:50:11,086 --> 00:50:13,026
You make edit scenes,
send it back out to USD.


930
00:50:13,026 --> 00:50:16,576
And then you can send it back
to your artists and say, "Hey,


931
00:50:16,576 --> 00:50:17,966
you know, I've got
some edits for you.


932
00:50:17,966 --> 00:50:19,336
Can you, do you know the rep?"


933
00:50:20,526 --> 00:50:25,496
So finally, it's
incorporated into SceneKit.


934
00:50:25,496 --> 00:50:27,806
And so friends at Pixar supplied


935
00:50:27,806 --> 00:50:30,056
up with Mr. Ray from
"Finding Dory."


936
00:50:30,616 --> 00:50:34,126
And this is just stock
out-of-the-box SceneKit


937
00:50:34,126 --> 00:50:36,186
with the new physically
based shading


938
00:50:36,296 --> 00:50:37,566
that you just heard all about.


939
00:50:37,996 --> 00:50:42,786
And we're just playing the
movie asset with three seconds


940
00:50:42,786 --> 00:50:45,326
of animation, and it
looks really, really nice.


941
00:50:46,856 --> 00:50:51,366
So plugins are the thing that
you're going to need in order


942
00:50:51,366 --> 00:50:53,626
to incorporate Universal Scene
Description into your workflows.


943
00:50:54,086 --> 00:50:57,756
So that will enable the motion
of your assets between people,


944
00:50:57,946 --> 00:51:00,546
your content creation programs,
the apps that you make.


945
00:51:01,146 --> 00:51:04,666
Now the plugins, and the
open source information,


946
00:51:04,836 --> 00:51:07,646
and all availability,
and schedules, et cetera,


947
00:51:07,856 --> 00:51:12,296
are available on the openusd.org
website which I encourage you


948
00:51:12,296 --> 00:51:14,536
to go visit to find out
how you can use this


949
00:51:14,886 --> 00:51:16,766
in your pipelines and processes.


950
00:51:17,246 --> 00:51:19,976
So that's Universal
Scene Description.


951
00:51:20,516 --> 00:51:27,616
[ Applause ]


952
00:51:28,116 --> 00:51:29,096
So a quick summary.


953
00:51:29,936 --> 00:51:33,246
SceneKit is available
across our entire ecosystem


954
00:51:33,346 --> 00:51:34,516
on every platform.


955
00:51:34,786 --> 00:51:35,916
It's kind of an amazing thing.


956
00:51:36,456 --> 00:51:38,796
We have physically based
rendering for any state


957
00:51:38,796 --> 00:51:42,686
of the art looks and state
of the art representation,


958
00:51:42,736 --> 00:51:43,696
just a beautiful look.


959
00:51:43,916 --> 00:51:47,726
And HDR cameras and
effects give you control


960
00:51:47,726 --> 00:51:49,376
over how things are represented


961
00:51:49,376 --> 00:51:50,996
and how they look,
really high quality.


962
00:51:51,676 --> 00:51:55,726
And we've got support for
Universal Scene Description


963
00:51:56,136 --> 00:51:59,426
which we're really happy to
get behind and think it's going


964
00:51:59,426 --> 00:52:01,466
to make a big difference
in workflows


965
00:52:02,046 --> 00:52:06,636
in coming days and months.


966
00:52:06,766 --> 00:52:08,946
More information on this
session which was 609,


967
00:52:09,086 --> 00:52:10,806
is available on the site.


968
00:52:13,296 --> 00:52:17,186
There's related sessions:
Visual Debugging with Xcode,


969
00:52:17,186 --> 00:52:19,196
Wide Color, Game
Technologies and Apple Watch"


970
00:52:19,316 --> 00:52:21,916
that you can attend
today and tomorrow.


971
00:52:22,216 --> 00:52:23,466
And thank you very much.


972
00:52:24,516 --> 00:52:27,500
[ Applause ]

