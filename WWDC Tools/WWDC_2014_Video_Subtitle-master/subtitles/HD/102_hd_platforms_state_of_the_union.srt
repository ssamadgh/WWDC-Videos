1
00:00:13,176 --> 00:00:16,716
>> Ladies and gentlemen,
please welcome Vice President,


2
00:00:16,716 --> 00:00:19,896
OS X platform experience,
Andreas Wendker.


3
00:00:20,516 --> 00:00:27,496
[ Applause ]


4
00:00:27,996 --> 00:00:28,756
>> Good afternoon.


5
00:00:28,956 --> 00:00:31,976
Welcome to the 25th WWDC.


6
00:00:32,516 --> 00:00:38,796
[ Cheering ]


7
00:00:39,296 --> 00:00:41,076
So, if you watched the
keynote this morning,


8
00:00:41,386 --> 00:00:44,006
you will have noticed that this
year we have a very strong focus


9
00:00:44,136 --> 00:00:45,546
on our developer technologies.


10
00:00:46,486 --> 00:00:49,336
We're building out our
entire platform ecosystem,


11
00:00:50,116 --> 00:00:52,166
and 2014 is going to see some


12
00:00:52,166 --> 00:00:54,446
of the largest developed
releases in years.


13
00:00:55,466 --> 00:00:58,006
We are adding an incredible
number of new APIs.


14
00:00:58,806 --> 00:01:01,316
We're giving you access to
more low-level technologies,


15
00:01:01,896 --> 00:01:04,906
and as always, we're moving
all parts of the ecosystem,


16
00:01:05,355 --> 00:01:08,336
hardware, software, services,


17
00:01:08,726 --> 00:01:11,396
and developer tools
forward together,


18
00:01:11,766 --> 00:01:14,036
which is something
only Apple can do.


19
00:01:15,426 --> 00:01:17,966
Our focus on developers
is paying off very nicely.


20
00:01:17,966 --> 00:01:19,696
As we saw from some
of the numbers shown


21
00:01:19,696 --> 00:01:22,096
in the keynote this
morning, there are now more


22
00:01:22,096 --> 00:01:24,606
than 1.2 million apps
in the App Store.


23
00:01:25,276 --> 00:01:28,006
They have been downloaded
over 75 billion times.


24
00:01:29,156 --> 00:01:31,956
And this huge success story is,
of course, only made possible


25
00:01:32,066 --> 00:01:33,566
by you, the app developers.


26
00:01:35,116 --> 00:01:37,916
And you're part of a very,
very active community.


27
00:01:38,266 --> 00:01:39,786
Since we shipped the last update


28
00:01:39,786 --> 00:01:42,326
of our Xcode IDE just
a few months ago,


29
00:01:42,896 --> 00:01:45,786
it has been downloaded
more than 14 million times,


30
00:01:46,386 --> 00:01:49,526
and we are adding developers to
our community at an amazing rate


31
00:01:50,036 --> 00:01:53,856
of more than 120,000 brand-new
developers downloading Xcode


32
00:01:54,046 --> 00:01:54,916
every single month.


33
00:01:56,656 --> 00:01:57,986
So, let's take a look
at what we're doing


34
00:01:57,986 --> 00:02:01,416
with our iOS App Store to make
you guys even more successful.


35
00:02:02,616 --> 00:02:05,306
This year, we're improving
how users can discover apps


36
00:02:06,226 --> 00:02:10,356
by adding things like related
searches, trending searches,


37
00:02:11,086 --> 00:02:12,486
and editor's choice badges,


38
00:02:12,676 --> 00:02:15,226
which will help promote the most
noteworthy apps in the store.


39
00:02:17,106 --> 00:02:21,056
It will also allow you to
advertise your apps better


40
00:02:21,246 --> 00:02:23,836
by including preview
movies, which will play


41
00:02:23,836 --> 00:02:25,476
for the users browsing
the store.


42
00:02:26,146 --> 00:02:27,886
And if you're a developer
of multiple apps,


43
00:02:28,186 --> 00:02:30,726
you can even bundle them
all together and sell them


44
00:02:30,726 --> 00:02:32,406
at a discounted price,
if you would like.


45
00:02:34,336 --> 00:02:35,246
Now, we're not stopping


46
00:02:35,246 --> 00:02:37,276
at making the App Store
experience itself better.


47
00:02:37,576 --> 00:02:38,766
We're also working very,


48
00:02:38,766 --> 00:02:41,376
very hard on improving
the developer experience.


49
00:02:42,186 --> 00:02:43,556
So later this year, we're going


50
00:02:43,556 --> 00:02:46,286
to give iTunes Connect,
a new, cleaner look.


51
00:02:47,526 --> 00:02:48,426
It will have a new-


52
00:02:49,516 --> 00:02:53,856
[ Applause ]


53
00:02:54,356 --> 00:02:56,786
It will have a new dashboard
that will show information


54
00:02:56,786 --> 00:02:58,856
about your apps, and
most importantly,


55
00:02:59,326 --> 00:03:01,236
we are adding variable
analytics.


56
00:03:02,516 --> 00:03:07,746
[ Applause ]


57
00:03:08,246 --> 00:03:11,746
These analytics will tell you
how many users visited your app,


58
00:03:11,746 --> 00:03:15,476
your store pages, how many users
went on and purchased your app.


59
00:03:16,516 --> 00:03:21,256
[ Applause ]


60
00:03:21,756 --> 00:03:23,626
How many remained
active over time.


61
00:03:24,496 --> 00:03:27,896
And best of all, collecting all
this information is fed right


62
00:03:27,896 --> 00:03:30,196
into iOS and it's
completely automatic.


63
00:03:30,316 --> 00:03:32,686
There's no need for any kind
of special libraries or code


64
00:03:32,686 --> 00:03:34,706
on your part to turn
on analytics.


65
00:03:35,516 --> 00:03:40,316
[ Applause ]


66
00:03:40,816 --> 00:03:42,926
Now, many developers
have also asked for a way


67
00:03:42,926 --> 00:03:45,786
to distribute beta versions of
their apps before they ship,


68
00:03:45,886 --> 00:03:48,416
and we are pleased to announce
our new TestFlight service,


69
00:03:49,586 --> 00:03:51,306
which will allow you
to do exactly that.


70
00:03:53,156 --> 00:03:56,016
Users become beta testers by
downloading the TestFlight app.


71
00:03:57,516 --> 00:04:03,196
[ Applause ]


72
00:04:03,696 --> 00:04:05,926
The app will give them
access to the beta versions


73
00:04:05,926 --> 00:04:07,856
that are not available in
the full App Store yet,


74
00:04:07,856 --> 00:04:10,906
and they download
these apps simply,


75
00:04:10,906 --> 00:04:13,366
and they download these apps
simply with their Apple ID.


76
00:04:13,536 --> 00:04:15,676
There's no need for any
kind of special profiles.


77
00:04:16,516 --> 00:04:23,036
[ Applause ]


78
00:04:23,536 --> 00:04:27,496
Each app can have to, can
have up to 1000 beta testers,


79
00:04:27,626 --> 00:04:31,496
and notice that this is a limit
of 1000 users, not 1000 devices.


80
00:04:31,496 --> 00:04:31,576
So-


81
00:04:32,516 --> 00:04:39,676
[ Applause ]


82
00:04:40,176 --> 00:04:41,936
So, all these users
can run your apps,


83
00:04:42,166 --> 00:04:44,616
your apps on multiple
devices at the same time.


84
00:04:45,386 --> 00:04:47,936
And we will even allow you
to use the TestFlight service


85
00:04:47,936 --> 00:04:50,786
to distribute apps within
your own development team,


86
00:04:51,026 --> 00:04:53,036
in that case without
app review, and again,


87
00:04:53,036 --> 00:04:54,566
without any kind of
special profiles.


88
00:04:55,516 --> 00:05:00,466
[ Applause ]


89
00:05:00,966 --> 00:05:03,386
Also, later this year, we
we'll ship the final version


90
00:05:03,386 --> 00:05:04,266
of Xcode 6.


91
00:05:04,596 --> 00:05:06,836
We will allow you to
include your app's symbols


92
00:05:06,836 --> 00:05:12,136
with your App Store submissions
because later next year,


93
00:05:12,396 --> 00:05:14,656
we will start servicing
fully aggregated


94
00:05:14,846 --> 00:05:16,816
and symbolicated crash
reports for your apps.


95
00:05:17,516 --> 00:05:24,796
[ Applause ]


96
00:05:25,296 --> 00:05:26,106
And you'll be able to work


97
00:05:26,106 --> 00:05:28,676
through these crash reports
within the Xcode IDE.


98
00:05:29,866 --> 00:05:32,326
So, we have a huge update
for the App Store this year.


99
00:05:32,326 --> 00:05:33,816
There are several
end-user features


100
00:05:33,856 --> 00:05:35,706
that will help discoverability
of apps


101
00:05:36,196 --> 00:05:39,836
and a completely revamped
iTunes Connect with analytics,


102
00:05:39,836 --> 00:05:42,346
TestFlight, and later, also
better crash reporting.


103
00:05:44,556 --> 00:05:46,476
Now, let's move on
to the surprise news


104
00:05:46,476 --> 00:05:48,876
of this year's developer
conference-Swift.


105
00:05:51,436 --> 00:05:53,126
Swift is the brand-new
developer,


106
00:05:53,126 --> 00:05:57,056
brand-new program language
designed by Apple specifically


107
00:05:57,156 --> 00:05:58,586
for Cocoa and Cocoa Touch.


108
00:05:59,286 --> 00:06:03,036
It works beautifully with our
system APIs, and it's designed


109
00:06:03,036 --> 00:06:04,516
with the common programming
patterns


110
00:06:04,516 --> 00:06:05,876
on our platforms in mind.


111
00:06:07,426 --> 00:06:09,166
Now, there are a lot of
program languages out there.


112
00:06:10,196 --> 00:06:13,466
On the iOS and OS X, most of you
use an object-oriented variant


113
00:06:13,466 --> 00:06:16,026
of C, C++, or Objective-C,


114
00:06:16,026 --> 00:06:18,466
which so far has been our system
program language of choice.


115
00:06:19,706 --> 00:06:21,926
The problem we were facing
was that pretty much all


116
00:06:21,926 --> 00:06:24,936
of these languages either fit in
the category of high performance


117
00:06:25,096 --> 00:06:27,466
but low productivity
or in the category


118
00:06:27,466 --> 00:06:29,526
of high productivity
but low performance.


119
00:06:30,296 --> 00:06:32,036
But we want developers
on our platforms


120
00:06:32,036 --> 00:06:35,016
to have a language available to
them that gives them the best


121
00:06:35,016 --> 00:06:37,406
of both worlds, and that's
why we created Swift.


122
00:06:39,106 --> 00:06:40,436
Swift is very modern.


123
00:06:40,726 --> 00:06:42,266
It has all the things
you would expect


124
00:06:42,366 --> 00:06:43,536
from a new program language.


125
00:06:44,146 --> 00:06:45,646
It has a nicely tuned syntax.


126
00:06:45,996 --> 00:06:48,846
It allows you to write very
compact, very expressive code


127
00:06:49,286 --> 00:06:51,326
with features like
clojures and generics.


128
00:06:53,186 --> 00:06:55,516
Here are a few examples
of Swift code next


129
00:06:55,516 --> 00:06:57,506
to some typically Objective-C
code you might write.


130
00:06:58,286 --> 00:07:00,446
You can really see that
Swift is a lot more compact.


131
00:07:00,786 --> 00:07:04,306
It even has dedicated syntax
for a common operation


132
00:07:04,306 --> 00:07:05,546
like a respondsToSelector test.


133
00:07:05,546 --> 00:07:10,156
And here you can also see that
we are using common dot syntax


134
00:07:10,276 --> 00:07:11,996
for function and
selector implications.


135
00:07:14,556 --> 00:07:16,636
Swift is also designed
to be safe.


136
00:07:16,636 --> 00:07:21,316
It will prevent you from
introducing typical bugs


137
00:07:21,316 --> 00:07:25,706
or stability issues simply
by enforcing best practices


138
00:07:25,876 --> 00:07:28,796
for writing code, so that for
example you don't end up working


139
00:07:28,796 --> 00:07:30,836
with an uninitialized
variable or running


140
00:07:30,836 --> 00:07:32,306
out of bounds with
an array index.


141
00:07:34,176 --> 00:07:35,496
And Swift is fast.


142
00:07:36,626 --> 00:07:38,096
We've really tuned the compiler


143
00:07:38,316 --> 00:07:39,806
and the language
runtime together


144
00:07:40,336 --> 00:07:43,276
to optimize the most common
operations on our platform.


145
00:07:44,756 --> 00:07:45,976
Here's an example benchmark.


146
00:07:46,046 --> 00:07:47,456
This is a Complex Object Sort.


147
00:07:47,906 --> 00:07:51,116
You can really see how Swift
outperforms Objective-C and,


148
00:07:51,166 --> 00:07:52,306
certainly, scripting languages.


149
00:07:54,056 --> 00:07:56,156
Now, the best way to tell you a
little bit more about Swift is


150
00:07:56,156 --> 00:07:57,196
to simply write some code.


151
00:07:57,636 --> 00:07:59,836
So, I'm going to ask Ted
Kremenek to come up on stage


152
00:08:00,136 --> 00:08:01,866
and give you a demo
of the basics


153
00:08:01,866 --> 00:08:03,666
of the Swift programming
language.


154
00:08:04,516 --> 00:08:10,676
[ Applause ]


155
00:08:11,176 --> 00:08:11,826
>> Thanks, Andreas.


156
00:08:11,826 --> 00:08:15,146
So, I'm going to take
you on a quick tour


157
00:08:15,346 --> 00:08:16,406
of the Swift language,


158
00:08:16,986 --> 00:08:19,026
and doesn't the terminal
look beautiful in Yosemite?


159
00:08:19,026 --> 00:08:22,646
We're going to fire
up the compiler


160
00:08:22,646 --> 00:08:24,596
in an interactive
coding mode called a


161
00:08:24,636 --> 00:08:27,116
Read-Evaluate-Print-Loop,
or REPL.


162
00:08:27,116 --> 00:08:29,456
I just type code
in, it gets compiled


163
00:08:29,456 --> 00:08:31,066
on the fly, and executes.


164
00:08:32,196 --> 00:08:34,506
We'll start it off with
a simple, "hello world."


165
00:08:35,426 --> 00:08:38,135
This one line of code
is all you would need


166
00:08:38,336 --> 00:08:41,186
to write your first
working Swift program.


167
00:08:41,885 --> 00:08:44,086
Whereas we would naturally
want to move on now


168
00:08:44,086 --> 00:08:46,416
to doing more interesting
things like declaring variables.


169
00:08:47,026 --> 00:08:51,896
Now, you notice, I'm not
actually writing the types


170
00:08:52,016 --> 00:08:52,756
for these variables.


171
00:08:53,396 --> 00:08:56,066
That's because the Swift
compiler has powerful type


172
00:08:56,246 --> 00:08:59,716
inference that infers that
X has the, has the type int


173
00:09:00,086 --> 00:09:02,696
because I initialized
it with the value 42.


174
00:09:03,216 --> 00:09:05,886
Similarly, for S we infer
that it has a type string


175
00:09:06,146 --> 00:09:07,786
because I initialized it
with a string constant,


176
00:09:08,556 --> 00:09:10,996
and this means it makes the
code feel very lightweight.


177
00:09:12,036 --> 00:09:13,216
Now, I have a lot to show you,


178
00:09:13,316 --> 00:09:14,986
so instead of me
typing everything,


179
00:09:14,986 --> 00:09:16,316
I'm going to have
some assistance here


180
00:09:16,316 --> 00:09:18,266
with the keystrokes but
everything is still going


181
00:09:18,266 --> 00:09:19,706
to be live in the REPL.


182
00:09:21,056 --> 00:09:23,606
Let's move on to simple
containers, like arrays.


183
00:09:23,606 --> 00:09:26,976
Now, you can see the syntax
is very light and natural.


184
00:09:27,386 --> 00:09:28,446
Here I have an array
of integers,


185
00:09:29,456 --> 00:09:30,796
similarly, an array of strings.


186
00:09:31,956 --> 00:09:34,946
Again, I didn't write the types
because type inference came in


187
00:09:34,946 --> 00:09:39,106
and it inferred the types of
the arrays just by the contents


188
00:09:39,186 --> 00:09:41,806
of the array that I used
to initialize the array.


189
00:09:43,176 --> 00:09:46,006
Now, arrays behave pretty much
as you would expect, you know,


190
00:09:46,006 --> 00:09:49,046
I have subscripting, which
can be used in, you know,


191
00:09:49,386 --> 00:09:50,836
subexpressions and so on.


192
00:09:51,806 --> 00:09:53,576
But an important thing


193
00:09:53,846 --> 00:09:58,356
about arrays is all their
accesses are balance checked.


194
00:09:59,106 --> 00:10:02,406
This is part of Swift's
safe by default design.


195
00:10:03,146 --> 00:10:04,636
In a normal-running program,


196
00:10:05,316 --> 00:10:07,006
execution would stop
at this point.


197
00:10:07,666 --> 00:10:09,286
Since we're in the REPL,
we can keep on going,


198
00:10:09,286 --> 00:10:12,246
but this is really kind of a
fundamental keystone of the,


199
00:10:12,246 --> 00:10:13,316
of the Swift language.


200
00:10:15,226 --> 00:10:18,706
Now, arrays are just like
any other type in Swift.


201
00:10:18,706 --> 00:10:20,026
They have certain capabilities,


202
00:10:20,106 --> 00:10:22,876
like computer properties that's
going to tell me the size


203
00:10:22,876 --> 00:10:26,986
of the array, or methods
to remove and add elements.


204
00:10:28,536 --> 00:10:30,476
And because arrays
are containers,


205
00:10:31,036 --> 00:10:33,696
they can also be used
with this very generalized


206
00:10:33,696 --> 00:10:34,636
for...in syntax.


207
00:10:35,036 --> 00:10:38,776
It works for collections,
ranges of numbers, sequences,


208
00:10:39,286 --> 00:10:41,806
and here I'm looping over
the values of the array


209
00:10:42,136 --> 00:10:42,966
and printing them out.


210
00:10:43,736 --> 00:10:46,586
And you'll notice I'm using
a very lightweight string


211
00:10:46,586 --> 00:10:48,606
formatting called
string interpolation.


212
00:10:49,176 --> 00:10:52,246
Essentially, I have a string
constant that I can just splat


213
00:10:52,246 --> 00:10:54,536
in an expression that gets
converted into a string


214
00:10:54,766 --> 00:10:56,956
and spliced into the rest
of the printed out string.


215
00:10:57,426 --> 00:10:59,846
It's very really nice for doing
lightweight string formatting.


216
00:11:01,836 --> 00:11:04,246
Swift also has
batteries-included support


217
00:11:04,366 --> 00:11:07,376
for dictionaries, and these
are also strungly typed.


218
00:11:08,116 --> 00:11:10,826
Here, type for instance inferred
that I have a dictionary


219
00:11:10,876 --> 00:11:12,976
that maps from strings
to doubles.


220
00:11:14,776 --> 00:11:17,576
I can also use the for...in
syntax with them as well,


221
00:11:17,576 --> 00:11:21,676
but in this case, I get a
key value pair all in one go,


222
00:11:21,766 --> 00:11:23,456
if I wanted to print
it out all the values.


223
00:11:26,156 --> 00:11:27,046
Let's move on to functions.


224
00:11:27,766 --> 00:11:29,786
And you still see the
syntax looks very similar


225
00:11:29,786 --> 00:11:30,746
to variable declarations


226
00:11:30,746 --> 00:11:32,756
and you'll see there's
this reoccurring theme


227
00:11:32,756 --> 00:11:35,636
in the language with the, where
the syntax is, it's simple.


228
00:11:35,636 --> 00:11:36,846
It's composable.


229
00:11:36,846 --> 00:11:37,596
It's very regular.


230
00:11:37,596 --> 00:11:38,596
It's very easy to read.


231
00:11:39,446 --> 00:11:40,716
So, we start out
with the fun keyword,


232
00:11:40,866 --> 00:11:42,906
the name of the function,
its arguments,


233
00:11:43,186 --> 00:11:44,946
in this case we're taking
an array of integers,


234
00:11:45,006 --> 00:11:47,266
and then the return
value is at the end.


235
00:11:47,266 --> 00:11:49,946
In this case, we're
returning an int.


236
00:11:50,886 --> 00:11:52,986
This simple function
just loops and, you know,


237
00:11:52,986 --> 00:11:55,006
it loops over the
array and sums up,


238
00:11:55,806 --> 00:11:57,626
sums up the numbers
and returns them.


239
00:11:59,046 --> 00:12:01,236
Call syntax looks just
as you would expect.


240
00:12:02,366 --> 00:12:03,556
This is a very simple example.


241
00:12:03,556 --> 00:12:05,686
Let's say we wanted to
extend it, all right?


242
00:12:05,766 --> 00:12:06,906
So, I'm, I'm doing
all this work,


243
00:12:06,906 --> 00:12:08,126
I'm looping over the array.


244
00:12:08,576 --> 00:12:11,476
Let's say I wanted to return
the average at the same time


245
00:12:11,516 --> 00:12:12,486
as I'm computing the sum.


246
00:12:13,776 --> 00:12:15,396
We can do that in
Swift via support


247
00:12:15,396 --> 00:12:19,816
for multiple return values,
and all I have to do-


248
00:12:20,516 --> 00:12:24,536
[ Applause ]


249
00:12:25,036 --> 00:12:27,356
-is change the return
value to a tuple.


250
00:12:28,286 --> 00:12:30,686
The rest of the function
looks pretty much as before,


251
00:12:31,416 --> 00:12:33,986
except you see at the return
site we return a pair.


252
00:12:33,986 --> 00:12:38,246
And so when we call this
function, we get a tuple back.


253
00:12:39,086 --> 00:12:41,856
And if you notice at the
top, I put these labels,


254
00:12:42,246 --> 00:12:44,896
sum and average, on
the tuple pieces.


255
00:12:45,826 --> 00:12:48,876
It means I can access the
pieces of the tuple by name


256
00:12:49,876 --> 00:12:52,476
and because the language has
powerful pattern matching,


257
00:12:52,976 --> 00:12:55,566
I could just declare two new
variables, sum and average,


258
00:12:56,026 --> 00:12:58,946
to decompose the value of the
return value all in one go.


259
00:12:59,516 --> 00:13:06,886
[ Applause ]


260
00:13:07,386 --> 00:13:10,576
And of course, the language has
been crafted to work beautifully


261
00:13:10,906 --> 00:13:12,546
with Cocoa and Cocoa Touch.


262
00:13:12,996 --> 00:13:15,886
With this one line of code,
I can import in all the APIs


263
00:13:15,886 --> 00:13:18,376
from the Cocoa framework
on OS X.


264
00:13:18,376 --> 00:13:20,666
And I can immediately
start playing with it.


265
00:13:20,666 --> 00:13:22,666
So, for example, I saw


266
00:13:22,666 --> 00:13:24,336
in Yosemite we have
this new look and feel.


267
00:13:24,336 --> 00:13:26,846
Let's take a peek at the
new default system font.


268
00:13:28,526 --> 00:13:31,756
Here's what's going on here, is
I am accessing a class method


269
00:13:32,086 --> 00:13:35,266
on NSFont that returns
me an object


270
00:13:35,266 --> 00:13:36,496
for the default system font.


271
00:13:37,456 --> 00:13:40,276
And so this is a real
object from Objective-C.


272
00:13:41,476 --> 00:13:44,046
I can access properties
on it, call methods,


273
00:13:44,476 --> 00:13:45,676
do everything that you expect.


274
00:13:46,896 --> 00:13:49,466
Now, another important piece
of Cocoa are protocols,


275
00:13:49,536 --> 00:13:51,786
and Swift supports
protocols beautifully.


276
00:13:52,796 --> 00:13:55,136
Syntax is also very
regular and simple.


277
00:13:56,346 --> 00:13:59,036
Here, for example, I'm
declaring a protocol scalable


278
00:13:59,566 --> 00:14:02,636
that models the idea that a
graphical entity is scalable.


279
00:14:02,746 --> 00:14:04,566
I should be able to, you
know, scale it up in size,


280
00:14:04,566 --> 00:14:07,496
scale it down, and I can,
it defines a single method


281
00:14:07,706 --> 00:14:10,016
that returns a new
value that's scaled.


282
00:14:11,236 --> 00:14:15,066
And just like Objective-C, I can
retroactively add conformants


283
00:14:15,666 --> 00:14:19,876
to a protocol, to a class, using
something called an extension.


284
00:14:20,386 --> 00:14:22,516
They're similar to
categories in Objective-C


285
00:14:22,886 --> 00:14:23,866
but a bit more powerful.


286
00:14:25,506 --> 00:14:27,936
And you see, I've just
defined the method right there,


287
00:14:27,936 --> 00:14:29,896
and now I can call it.


288
00:14:32,476 --> 00:14:36,526
And so I've returned a font
that's twice the point size


289
00:14:36,876 --> 00:14:39,906
as the original, all on
the fly, here in the REPL.


290
00:14:42,216 --> 00:14:44,926
Now, also in Cocoa, we
haves structs, right?


291
00:14:44,926 --> 00:14:47,386
Structs are simple data
types for aggregating data,


292
00:14:48,616 --> 00:14:49,926
but despite being simple,


293
00:14:49,976 --> 00:14:51,876
they're really powerful
in Swift.


294
00:14:52,756 --> 00:14:55,096
Let's take a look at
our old friend, CGRect.


295
00:14:56,046 --> 00:14:58,166
Now, many of you who have used
this API are probably used


296
00:14:58,166 --> 00:15:01,156
to creating instances of
CGRect using CGRectMake.


297
00:15:02,346 --> 00:15:05,916
Well, in Swift, you can also
use just a uniform construction


298
00:15:05,956 --> 00:15:08,646
syntax to construct
values in struct as well.


299
00:15:09,056 --> 00:15:12,326
And here we see the actual
labels being put on the,


300
00:15:12,326 --> 00:15:14,136
on the values that
we're initializing.


301
00:15:16,136 --> 00:15:21,636
Now, looking at CGRect, wouldn't
it be great if it had a property


302
00:15:21,636 --> 00:15:24,126
on an area that could tell
me the area of a rectangle?


303
00:15:24,736 --> 00:15:26,996
You can't define
this in Objective-C.


304
00:15:26,996 --> 00:15:29,036
Objective-C does not have
properties on structs.


305
00:15:29,906 --> 00:15:30,806
But Swift does.


306
00:15:33,256 --> 00:15:36,996
I can retroactively now
add this computer property


307
00:15:37,216 --> 00:15:39,676
to the struct using
it in an extension.


308
00:15:40,296 --> 00:15:41,736
This is what a computer
property look like.


309
00:15:41,736 --> 00:15:44,106
It just looks like a variable
declaration with a bit


310
00:15:44,106 --> 00:15:47,116
of code added on, on the side
for the value being computed.


311
00:15:48,646 --> 00:15:50,826
And I just defined
it, and indeed,


312
00:15:50,996 --> 00:15:52,836
laws of geometry have held up.


313
00:15:53,016 --> 00:15:56,446
A 10 by 10 rectangle
indeed has an area of 100.


314
00:15:59,006 --> 00:16:01,816
Now, once you have properties
and methods on structs,


315
00:16:01,816 --> 00:16:05,076
why not have them conform
to protocols, all right?


316
00:16:06,056 --> 00:16:08,816
And this is really, you know,
a really powerful concept.


317
00:16:08,816 --> 00:16:10,906
So, I can also have
CGRect conform


318
00:16:10,906 --> 00:16:11,876
to the scale of protocol.


319
00:16:11,876 --> 00:16:13,956
It's a, it's kind of a, it's
a graphical entity as well,


320
00:16:15,736 --> 00:16:18,246
and I could also, you know,
I can now call this method


321
00:16:18,246 --> 00:16:19,856
and scale up the
rectangle I created.


322
00:16:19,856 --> 00:16:21,436
Now I have a 20,
20 by 20 rectangle.


323
00:16:22,486 --> 00:16:25,746
So, now we have uniform
capabilities between classes


324
00:16:25,746 --> 00:16:28,836
and structs, methods,
properties, and protocols.


325
00:16:29,816 --> 00:16:32,726
So, now I have the power to
write some really generic code.


326
00:16:34,136 --> 00:16:35,306
Let's say I want to
write a function,


327
00:16:35,846 --> 00:16:37,236
scale by sizing factor.


328
00:16:37,946 --> 00:16:41,146
It takes an arrayable
array of scalable things


329
00:16:42,266 --> 00:16:44,406
and it returns a new
array of the, you know,


330
00:16:44,406 --> 00:16:46,356
those elements scaled
up by some factor.


331
00:16:47,536 --> 00:16:50,516
I can use that, I can
implement this very easily


332
00:16:50,516 --> 00:16:53,876
for both structs and
classes using generics.


333
00:16:55,196 --> 00:16:57,256
A generic function
looks almost identical


334
00:16:57,256 --> 00:17:00,886
to a regular function except
it has this additional bit of,


335
00:17:00,886 --> 00:17:02,806
of type information
where I'm supposed


336
00:17:02,806 --> 00:17:04,955
to find a placeholder type T.


337
00:17:05,715 --> 00:17:07,876
And all that matters
is that T conforms


338
00:17:08,006 --> 00:17:09,955
to the scalable protocol,
whatever it happens to be.


339
00:17:11,526 --> 00:17:13,636
The rest of the function looks
pretty much as you expect.


340
00:17:13,955 --> 00:17:17,175
It's going to take an array of
T, which, whatever T happens


341
00:17:17,175 --> 00:17:20,816
to be when I call this function,
it takes the scaling factor


342
00:17:21,586 --> 00:17:23,935
and returns in a
new array of Ts.


343
00:17:25,695 --> 00:17:27,496
Now, all I want to do is I
want to create a new array


344
00:17:27,496 --> 00:17:28,986
in which each element
is scaled up.


345
00:17:28,986 --> 00:17:33,186
I'm going to use the functional
map algorithm on array,


346
00:17:33,976 --> 00:17:37,176
which takes a clojure to do the
transformation on each element


347
00:17:37,576 --> 00:17:38,776
when constructed in a new array.


348
00:17:38,836 --> 00:17:41,316
The clojure syntax
looks like this.


349
00:17:41,316 --> 00:17:43,476
It, it's akin to
blocks in Objective-C.


350
00:17:44,526 --> 00:17:48,216
And we think clojures are so
important that we wanted them


351
00:17:48,216 --> 00:17:49,326
to feel really great,


352
00:17:49,326 --> 00:17:51,306
syntactically optimized
in a language.


353
00:17:52,086 --> 00:17:54,326
So, if the clojure is the
last argument to the function


354
00:17:54,326 --> 00:17:57,376
or method, you can use this
really selective trailing


355
00:17:57,376 --> 00:17:59,506
clojure syntax where
you can omit the,


356
00:17:59,556 --> 00:18:01,286
the parentheses around
the clojure.


357
00:18:02,926 --> 00:18:03,576
And that's it.


358
00:18:03,576 --> 00:18:06,336
That's my three-line
generic function.


359
00:18:08,466 --> 00:18:10,976
I can use it now to scale
up an array of NSFonts.


360
00:18:12,416 --> 00:18:14,206
They're twice the size of
the ones I created before.


361
00:18:15,496 --> 00:18:19,396
Similarly, I can call the same
function and scale up an array


362
00:18:19,576 --> 00:18:21,986
of structs, completely
different data types,


363
00:18:22,306 --> 00:18:24,096
but they just conform to
the scalable protocol,


364
00:18:25,156 --> 00:18:26,366
and it works as expected.


365
00:18:27,546 --> 00:18:30,576
This uniform capability is
between structs and classes


366
00:18:30,576 --> 00:18:32,056
with methods, properties,
and protocols.


367
00:18:32,056 --> 00:18:35,116
This thing is going to really
finally change how expressive


368
00:18:35,446 --> 00:18:36,336
your code can be.


369
00:18:36,336 --> 00:18:38,366
And we can't wait to see
what you can build with it.


370
00:18:39,116 --> 00:18:41,456
Now, this ends what I'm going
to show you in the REPL.


371
00:18:41,526 --> 00:18:43,076
I'm going to switch the slides


372
00:18:43,076 --> 00:18:46,116
and tell you a few more exciting
things about the Swift language.


373
00:18:53,676 --> 00:18:59,756
OK. So, as we saw in the
REPL, in, it is really easy


374
00:18:59,756 --> 00:19:02,626
to write natural
and expressive code


375
00:19:02,626 --> 00:19:05,646
in Swift while readily
tapping into some


376
00:19:05,646 --> 00:19:08,676
of the language's most powerful
features, like generics.


377
00:19:09,566 --> 00:19:12,256
And as you saw, it's really
crafted to work beautifully


378
00:19:12,676 --> 00:19:14,456
with Cocoa and Cocoa touch.


379
00:19:15,676 --> 00:19:17,336
Now, there are many advanced
features in the language


380
00:19:17,336 --> 00:19:19,326
that I didn't talk
about in the REPL.


381
00:19:20,436 --> 00:19:22,626
One of them of particular
importance that I wanted


382
00:19:22,626 --> 00:19:24,266
to mention are modules.


383
00:19:25,416 --> 00:19:26,056
What is a module?


384
00:19:27,196 --> 00:19:29,256
It's a logical collection
of code


385
00:19:29,256 --> 00:19:31,656
that is intended to
be built together.


386
00:19:31,706 --> 00:19:35,526
So, for example, any framework
you build, any target you build


387
00:19:35,526 --> 00:19:39,176
in Xcode, automatically gets
a module associated with it.


388
00:19:39,786 --> 00:19:44,256
And one thing you get from
modules are implicit namespaces.


389
00:19:45,626 --> 00:19:48,076
This means you no longer
have to prefix the name


390
00:19:48,076 --> 00:19:50,396
of your classes anymore for fear


391
00:19:50,396 --> 00:19:51,976
of them conflicting
with somebody else's.


392
00:19:52,516 --> 00:19:57,826
[ Applause ]


393
00:19:58,326 --> 00:20:02,316
Now, a really great
feature we did touch


394
00:20:02,316 --> 00:20:05,566
on in the REPL demo were
Clojures, or non-S functions.


395
00:20:05,616 --> 00:20:09,836
They're extremely powerful in
Swift, and they work beautifully


396
00:20:10,206 --> 00:20:12,506
with blocks-based APIs in Cocoa.


397
00:20:13,116 --> 00:20:14,546
And we think they're
so important


398
00:20:14,546 --> 00:20:16,816
that we've syntactically
optimized them so that was


399
00:20:16,816 --> 00:20:19,096
like those one-liners that
you want to write, you know,


400
00:20:19,096 --> 00:20:21,116
to do something simple,
can be written


401
00:20:21,116 --> 00:20:25,036
with very little code while
maintaining readability.


402
00:20:26,816 --> 00:20:29,786
And because Cocoa-based,
you know,


403
00:20:29,786 --> 00:20:34,246
blocks APIs in Objective-C will
reflect as Clojure-based APIs


404
00:20:34,246 --> 00:20:37,686
in Swift, APIs


405
00:20:37,686 --> 00:20:40,686
like dispatchasync
will read beautifully


406
00:20:40,686 --> 00:20:42,106
with a trailing Clojure syntax.


407
00:20:42,396 --> 00:20:45,246
In this case, dispatchasync
reads like control flow,


408
00:20:45,866 --> 00:20:49,046
which is more how the API
was intended to be used.


409
00:20:49,046 --> 00:20:52,286
So, we think this really changes
the readability of your code


410
00:20:52,286 --> 00:20:55,396
and how you reason about it.


411
00:20:55,396 --> 00:20:59,036
And perhaps the biggest
feature of Swift is


412
00:20:59,036 --> 00:21:02,766
that it's fundamentally a
thin language under the hood


413
00:21:03,976 --> 00:21:07,146
with much the functionality
not baked into the compiler


414
00:21:07,816 --> 00:21:10,626
but defined in a
Core runtime library,


415
00:21:10,766 --> 00:21:12,576
which itself is written
in Swift.


416
00:21:13,496 --> 00:21:16,246
To give you an example of what
I mean, Core things like int


417
00:21:16,826 --> 00:21:19,906
and array are defined
in this runtime library.


418
00:21:19,906 --> 00:21:21,406
They're not baked
into the compiler.


419
00:21:22,816 --> 00:21:25,336
Thus, the language is really
designed from the ground


420
00:21:25,336 --> 00:21:28,276
up to be extensible,
composable, layerable,


421
00:21:28,276 --> 00:21:30,166
to build new things out of it.


422
00:21:30,166 --> 00:21:35,146
And we think this really
embraces the soul and spirit


423
00:21:35,526 --> 00:21:38,166
of Cocoa and Cocoa
Touch, where rich APIs


424
00:21:38,166 --> 00:21:40,796
and rich frameworks can
be combined together


425
00:21:40,796 --> 00:21:44,346
to build really truly awesome
behaviors in technologies.


426
00:21:47,016 --> 00:21:49,986
Now, the Swift language is full
of a ton of great features,


427
00:21:49,986 --> 00:21:50,616
which we think are going


428
00:21:50,616 --> 00:21:55,186
to fundamentally change how you
think about and craft your code.


429
00:21:56,306 --> 00:21:59,966
But beyond that, we designed
the language with the intention


430
00:21:59,966 --> 00:22:00,836
that it would be the basis


431
00:22:00,836 --> 00:22:03,706
for truly fantastic
interactive tools.


432
00:22:05,356 --> 00:22:07,366
In Xcode 6, we have
a new feature,


433
00:22:07,776 --> 00:22:09,006
Interactive Playgrounds.


434
00:22:10,396 --> 00:22:12,306
They're akin to the
REPL in that it's


435
00:22:12,366 --> 00:22:13,906
like a lightweight
coding environment,


436
00:22:14,116 --> 00:22:16,816
but it brings forth
the full capabilities


437
00:22:16,816 --> 00:22:20,246
and rich experiences that we
can only deliver in Xcode.


438
00:22:21,346 --> 00:22:24,696
And to show you more, I yield
the stage to Max Drukman.


439
00:22:25,516 --> 00:22:32,606
[ Applause ]


440
00:22:33,106 --> 00:22:35,036
>> Let me show you a little
bit of what you can do


441
00:22:35,276 --> 00:22:37,856
with Playgrounds in Xcode 6.


442
00:22:38,446 --> 00:22:41,966
So, I'm going to start
off with a new Playground.


443
00:22:45,656 --> 00:22:47,546
I think I'll make
this a little bigger


444
00:22:48,086 --> 00:22:49,586
so we have a little
room to roam.


445
00:22:50,456 --> 00:22:53,166
Playgrounds start you out
with Cocoa already imported


446
00:22:53,166 --> 00:22:55,206
and a string variable
for you to play with.


447
00:22:55,206 --> 00:22:58,486
I'm going to change mine to
something a little more topical.


448
00:22:59,786 --> 00:23:02,376
How about that?


449
00:23:02,376 --> 00:23:09,076
Now I'm going to add, how
about a date constant?


450
00:23:09,156 --> 00:23:12,186
Pretty simple stuff, but you
can see on the right side


451
00:23:12,186 --> 00:23:14,306
of the editor, I'm
getting results


452
00:23:14,306 --> 00:23:15,726
as I enter lines of code.


453
00:23:16,436 --> 00:23:18,256
That is the results area.


454
00:23:18,396 --> 00:23:21,986
I know it's a brilliant name,
but just like in the REPL,


455
00:23:22,256 --> 00:23:26,606
as you enter code, it gets
evaluated and you get results.


456
00:23:27,536 --> 00:23:30,116
So, if I were to do
something like style


457
00:23:30,116 --> 00:23:35,076
that string, I get the result.


458
00:23:35,076 --> 00:23:36,186
My string is styled.


459
00:23:36,506 --> 00:23:39,556
Now, you don't have to take
my word for it because many


460
00:23:39,556 --> 00:23:42,846
of the results in the
Playground can be Quick Looked.


461
00:23:43,826 --> 00:23:46,126
The Quick Looks in the
playground are just like those


462
00:23:46,126 --> 00:23:47,146
in the Xcode debugger.


463
00:23:48,466 --> 00:23:51,456
You can even implement your
own for custom data types.


464
00:23:52,616 --> 00:23:55,276
They're a great way
to see results


465
00:23:55,276 --> 00:23:58,736
that aren't great candidates
for coming across in plain text,


466
00:23:58,886 --> 00:24:03,216
like this attributed
string or images.


467
00:24:03,846 --> 00:24:06,896
So, just like my
attributed string,


468
00:24:07,076 --> 00:24:11,256
I can Quick Look these images,
but we've added a way for you


469
00:24:11,306 --> 00:24:14,236
to see the results
of your Playground


470
00:24:14,366 --> 00:24:18,196
in a more persistent fashion
by adding your results


471
00:24:18,666 --> 00:24:19,976
to the Timeline Assistant.


472
00:24:20,526 --> 00:24:24,486
Now, the Timeline
Assistant allows you to build


473
00:24:24,486 --> 00:24:27,256
up a persistent representation
of the results


474
00:24:27,256 --> 00:24:30,246
of your Playground so
you can really get a feel


475
00:24:30,476 --> 00:24:32,106
for what your code is doing.


476
00:24:33,446 --> 00:24:36,956
The next thing I'm going to do
is I'm going to mask that image


477
00:24:37,346 --> 00:24:39,316
with a Bezier path
that I'll create.


478
00:24:43,016 --> 00:24:47,856
Now, because Bezier paths are
created in multiple steps,


479
00:24:49,106 --> 00:24:55,596
they're a great candidate for
visualizing in the timeline.


480
00:24:55,686 --> 00:24:58,676
I can simply add each of
the steps to the timeline


481
00:24:58,996 --> 00:25:03,136
and get a great sense of
how my path is constructed.


482
00:25:03,786 --> 00:25:06,276
And it's especially good


483
00:25:06,576 --> 00:25:10,256
for spotting how one
bad value can have


484
00:25:10,356 --> 00:25:11,896
ripple-effect consequences.


485
00:25:12,396 --> 00:25:15,386
I'm going to undo that one.


486
00:25:15,676 --> 00:25:17,696
I think I'll get rid of
most of these, actually.


487
00:25:18,336 --> 00:25:20,926
I'll just leave the
final result.


488
00:25:22,386 --> 00:25:28,016
Now, as I said, I want to
mask my image with this path.


489
00:25:28,146 --> 00:25:29,176
So, I'll do that here.


490
00:25:29,836 --> 00:25:32,896
I'm also adding in my
attributed string to the mask


491
00:25:34,486 --> 00:25:36,796
so that it's punched
out of the center.


492
00:25:37,426 --> 00:25:43,076
So, the timeline is great for
getting a sense of how your code


493
00:25:43,076 --> 00:25:45,686
and how your views are
doing, but it does more


494
00:25:45,686 --> 00:25:47,216
than just present static views.


495
00:25:47,606 --> 00:25:51,856
It can also render them live,
which is great for animation,


496
00:25:52,366 --> 00:25:53,806
which is what I'm
going to do next.


497
00:25:55,016 --> 00:25:57,896
To do that, I'll just import
a little bit more API.


498
00:25:59,536 --> 00:26:00,456
See how simple this is?


499
00:26:01,376 --> 00:26:02,556
Especially when you
don't have to type.


500
00:26:04,796 --> 00:26:07,756
And I add in a little code
that takes my two images,


501
00:26:08,086 --> 00:26:12,016
one that's been masked, applies
it on top of the other one,


502
00:26:12,506 --> 00:26:14,776
and makes it animate
with Core Animation.


503
00:26:15,446 --> 00:26:21,646
Now, as Chris showed you
earlier, you can also move


504
00:26:21,646 --> 00:26:23,796
around in time in the timeline.


505
00:26:24,666 --> 00:26:27,056
So, I can move back
and I can scrub


506
00:26:27,056 --> 00:26:29,576
around to really
get a good sense


507
00:26:29,576 --> 00:26:31,086
of how my animation is working.


508
00:26:31,766 --> 00:26:37,026
Now, the, the next thing I
want to do is I want to add


509
00:26:38,066 --> 00:26:40,986
that date I created
earlier to my mask,


510
00:26:42,326 --> 00:26:47,846
and I'll do that up here, and
we can all cross our fingers


511
00:26:47,846 --> 00:26:49,586
as I type live onstage.


512
00:26:54,576 --> 00:26:56,256
How about that?


513
00:26:57,586 --> 00:26:58,946
So, well, hmm.


514
00:26:59,226 --> 00:27:00,976
I, OK, so I've added my date,


515
00:27:00,976 --> 00:27:02,986
but that doesn't
look all that great.


516
00:27:03,446 --> 00:27:06,346
Let's see if I can
make that look better


517
00:27:06,346 --> 00:27:09,716
by reducing the font size.


518
00:27:10,416 --> 00:27:12,686
Well, that's an awfully
big date.


519
00:27:13,816 --> 00:27:16,356
I think what I want to do is I
want to make that date shorter,


520
00:27:17,166 --> 00:27:20,306
and I'm betting NSDate has
some help for me there.


521
00:27:21,506 --> 00:27:25,656
So, as with any class in Xcode,
I can command click on the,


522
00:27:25,656 --> 00:27:27,476
the name of that class
to jump to the header.


523
00:27:28,276 --> 00:27:30,386
In this case, I'll
command double click


524
00:27:30,536 --> 00:27:31,796
to open it in a new window.


525
00:27:32,446 --> 00:27:37,576
Now, notice that this doesn't
look like an Objective-C header.


526
00:27:38,216 --> 00:27:40,516
It isn't. It's Swift.


527
00:27:41,166 --> 00:27:44,866
That's because Xcode
creates Swift versions


528
00:27:44,986 --> 00:27:47,806
of Objective-C headers
for you, so you don't have


529
00:27:47,836 --> 00:27:48,696
to translate [applause].


530
00:27:49,406 --> 00:27:49,806
That's right.


531
00:27:54,226 --> 00:27:57,246
So you don't have to translate
what you see in the header


532
00:27:57,246 --> 00:27:59,026
to what you implement
in your code.


533
00:28:00,236 --> 00:28:02,276
Now, I have to come clean.


534
00:28:02,926 --> 00:28:05,556
I don't know all that
much about NSDate.


535
00:28:06,666 --> 00:28:09,216
So, looking at the header, well,


536
00:28:09,216 --> 00:28:10,756
that's not really
doing enough for me.


537
00:28:11,506 --> 00:28:15,026
Luckily, in Xcode, we have
lots of great sample code


538
00:28:15,026 --> 00:28:17,046
and documentation
to help me out.


539
00:28:18,486 --> 00:28:24,006
But wouldn't it be great if
you could combine the sort


540
00:28:24,006 --> 00:28:29,016
of hands-on, do-it-yourself
style of sample code and the,


541
00:28:29,016 --> 00:28:33,036
the sort of show-me-how-to-do-it
style of documentation?


542
00:28:33,646 --> 00:28:36,946
Yes. Yes, it would.


543
00:28:38,586 --> 00:28:43,216
That's why we created
Documentation Playgrounds.


544
00:28:45,516 --> 00:28:54,996
[ Applause ]


545
00:28:55,496 --> 00:28:58,816
Documentation Playgrounds
combine the best of both worlds.


546
00:28:59,176 --> 00:29:02,066
Because it's a playground,
I can play.


547
00:29:02,676 --> 00:29:04,166
But because it's documentation,


548
00:29:04,236 --> 00:29:06,056
I get adult supervision
[laughter].


549
00:29:09,026 --> 00:29:11,726
So, here is a Documentation
Playground talking


550
00:29:11,726 --> 00:29:13,906
about converting between
dates and strings,


551
00:29:15,036 --> 00:29:16,636
and here's what I'm looking for.


552
00:29:16,636 --> 00:29:18,456
It's talking about
date formatters.


553
00:29:18,516 --> 00:29:19,906
I'm pretty sure that's
what I want.


554
00:29:20,716 --> 00:29:23,526
And it even very
handily tells me


555
00:29:23,666 --> 00:29:26,776
to try setting different
values for time and date style.


556
00:29:27,526 --> 00:29:31,776
And even more handy, it even
gives me the enums to try.


557
00:29:33,076 --> 00:29:34,326
So, let's see.


558
00:29:34,326 --> 00:29:37,816
I'm betting short style is
what I'm after, so all I have


559
00:29:37,816 --> 00:29:40,236
to do is copy and paste,


560
00:29:40,876 --> 00:29:43,406
and I can see my result
change in the timeline.


561
00:29:43,756 --> 00:29:44,676
That's getting close.


562
00:29:45,256 --> 00:29:47,456
Let's try this one.


563
00:29:47,656 --> 00:29:50,006
Awesome! That's exactly
what I'm looking for.


564
00:29:51,506 --> 00:29:53,376
Don't you want all
documentation to work this way?


565
00:29:54,866 --> 00:29:59,856
So, now I know how to format my
date, and it's a simple matter


566
00:29:59,856 --> 00:30:01,826
of doing that in my Playground.


567
00:30:02,516 --> 00:30:05,996
I'm going to do that by
replacing a bunch of this code


568
00:30:06,996 --> 00:30:12,186
with some code that has
my shortened date in it.


569
00:30:13,076 --> 00:30:21,036
Hello. And my, my
fancy, there you go.


570
00:30:22,236 --> 00:30:25,336
There it is.


571
00:30:25,606 --> 00:30:28,646
Now my view is looking
exactly like what I wanted.


572
00:30:29,696 --> 00:30:34,146
That's a small taste of
Swift Playgrounds in Xcode 6.


573
00:30:34,556 --> 00:30:36,636
We think you're going to
love playing with your code.


574
00:30:37,536 --> 00:30:38,346
Back to you, Andreas.


575
00:30:39,516 --> 00:30:46,956
[ Applause ]


576
00:30:47,456 --> 00:30:48,056
>> Thank you, Max.


577
00:30:48,816 --> 00:30:50,306
So, now that you
know a little bit


578
00:30:50,306 --> 00:30:52,306
about what the Swift
coding language is,


579
00:30:52,446 --> 00:30:53,526
how do you start using it?


580
00:30:54,136 --> 00:30:55,766
Well, I made that
really easy for you.


581
00:30:56,686 --> 00:30:58,416
Swift uses the same object model


582
00:30:58,576 --> 00:31:01,066
and the same memory management
approach as Objective-C.


583
00:31:01,066 --> 00:31:05,606
You can import all our system
APIs directly into Swift.


584
00:31:07,066 --> 00:31:09,716
Foundation collections
are transparently bridged


585
00:31:10,026 --> 00:31:11,956
to Swift language
arrays and dictionaries,


586
00:31:12,886 --> 00:31:13,736
and we even went ahead


587
00:31:13,736 --> 00:31:16,356
and modernized our
existing Objective-C APIs


588
00:31:16,736 --> 00:31:19,326
so that they interact more
naturally for Swift code.


589
00:31:19,326 --> 00:31:22,766
So, you can adopt
Swift at your own pace,


590
00:31:22,956 --> 00:31:24,556
if you would like, file by file.


591
00:31:24,926 --> 00:31:27,046
You can mix and match
Objective-C


592
00:31:27,046 --> 00:31:28,696
and Swift in the same project.


593
00:31:30,786 --> 00:31:33,176
We also wrote some great
documentation for you.


594
00:31:33,586 --> 00:31:36,436
There's an entire new book
about Swift that you will find


595
00:31:36,436 --> 00:31:37,926
in the iBookstore for free.


596
00:31:38,956 --> 00:31:41,436
And we, of course, updated
our reference documentation


597
00:31:41,616 --> 00:31:44,826
to cover all our APIs in
both Swift and Objective-C.


598
00:31:46,406 --> 00:31:48,056
Now I know that all of
you guys really wanted


599
00:31:48,056 --> 00:31:51,536
to be the first ones to submit
a Swift app to the App Store,


600
00:31:51,936 --> 00:31:53,786
and I'm very sorry to
have to disappoint you,


601
00:31:53,856 --> 00:31:57,476
but we've already done that
because, because this afternoon,


602
00:31:57,596 --> 00:32:00,946
we're updating the WWDC app,
the app that you guys are using


603
00:32:00,946 --> 00:32:02,336
to get around here
at the conference,


604
00:32:02,686 --> 00:32:04,226
with a version that uses Swift.


605
00:32:04,376 --> 00:32:06,246
So, this language is
ready for you to use.


606
00:32:06,246 --> 00:32:06,796
It's real.


607
00:32:08,506 --> 00:32:10,886
Now, one thing that is really
important to understand is


608
00:32:10,886 --> 00:32:13,686
that we are planning to evolve
this language very rapidly.


609
00:32:13,886 --> 00:32:15,926
Among other things, we really
want to hear what you have


610
00:32:15,926 --> 00:32:17,916
to say about it and
incorporate your feedback


611
00:32:17,916 --> 00:32:18,846
as much as possible.


612
00:32:19,586 --> 00:32:22,216
And so we are not going to
promise source compatibility


613
00:32:22,376 --> 00:32:23,556
between Xcode releases.


614
00:32:24,546 --> 00:32:27,586
Some source conversion might be
necessary, and we'll do our best


615
00:32:27,586 --> 00:32:30,176
to provide converters on the
way if we make major changes.


616
00:32:30,496 --> 00:32:34,066
But the one thing we will
promise is binary compatibility


617
00:32:34,066 --> 00:32:35,986
for your Swift apps because
we want you to be able


618
00:32:35,986 --> 00:32:37,466
to try it without delay.


619
00:32:38,006 --> 00:32:41,236
So, when we ship Xcode 6 later
this year, you will be able


620
00:32:41,236 --> 00:32:43,096
to submit your Swift
apps to the App Store.


621
00:32:44,406 --> 00:32:47,306
And they will run, your apps
will run on iOS 7 and later,


622
00:32:47,826 --> 00:32:49,316
and OS X Mavericks and later.


623
00:32:49,536 --> 00:32:52,226
So, Swift apps are not
limited to iOS 8 and Yosemite.


624
00:32:53,516 --> 00:33:00,186
[ Applause ]


625
00:33:00,686 --> 00:33:02,866
So, we are, as you can
probably imagine, really,


626
00:33:02,866 --> 00:33:04,176
really excited about Swift.


627
00:33:04,336 --> 00:33:06,676
We think it's quickly going to
become the programming language


628
00:33:06,676 --> 00:33:09,376
of choice for our own
code as well as your apps.


629
00:33:09,866 --> 00:33:12,466
We're looking very much forward
to hear what you think about.


630
00:33:14,556 --> 00:33:16,116
Next we're going to
talk about gaming.


631
00:33:16,286 --> 00:33:17,666
This is another technology area


632
00:33:17,666 --> 00:33:19,236
that you are pushing
on very strongly.


633
00:33:19,236 --> 00:33:22,866
We have many great techno-,
technology advances to announce


634
00:33:23,086 --> 00:33:24,316
in this area this year.


635
00:33:24,456 --> 00:33:26,006
To tell you more about
it, I'm going to hand


636
00:33:26,006 --> 00:33:27,866
over to Jeff Schtie
[assumed spelling].


637
00:33:28,516 --> 00:33:32,556
[ Applause ]


638
00:33:33,056 --> 00:33:33,806
>> Thank you, Andreas.


639
00:33:34,486 --> 00:33:38,936
We have an amazing games
technology ecosystem with APIs,


640
00:33:39,826 --> 00:33:41,576
tools, and hardware
that allow you


641
00:33:41,576 --> 00:33:43,876
to all build brilliant games.


642
00:33:44,746 --> 00:33:45,326
Let's take a look.


643
00:33:46,826 --> 00:33:47,476
So, Game Center.


644
00:33:48,026 --> 00:33:50,296
It's our social gaming
network providing features


645
00:33:50,296 --> 00:33:54,776
like achievements, leaderboards,
friends, and multiplayer.


646
00:33:56,156 --> 00:33:58,376
Many of you are already taking
advantage of Game Center


647
00:33:58,376 --> 00:33:59,636
to differentiate your game,


648
00:34:00,046 --> 00:34:02,806
and we have great
engagement with Game Center.


649
00:34:02,806 --> 00:34:05,166
In fact, last month we had


650
00:34:05,166 --> 00:34:08,576
over 130 million
monthly active users.


651
00:34:08,576 --> 00:34:10,856
So, that's Game Center.


652
00:34:11,966 --> 00:34:12,676
Game Controllers.


653
00:34:13,266 --> 00:34:16,966
Last year at WWDC, we
introduced Game Controllers,


654
00:34:16,966 --> 00:34:18,606
the Game Controller MFI program


655
00:34:18,866 --> 00:34:22,476
and the corresponding
APIs for iOS and OS X.


656
00:34:23,746 --> 00:34:25,946
One year later, Game Controllers
are doing really well.


657
00:34:26,946 --> 00:34:30,005
Thousands of games taking
advantage of Game Controllers


658
00:34:30,005 --> 00:34:32,886
for both the best of
touch and button inputs.


659
00:34:34,275 --> 00:34:38,146
We have Game Controller demo
stations at Apple Stores


660
00:34:38,146 --> 00:34:39,946
like the one right
here in San Francisco,


661
00:34:39,946 --> 00:34:43,966
and we're introducing
controller forwarding.


662
00:34:44,485 --> 00:34:46,886
So, what is controller
forwarding?


663
00:34:47,846 --> 00:34:50,666
Now you can take an iOS device,
snap it into a Game Controller,


664
00:34:50,876 --> 00:34:54,636
and then use the integrated
inputs of both buttons


665
00:34:55,306 --> 00:34:57,326
and motion to control
iPads and Macs.


666
00:34:57,486 --> 00:34:58,306
It's pretty cool.


667
00:35:03,106 --> 00:35:03,996
So that's Game Controllers.


668
00:35:04,926 --> 00:35:06,576
So now let's talk about
our graphics APIs.


669
00:35:08,756 --> 00:35:11,936
We have SpriteKit, we have add,
we're adding many new features


670
00:35:11,936 --> 00:35:13,486
to both SpriteKit and SceneKit.


671
00:35:14,256 --> 00:35:17,396
We're bringing SceneKit
to iOS, and of course,


672
00:35:17,396 --> 00:35:20,816
we're very excited
about our low-overhead,


673
00:35:21,426 --> 00:35:23,226
highly optimized Metal API.


674
00:35:26,016 --> 00:35:27,896
So, new for this
year is a major push


675
00:35:27,896 --> 00:35:30,376
to making building casual
games easier than ever.


676
00:35:30,376 --> 00:35:33,416
And SpriteKit is
our 2D graphics API.


677
00:35:34,046 --> 00:35:37,396
We're introducing new features
like per pixel collisions


678
00:35:37,716 --> 00:35:41,846
in physics, field
forces, inverse kinematics


679
00:35:41,846 --> 00:35:44,066
with constraints, and,
of course, Shaders.


680
00:35:46,016 --> 00:35:49,466
SceneKit is kind of like
SpriteKit but for 3D,


681
00:35:49,466 --> 00:35:54,176
making it simpler than ever
to produce 3D games, and,


682
00:35:54,176 --> 00:35:55,606
of course, it's now on iOS.


683
00:35:57,046 --> 00:36:01,026
New for this year in
SceneKit, you, sorry.


684
00:36:03,396 --> 00:36:05,986
SceneKit has everything you
would expect from a 3D graphics,


685
00:36:05,986 --> 00:36:10,196
high-level 3D graphics API, like
the ability to load, manipulate,


686
00:36:10,196 --> 00:36:12,096
and render complex 3D scenes.


687
00:36:12,096 --> 00:36:14,626
It has some of the
same great new features


688
00:36:14,856 --> 00:36:15,896
as we have on SpriteKit.


689
00:36:16,606 --> 00:36:20,706
But what's really cool is
you can integrate SceneKit


690
00:36:20,706 --> 00:36:21,396
and SpriteKit.


691
00:36:21,776 --> 00:36:24,866
You can take a 3D object
from SceneKit and use


692
00:36:24,866 --> 00:36:27,196
that as a sprite in
SpriteKit with no overhead.


693
00:36:28,156 --> 00:36:31,866
You can take the output of
a SpriteKit scene and use it


694
00:36:31,866 --> 00:36:33,596
as a texter in SceneKit.


695
00:36:34,786 --> 00:36:35,706
It's really, really cool.


696
00:36:35,706 --> 00:36:41,506
So, I'd like to invite Jacques
up to help me show you a demo


697
00:36:41,506 --> 00:36:42,916
of both SceneKit and SpriteKit.


698
00:36:44,516 --> 00:36:52,236
[ Applause ]


699
00:36:52,736 --> 00:36:53,436
So, let's say you want


700
00:36:53,436 --> 00:36:55,386
to use the built-in Physics
system for collisions.


701
00:36:55,956 --> 00:36:57,656
Last year, you may have
gotten something like this.


702
00:36:58,876 --> 00:37:01,466
So, that's OK, but
it's not great.


703
00:37:02,026 --> 00:37:02,976
So, why is this?


704
00:37:03,206 --> 00:37:05,966
Well, if we turn on Physics
Debug Draw, what we'll see is


705
00:37:06,166 --> 00:37:09,586
that the Physics bounding
box, boxes do not correspond


706
00:37:09,586 --> 00:37:11,116
to the exact shape
of the sprites.


707
00:37:12,796 --> 00:37:15,896
So, new for this year, you can
turn on perfect cell collisions,


708
00:37:16,176 --> 00:37:18,956
and now SpriteKit can use
the sprites alpha mask


709
00:37:20,266 --> 00:37:22,256
to create pixel-accurate
collisions.


710
00:37:22,986 --> 00:37:25,426
This allows you to create
complex interactions


711
00:37:25,696 --> 00:37:28,096
and build things like
gears or even machines.


712
00:37:31,866 --> 00:37:33,106
We've also added field forces.


713
00:37:33,636 --> 00:37:35,506
Here you see an, an
attractor interacting


714
00:37:35,506 --> 00:37:37,166
with the sprites in the scene.


715
00:37:38,566 --> 00:37:40,476
We can add a repulser and
see how the tube field forces


716
00:37:40,476 --> 00:37:41,846
interact together
with the sprites,


717
00:37:41,846 --> 00:37:45,106
and we've added many real
and imaginary field forces


718
00:37:45,106 --> 00:37:48,446
like directional gravity,
black holes, magnets,


719
00:37:48,956 --> 00:37:50,876
repulsers, and spring forces.


720
00:37:54,576 --> 00:37:55,936
And, of course, we have
everything you need


721
00:37:56,136 --> 00:37:57,066
for dynamic lighting.


722
00:37:58,166 --> 00:38:01,286
One AB, here's a basic scene kit
scene and one API call can turn


723
00:38:01,286 --> 00:38:04,976
on lighting, and of course,
you can select the object


724
00:38:04,976 --> 00:38:06,486
in your scene which you'd
like to cast shadows.


725
00:38:09,806 --> 00:38:11,576
And if you want to take
this to the next level,


726
00:38:11,576 --> 00:38:12,586
you can add normal maps.


727
00:38:14,916 --> 00:38:17,456
So, what we've done here,
with a single API call,


728
00:38:17,456 --> 00:38:19,616
we've turned on normal maps.


729
00:38:19,616 --> 00:38:21,666
SpriteKit uses the
existing artwork


730
00:38:21,836 --> 00:38:23,976
to generate a normal map
automatically, so there's,


731
00:38:23,976 --> 00:38:25,406
no extra art was added here.


732
00:38:26,006 --> 00:38:27,906
This kind of, this
kind of dynamic,


733
00:38:27,906 --> 00:38:30,056
dramatic element can
really add to your games.


734
00:38:33,346 --> 00:38:34,546
So, let's take a look
at the integration


735
00:38:34,546 --> 00:38:35,736
of SpriteKit with SceneKit.


736
00:38:36,156 --> 00:38:39,106
So, here you have a SpriteKit
application you may recall


737
00:38:39,106 --> 00:38:39,726
from last year.


738
00:38:39,726 --> 00:38:43,136
What you can do now is take
a SceneKit node and put it


739
00:38:43,136 --> 00:38:45,866
into the, into the
scene as a 3D object.


740
00:38:47,036 --> 00:38:49,256
That, that allows
with no overhead


741
00:38:49,316 --> 00:38:50,736
to get a, a tremendous result.


742
00:38:50,836 --> 00:38:52,636
Here we've replaced
both the hero


743
00:38:52,636 --> 00:38:54,446
and the alien with 3D objects.


744
00:38:55,136 --> 00:38:56,526
So what does this
allow you to do?


745
00:38:56,526 --> 00:38:58,096
You can design your game in 2D.


746
00:38:58,266 --> 00:39:00,896
You can set up your complex
interactions all in 2D,


747
00:39:01,006 --> 00:39:02,496
then you could add
your 3D assets


748
00:39:02,496 --> 00:39:04,406
in to give your game
that extra pop.


749
00:39:04,616 --> 00:39:07,496
So, that's SceneKit
with a SpriteKit.


750
00:39:08,796 --> 00:39:10,186
Now, let's take a,
take a look at some


751
00:39:10,186 --> 00:39:11,286
of the features of SceneKit.


752
00:39:11,586 --> 00:39:15,966
As I said, SceneKit is kind
of like SpriteKit but for 3D.


753
00:39:15,966 --> 00:39:18,146
It makes it simpler than
ever to build 3D games.


754
00:39:18,146 --> 00:39:20,376
Now, let's take a tour
of some of the features.


755
00:39:20,876 --> 00:39:25,106
Here we have an example of,
the built-in 3D Physics Engine.


756
00:39:25,106 --> 00:39:27,776
You have the blocks and balls
colliding with each other


757
00:39:27,776 --> 00:39:28,956
and also with the room itself.


758
00:39:29,696 --> 00:39:32,566
This is, game is using the
3D, built-in 3D Physics Engine


759
00:39:32,566 --> 00:39:34,406
and it's obviously
fully interactive.


760
00:39:34,736 --> 00:39:37,286
And we have 3D field forces.


761
00:39:38,076 --> 00:39:40,536
Here you have an attracter
in 3D, which is kind


762
00:39:40,536 --> 00:39:43,866
of like a space vacuum creating
this really cool effect.


763
00:39:44,006 --> 00:39:46,406
What's amazing is you can
just add a simple attracter


764
00:39:46,406 --> 00:39:48,676
to your scene to create
this great effect.


765
00:39:49,276 --> 00:39:50,316
No other work was necessary.


766
00:39:54,336 --> 00:39:56,576
And you can combine
SceneKit and SpriteKit.


767
00:39:57,686 --> 00:39:59,036
So, what are you seeing here?


768
00:39:59,616 --> 00:40:02,116
So, the paintballs are
being shot into the scene


769
00:40:02,116 --> 00:40:05,016
as 3D objects using the 3D
Collision System to collide


770
00:40:05,046 --> 00:40:06,786
with the Taurus,
another 3D object.


771
00:40:07,216 --> 00:40:10,896
We then take a paint splotch
sprite, say that 3 times fast,


772
00:40:11,436 --> 00:40:14,586
and paste it into a SpriteKit
canvas off screen you don't see.


773
00:40:14,836 --> 00:40:17,796
We take the results of that and
texture map it onto the Taurus,


774
00:40:18,336 --> 00:40:20,586
so it creates this really
convincing, cool combination


775
00:40:20,586 --> 00:40:23,356
of SpriteKit and SceneKit,
made possible by the,


776
00:40:23,356 --> 00:40:24,886
the integration of these APIs.


777
00:40:27,456 --> 00:40:28,886
And finally, of course,
you have shaders.


778
00:40:28,936 --> 00:40:31,996
We have vertex, surface,
and fragment shaders.


779
00:40:31,996 --> 00:40:34,386
Here you have a simple
vertex shader,


780
00:40:34,386 --> 00:40:36,976
which is manipulating the
model's geometry in real time.


781
00:40:38,246 --> 00:40:41,196
We have surface shaders where
you can effect the surface


782
00:40:41,546 --> 00:40:44,146
and lighting properties
of our model,


783
00:40:44,146 --> 00:40:45,766
here creating this
cool caustic effect.


784
00:40:47,296 --> 00:40:49,046
And finally, fragment shaders,


785
00:40:49,046 --> 00:40:51,366
which can create amazing
pixel-level effects


786
00:40:51,636 --> 00:40:53,096
like this glass globe
effect here.


787
00:40:53,096 --> 00:40:56,106
So, that's seeing a
couple of shaders.


788
00:40:57,956 --> 00:40:59,066
Now, I'd like to take a minute


789
00:40:59,066 --> 00:41:02,956
to have Jacques show you how
easy it is to enable some


790
00:41:02,956 --> 00:41:04,636
of these features
using our Xcode tools.


791
00:41:04,946 --> 00:41:06,186
>> Thanks, Jeff.


792
00:41:07,336 --> 00:41:10,116
So, new in Xcode 6
are built-in tools


793
00:41:10,356 --> 00:41:11,516
for SpriteKit and SceneKit.


794
00:41:11,936 --> 00:41:13,386
You can edit content
right within Xcode.


795
00:41:13,386 --> 00:41:15,966
I'm going to give you a
quick tour of that right now.


796
00:41:19,566 --> 00:41:22,356
So, here we have the
SpriteKit editor in Xcode 6.


797
00:41:22,926 --> 00:41:25,536
You see the per-pixel scene we
had from the iPad demo earlier.


798
00:41:25,536 --> 00:41:28,816
I'm going to make some quick
edits to it in edit mode,


799
00:41:28,926 --> 00:41:31,576
which I'm currently in, and then
I'm going to switch to simulate


800
00:41:31,576 --> 00:41:33,426
in simulate mode to
see the physics live.


801
00:41:33,426 --> 00:41:37,206
So, I'm going to go over here on
the right to my media library,


802
00:41:37,596 --> 00:41:39,796
which includes all the
images inside my project.


803
00:41:39,796 --> 00:41:42,626
I'm going to drop one of
these squirrels into here,


804
00:41:42,626 --> 00:41:47,316
and I'm going to place it
using the new snap-in feature


805
00:41:48,236 --> 00:41:51,636
and then I'm going
to simulate this.


806
00:41:52,456 --> 00:41:55,106
Well, this behaves
pretty much as expected


807
00:41:55,106 --> 00:41:58,346
because the blue rectangles
are the physics body outlines,


808
00:41:58,526 --> 00:41:59,716
so this is not falling over.


809
00:41:59,716 --> 00:42:03,796
I'm going to correct that by
turning on per-pixel physics,


810
00:42:04,396 --> 00:42:07,316
which is as simple as selecting
the objects I want to use,


811
00:42:07,726 --> 00:42:09,276
changing their physics
definition


812
00:42:09,276 --> 00:42:10,716
to use the alpha mask.


813
00:42:11,946 --> 00:42:16,236
Then I'm going to simulate again
and the right thing happens.


814
00:42:17,936 --> 00:42:19,336
OK, well that was easy.


815
00:42:19,816 --> 00:42:23,026
Let's move on to showing you
the new feature of field forces.


816
00:42:23,966 --> 00:42:27,476
So, field forces are super
easy to use inside Xcode,


817
00:42:27,966 --> 00:42:29,966
and I implore you to try them
out and play with them here,


818
00:42:29,966 --> 00:42:32,206
and it's one of the
best places to do that.


819
00:42:32,206 --> 00:42:34,636
So, I'm going to drag a
theoretical field in here,


820
00:42:35,166 --> 00:42:36,016
called a spring field,


821
00:42:37,086 --> 00:42:39,296
which acts as if there
was a spring connected


822
00:42:39,336 --> 00:42:41,426
between the field
and any of the nodes


823
00:42:41,426 --> 00:42:42,376
that I'm going to enable it on.


824
00:42:43,466 --> 00:42:44,766
So, I'm going to pick
some of these balls here.


825
00:42:44,766 --> 00:42:47,136
I'm going to enable the
spring field on them


826
00:42:47,776 --> 00:42:51,136
by setting their physics field
mask to something other than 0.


827
00:42:51,136 --> 00:42:52,956
I've done that.


828
00:42:52,956 --> 00:42:54,656
Now I'm going to simulate this.


829
00:42:54,656 --> 00:42:57,236
Well, you notice they all
drag towards the center


830
00:42:57,236 --> 00:43:00,326
of the spring there, and you
notice also as they collided,


831
00:43:00,756 --> 00:43:02,796
they collided with the
inert pulser not enabled


832
00:43:02,796 --> 00:43:03,486
on the field mask.


833
00:43:04,196 --> 00:43:06,436
So, they actually,
full physics running,


834
00:43:06,436 --> 00:43:08,896
and the field only affecting
the balls I selected.


835
00:43:10,076 --> 00:43:11,356
Super easy and fun to use.


836
00:43:13,086 --> 00:43:16,246
Next up, I want to
take you through how


837
00:43:16,246 --> 00:43:18,526
to put 3D content inside
your SpriteKit scene.


838
00:43:19,026 --> 00:43:20,886
So, just bear with me while
I go through the steps here.


839
00:43:21,606 --> 00:43:22,166
All right.


840
00:43:22,166 --> 00:43:26,886
I'm going to drag
that ship in and dump.


841
00:43:27,926 --> 00:43:32,256
All right, so that was
step 1, 2, and that's it.


842
00:43:32,256 --> 00:43:33,196
You can see it's 3D.


843
00:43:33,366 --> 00:43:36,346
I'm going to try that again
in case you missed it.


844
00:43:37,626 --> 00:43:39,306
So, here we go.


845
00:43:39,306 --> 00:43:40,706
An alien. OK.


846
00:43:41,156 --> 00:43:42,826
So, step 1, that's
everything you need.


847
00:43:43,516 --> 00:43:45,136
So, this is just a
quick preview of some


848
00:43:45,136 --> 00:43:46,896
of the great new features
we've added to SpriteKit


849
00:43:46,896 --> 00:43:48,206
and SceneKit in Xcode 6.


850
00:43:48,866 --> 00:43:49,396
Thank you so much.


851
00:43:49,396 --> 00:43:50,976
Back to Jeff.


852
00:43:51,516 --> 00:43:56,656
[ Applause ]


853
00:43:57,156 --> 00:43:57,876
>> So, thank you, Jacques.


854
00:43:58,366 --> 00:44:01,186
So, that was some of our
high-level, high-performance,


855
00:44:01,186 --> 00:44:03,516
super-efficient 2D
and 3D games API.


856
00:44:04,416 --> 00:44:06,406
Now, let's go from
the high-level right


857
00:44:06,406 --> 00:44:07,326
down to the GPU.


858
00:44:08,636 --> 00:44:11,386
We've been optimizing the
heck out of the graphics stack


859
00:44:11,856 --> 00:44:14,666
with a new, low-overhead
API Metal.


860
00:44:15,206 --> 00:44:16,086
So, why is that?


861
00:44:16,086 --> 00:44:17,166
What, what does that give you?


862
00:44:18,126 --> 00:44:20,646
Well, many games want to
run at 60 frames per second.


863
00:44:22,216 --> 00:44:24,966
So, a little bit of math
shows you that you have a bit


864
00:44:24,966 --> 00:44:27,406
over 16 milliseconds
for every frame.


865
00:44:28,266 --> 00:44:31,576
We put that on a timeline, what
we can see is that you have


866
00:44:31,626 --> 00:44:33,466
to get all your application
work done,


867
00:44:34,126 --> 00:44:37,196
you have to issue your drawing
calls, and the system framer has


868
00:44:37,196 --> 00:44:39,506
to turn those drawing
calls into GPU commands all


869
00:44:39,506 --> 00:44:42,786
within that 16 milliseconds or
you'll start to drop frames.


870
00:44:43,216 --> 00:44:46,636
And of course that's just one of
a number of frames you have to,


871
00:44:46,636 --> 00:44:49,456
you have to produce to make a
truly interactive experience.


872
00:44:51,356 --> 00:44:52,716
So, let's expand
that first frame out.


873
00:44:53,496 --> 00:44:54,746
You see, there's
two distinct parts.


874
00:44:54,746 --> 00:44:57,066
The first part is the
application piece.


875
00:44:57,446 --> 00:45:00,736
The second part is that system
framework, that GPU API.


876
00:45:01,316 --> 00:45:03,126
Well, Metal is super-efficient


877
00:45:03,176 --> 00:45:05,576
at reducing the second
part to the bare minimum.


878
00:45:05,576 --> 00:45:09,326
So, what this gives
you is more time.


879
00:45:09,956 --> 00:45:12,366
More time for AI,
more time for physics,


880
00:45:12,746 --> 00:45:14,116
more time for more drawing,


881
00:45:14,456 --> 00:45:17,096
more time to make your
game even more brilliant.


882
00:45:19,116 --> 00:45:23,396
So, Metal allows you to
unlock the power of the GPU.


883
00:45:23,396 --> 00:45:26,706
It gives you easy
access and full control


884
00:45:26,706 --> 00:45:27,806
over the rendering pipeline.


885
00:45:27,806 --> 00:45:33,256
It has features like the direct
control over the creation


886
00:45:33,466 --> 00:45:35,706
and encoding of GPU
command buffers.


887
00:45:36,316 --> 00:45:38,036
It also provides a
unified shading language


888
00:45:38,036 --> 00:45:40,736
for both graphics and compute
with offline compilation.


889
00:45:41,376 --> 00:45:46,846
As you saw this morning,
Unity, Crytek, Epic Games,


890
00:45:46,846 --> 00:45:49,786
and Electronic Arts have all
committed to supporting Metal,


891
00:45:50,366 --> 00:45:52,666
and today we have
Johan Andersson


892
00:45:53,136 --> 00:45:55,616
from Electronic Arts here to
show us what they've been able


893
00:45:55,616 --> 00:45:58,466
to do with their Frostbite
engine on top of Metal.


894
00:45:58,996 --> 00:45:59,336
Johan.


895
00:46:00,516 --> 00:46:06,506
[ Applause ]


896
00:46:07,006 --> 00:46:07,316
Welcome.


897
00:46:08,556 --> 00:46:09,056
>> Thanks, Jeff.


898
00:46:09,476 --> 00:46:10,206
It's really great to be here.


899
00:46:11,026 --> 00:46:16,146
I'm one of those first-time Mac
and iOS developers, so hello.


900
00:46:17,966 --> 00:46:20,486
We've been building for
the last couple of weeks


901
00:46:20,556 --> 00:46:23,296
and you render using Metal
for our game engine Frostbite.


902
00:46:24,636 --> 00:46:26,686
Well, our goal with
using Metal, this new,


903
00:46:26,686 --> 00:46:30,166
low-overhead graphics API, is
to try and enable the wide set


904
00:46:30,166 --> 00:46:32,576
of capabilities of our
Frostbite engine on iOS.


905
00:46:33,646 --> 00:46:36,426
And to showcase this, we
built a new demo in the world


906
00:46:36,426 --> 00:46:37,756
of Plants vs. Zombies
Garden Warfare,


907
00:46:37,756 --> 00:46:38,516
one of our latest console games.


908
00:46:38,516 --> 00:46:38,976
Let's have a look.


909
00:46:49,116 --> 00:46:50,376
Yeah, will load in a little bit.


910
00:46:55,516 --> 00:47:00,566
[ Music ]


911
00:47:01,066 --> 00:47:02,866
So, here we have the
zombies, our enemies,


912
00:47:03,446 --> 00:47:05,976
advancing on the plants who are
defending their garden center.


913
00:47:09,836 --> 00:47:11,416
This is the same
Frostbite engine that we use


914
00:47:11,486 --> 00:47:14,096
to power our triple-A console
games, such as Battlefield 4


915
00:47:14,186 --> 00:47:16,616
and Need for Speed,
here running in iOS.


916
00:47:17,516 --> 00:47:25,266
[ Sound from computer
game demo ]


917
00:47:25,766 --> 00:47:28,136
One of the biggest changes we
saw with using Metal instead


918
00:47:28,136 --> 00:47:30,586
of OpenGL was that our
rendering submission times


919
00:47:30,586 --> 00:47:32,236
on the CPU became
five times faster.


920
00:47:32,786 --> 00:47:34,576
This is really quite
impressive and it's a,


921
00:47:34,646 --> 00:47:37,216
it's a really good benefit
because it frees up 80 percent


922
00:47:37,216 --> 00:47:39,606
of one of our CPU cores which
makes it a lot easier for us


923
00:47:39,656 --> 00:47:40,786
to build full games, games


924
00:47:40,786 --> 00:47:42,906
with even more animations,
physics, and audio.


925
00:47:43,566 --> 00:47:44,826
Uh-oh! It doesn't
look like it's going


926
00:47:44,826 --> 00:47:45,606
that well for the plants here.


927
00:47:46,026 --> 00:47:47,886
Let's see what they do.


928
00:47:48,516 --> 00:48:09,516
[ Sound from computer
game demo ]


929
00:48:10,016 --> 00:48:17,000
[ Applause ]


930
00:48:18,406 --> 00:48:18,936
Thanks, everyone.


931
00:48:18,936 --> 00:48:20,466
We're really happy with
the result we're getting,


932
00:48:20,866 --> 00:48:23,856
and let's take a closer look at
some of the action we have here.


933
00:48:23,856 --> 00:48:26,606
So, this is rendered in real
time in Frostbite with Metal


934
00:48:26,656 --> 00:48:29,636
on an iPad Air, and
it's interactive.


935
00:48:29,736 --> 00:48:31,696
Nicholas here is moving
around with the camera.


936
00:48:31,696 --> 00:48:34,596
And one of the key benefits
that we're getting from Metal is


937
00:48:34,596 --> 00:48:37,746
that we get fine-grain control
over the GPU and overall system.


938
00:48:37,986 --> 00:48:39,936
We can build command buffers
efficiently in parallel


939
00:48:40,006 --> 00:48:41,746
and we can control them.


940
00:48:42,006 --> 00:48:44,156
We can explicitly
manage GPU resources,


941
00:48:44,206 --> 00:48:46,356
which significantly
reduces overhead for us


942
00:48:46,686 --> 00:48:49,386
and makes it a lot easier to
give a significantly better


943
00:48:49,386 --> 00:48:50,436
and stable frame rates.


944
00:48:51,306 --> 00:48:52,626
Now, Nicholas has paused
in this scene here.


945
00:48:53,266 --> 00:48:54,386
This is really quite
the interesting scene


946
00:48:54,386 --> 00:48:55,456
with tons of stuff going on.


947
00:48:55,626 --> 00:48:57,586
And there's tons of
V effects, debris,


948
00:48:57,586 --> 00:48:59,576
and this large animated
character is interacting.


949
00:48:59,856 --> 00:49:02,216
And there's a lot of components
coming together to be able


950
00:49:02,216 --> 00:49:03,416
to create these type
of environments here.


951
00:49:04,286 --> 00:49:05,706
And here we have
two very detailed


952
00:49:05,706 --> 00:49:08,196
and great-looking characters,
sunflower and cactus.


953
00:49:08,696 --> 00:49:10,796
We're running dynamic shadows
for everything in this scene


954
00:49:10,946 --> 00:49:12,736
and not just the characters,
but everything really.


955
00:49:13,096 --> 00:49:15,816
And this is really quite heavy
but it makes the characters


956
00:49:15,816 --> 00:49:17,166
and everything fit in with the,


957
00:49:17,166 --> 00:49:18,976
regardless of where the lighting
condition is in the environment.


958
00:49:24,866 --> 00:49:25,796
Well, let's look at it again.


959
00:49:28,056 --> 00:49:32,246
We've been working on, on this
for just a couple of weeks


960
00:49:32,396 --> 00:49:34,176
but we're really quite
interested in all


961
00:49:34,176 --> 00:49:34,876
of the results we're getting.


962
00:49:34,876 --> 00:49:35,686
We're really happy about it.


963
00:49:35,686 --> 00:49:44,446
So, yeah. Yeah, so here we have
the big animated robot again.


964
00:49:44,586 --> 00:49:45,356
It's a zombie robot.


965
00:49:46,396 --> 00:49:48,526
I'm not sure how that
works, but he seems


966
00:49:48,526 --> 00:49:49,516
to be very well animated
[laughter].


967
00:49:51,716 --> 00:49:54,146
So, we're rendering up to 1.2
million triangles per frame.


968
00:49:54,236 --> 00:49:55,746
That's really quite a lot,


969
00:49:55,746 --> 00:49:56,976
and we're really happy
that we can do that.


970
00:49:57,426 --> 00:49:58,626
And together with that,


971
00:49:58,626 --> 00:50:00,356
we're doing around 20
different rendering passes


972
00:50:00,356 --> 00:50:03,066
for our HER rendering, for
shadows, for aimed occlusions,


973
00:50:03,456 --> 00:50:05,836
for particles, and
for distortion.


974
00:50:05,836 --> 00:50:06,986
And as you can see
in the background,


975
00:50:06,986 --> 00:50:09,016
we have this nice [inaudible]
effect going on that sort


976
00:50:09,016 --> 00:50:10,566
of frames the action
a little bit more.


977
00:50:11,806 --> 00:50:15,116
And we're really happy that
we can, I'm really excited


978
00:50:15,116 --> 00:50:16,876
and really impressed by the
amount of geometry and effects


979
00:50:16,876 --> 00:50:18,056
that we can push
through the GPU.


980
00:50:18,636 --> 00:50:19,776
It's really quite extraordinary.


981
00:50:20,696 --> 00:50:22,446
And this enables us to
use the same content


982
00:50:22,446 --> 00:50:23,456
and the same features
that we're using


983
00:50:23,456 --> 00:50:25,646
for building console
games but here on iOS.


984
00:50:25,646 --> 00:50:28,526
It makes it significantly
easier to,


985
00:50:28,526 --> 00:50:29,876
to work with this as a platform.


986
00:50:29,876 --> 00:50:32,346
So, Metal for us is
literally a game changer.


987
00:50:32,736 --> 00:50:36,816
It, it's a key enabler for a
new set of full 3D games on iOS,


988
00:50:36,816 --> 00:50:39,606
and we at Electronic Arts are
super excited to support it


989
00:50:39,606 --> 00:50:41,276
and put this in the
hands of our game teams


990
00:50:41,276 --> 00:50:42,066
and see what they can create.


991
00:50:42,516 --> 00:50:42,796
Thank you.


992
00:50:43,516 --> 00:50:51,946
[ Applause ]


993
00:50:52,446 --> 00:50:53,746
>> Thanks to Johan
and Electronic Arts.


994
00:50:54,176 --> 00:50:55,406
That was simply stunning.


995
00:50:55,406 --> 00:50:58,076
It's amazing the
power of the GPU


996
00:50:58,356 --> 00:50:59,776
that Metal allows you to unlock.


997
00:51:04,476 --> 00:51:07,286
So, it has never been easier
to take an amazing idea


998
00:51:07,826 --> 00:51:10,756
and to brilliant, build a
brilliantly successful game.


999
00:51:10,926 --> 00:51:13,756
We can't wait to see what all
of you are going to build.


1000
00:51:14,046 --> 00:51:15,976
Thank you very much, and I'll
hand it back over to Andreas


1001
00:51:16,036 --> 00:51:17,136
to talk about extensions.


1002
00:51:18,516 --> 00:51:25,016
[ Applause ]


1003
00:51:25,516 --> 00:51:25,796
>> All right.


1004
00:51:27,216 --> 00:51:30,196
Extensions represent, represent
another very important new


1005
00:51:30,196 --> 00:51:31,936
technology direction
that we are opening


1006
00:51:31,936 --> 00:51:34,686
up for third-party developers
on both iOS and OS X.


1007
00:51:34,686 --> 00:51:39,066
They represent the ability
to hook into various kind


1008
00:51:39,066 --> 00:51:41,556
of system behaviors, and
they allow users to expand


1009
00:51:41,556 --> 00:51:44,246
and customize our Core
operating system functionality.


1010
00:51:46,206 --> 00:51:48,856
Extensions are bundles
that ship inside your apps.


1011
00:51:49,166 --> 00:51:51,046
They get downloaded from the
App Store with your apps,


1012
00:51:51,196 --> 00:51:52,666
and they get removed
from your system


1013
00:51:52,666 --> 00:51:54,016
if you use an uninstall
to your apps.


1014
00:51:55,546 --> 00:51:57,026
So that the user
doesn't get flooded


1015
00:51:57,026 --> 00:52:00,236
with unexpected new behaviors,
they stay in full control


1016
00:52:00,236 --> 00:52:02,356
of which extensions
are active in the UI.


1017
00:52:02,406 --> 00:52:05,536
They get to expressly activate
each extension they wish to use.


1018
00:52:06,226 --> 00:52:08,116
It uses insisted
preferences and settings.


1019
00:52:10,256 --> 00:52:12,906
In technical terms,
extensions are short-lived,


1020
00:52:13,186 --> 00:52:16,826
out-of-process services that get
launched by our OSs on demand.


1021
00:52:17,836 --> 00:52:20,136
If configured to do
so, they can share data


1022
00:52:20,216 --> 00:52:22,346
with the apps they are
embedded in, for example,


1023
00:52:22,346 --> 00:52:25,336
to access keychain items or
any other kind of preferences.


1024
00:52:26,876 --> 00:52:28,526
Extensions are of
course sandboxed,


1025
00:52:28,776 --> 00:52:31,606
and we even developed this
cool new remote view technology


1026
00:52:32,076 --> 00:52:35,606
that hosts an extensions user
interface inside our system apps


1027
00:52:36,076 --> 00:52:39,126
and dispatches user events
back to the extensions process


1028
00:52:39,276 --> 00:52:41,016
without the app being
able to see it.


1029
00:52:41,236 --> 00:52:43,336
So extensions are
designed to be very secure.


1030
00:52:44,906 --> 00:52:47,136
And since extensions
typically share a lot of code


1031
00:52:47,136 --> 00:52:49,136
with their apps,
we now allow you


1032
00:52:49,246 --> 00:52:51,046
to use bundled frameworks
on iOS.


1033
00:52:52,516 --> 00:52:57,336
[ Applause ]


1034
00:52:57,836 --> 00:53:00,166
So you're not limited
anymore to static libraries.


1035
00:53:00,166 --> 00:53:02,566
You can now bundle
resources and binaries


1036
00:53:02,566 --> 00:53:03,976
in fully supported frameworks.


1037
00:53:05,426 --> 00:53:07,256
Now, here's a list of
the extension points


1038
00:53:07,376 --> 00:53:09,206
that we are making
available in this year's iOS


1039
00:53:09,206 --> 00:53:12,666
and OS X releases, and more
will follow in the future,


1040
00:53:12,946 --> 00:53:14,856
but we think this is a
great starting point.


1041
00:53:15,546 --> 00:53:17,026
Let's go over these
one after the other.


1042
00:53:17,026 --> 00:53:21,526
There are many online services
out there that allow users


1043
00:53:21,526 --> 00:53:24,576
to post comments or share
things like pictures and videos.


1044
00:53:25,636 --> 00:53:27,856
And while we support the largest
ones directly in our OSs,


1045
00:53:27,856 --> 00:53:30,486
we realize we can't
support them all.


1046
00:53:31,026 --> 00:53:33,136
So, if you are running one
of these online services,


1047
00:53:33,476 --> 00:53:36,846
sharing extensions are a great
way to let users post comments,


1048
00:53:37,046 --> 00:53:39,636
links, and media to your service


1049
00:53:39,636 --> 00:53:41,416
from within any app
they might be running.


1050
00:53:43,956 --> 00:53:47,276
Actions allow you to take
user data, anything from text


1051
00:53:47,726 --> 00:53:50,886
to images, audio, and more,
and transform that data


1052
00:53:50,886 --> 00:53:52,216
into a new representation.


1053
00:53:52,906 --> 00:53:55,966
For example, you could write an
extension that takes source code


1054
00:53:55,966 --> 00:53:58,426
and Xcode and reformats
it to your wishes,


1055
00:53:58,886 --> 00:54:00,766
perhaps with the
three-space indentation.


1056
00:54:03,596 --> 00:54:06,496
And Photo Editing extensions are
actions that manipulate images,


1057
00:54:06,956 --> 00:54:08,856
but we make sure that we
keep the original around so


1058
00:54:09,006 --> 00:54:10,436
that edits are nondestructive.


1059
00:54:12,506 --> 00:54:14,956
Safari actions manipulate
web pages.


1060
00:54:15,236 --> 00:54:16,776
Now, they have a
lot of flexibility


1061
00:54:17,116 --> 00:54:20,546
because they get accessed to the
full DOM on the way in and out.


1062
00:54:20,546 --> 00:54:23,916
So they can completely re-render
an entire web page while the


1063
00:54:23,916 --> 00:54:24,806
user is browsing.


1064
00:54:25,346 --> 00:54:27,036
For example, to do a
language translation.


1065
00:54:29,216 --> 00:54:30,746
Notification Center
widgets allow you


1066
00:54:30,916 --> 00:54:33,516
to place click-at-a-glance
views inside the iOS


1067
00:54:33,516 --> 00:54:35,286
and OS X Notification Centers.


1068
00:54:35,286 --> 00:54:38,146
You can use them for
displaying pretty much any kind


1069
00:54:38,146 --> 00:54:39,296
of status information


1070
00:54:39,576 --> 00:54:41,866
or for offering helpful
little utilities to the user.


1071
00:54:42,786 --> 00:54:45,516
They're mostly designed to
display short, concise data


1072
00:54:46,186 --> 00:54:48,476
but they also allow for
simple user interactions,


1073
00:54:48,846 --> 00:54:50,946
and among other things,
they're great launch points


1074
00:54:50,996 --> 00:54:52,346
to jump out into full app.


1075
00:54:55,606 --> 00:54:58,986
Document Providers extend the
newly designed iCloud Document


1076
00:54:58,986 --> 00:55:02,396
Picker and allow you to access
additional storage mechanisms.


1077
00:55:02,726 --> 00:55:04,156
For example, in an enterprise


1078
00:55:04,156 --> 00:55:06,276
that uses a third-party
Cloud service.


1079
00:55:07,326 --> 00:55:09,346
And we offer a similar
mechanism on OS X


1080
00:55:09,346 --> 00:55:12,566
and remote file-sharing
services can annotate Finder


1081
00:55:12,696 --> 00:55:13,476
with their sync status.


1082
00:55:16,096 --> 00:55:18,656
Another very important new
mechanism is the ability


1083
00:55:18,656 --> 00:55:20,306
to provide third-party
keyboards.


1084
00:55:20,646 --> 00:55:23,796
You can use them to support
additional languages or any kind


1085
00:55:23,796 --> 00:55:25,636
of input methods that
you might think about.


1086
00:55:27,636 --> 00:55:30,166
Creating extensions is as
simple as creating apps.


1087
00:55:30,796 --> 00:55:33,146
The extended export with all
the things you might need,


1088
00:55:33,576 --> 00:55:36,756
such as new templates,
additional scheme settings


1089
00:55:36,756 --> 00:55:37,816
so that you can launch the apps


1090
00:55:37,816 --> 00:55:39,576
that actually host
your extensions.


1091
00:55:40,486 --> 00:55:43,156
We improved our XPC service
debugging capabilities,


1092
00:55:43,366 --> 00:55:46,526
and we even added
additional simulators for some


1093
00:55:46,526 --> 00:55:47,396
of the extension points.


1094
00:55:50,096 --> 00:55:52,396
So, extensions are a very
powerful new mechanism


1095
00:55:52,716 --> 00:55:54,576
to customize our
operating systems,


1096
00:55:54,916 --> 00:55:56,226
and we think they're
going to be very,


1097
00:55:56,226 --> 00:55:57,686
very popular with our users.


1098
00:55:59,746 --> 00:56:02,566
Next, we're going to talk
about new APIs in iOS 8,


1099
00:56:02,926 --> 00:56:04,796
and for that I'm going
to hand over to Toby.


1100
00:56:05,516 --> 00:56:08,806
[ Applause ]


1101
00:56:09,306 --> 00:56:09,786
>> Thanks, Andreas.


1102
00:56:11,976 --> 00:56:12,586
Good morning.


1103
00:56:14,716 --> 00:56:15,816
Well, as you heard this morning,


1104
00:56:15,816 --> 00:56:17,826
we've got a pretty big
release for you this year.


1105
00:56:18,886 --> 00:56:23,096
In fact, this is almost as large
as the original iPhone SDK.


1106
00:56:23,096 --> 00:56:27,086
Now, we took a focus, we
took a very focused approach


1107
00:56:27,086 --> 00:56:27,906
to this release.


1108
00:56:28,856 --> 00:56:31,286
The major theme this
year is integration.


1109
00:56:32,076 --> 00:56:33,536
Integration with the OS.


1110
00:56:33,796 --> 00:56:37,256
Andreas just told you how your
apps can plug into the system


1111
00:56:37,506 --> 00:56:39,106
and even other applications.


1112
00:56:40,176 --> 00:56:43,216
We're integrating across our
devices with our new Cloud


1113
00:56:43,216 --> 00:56:47,056
of Continuity features and we're
providing deeper integration


1114
00:56:47,056 --> 00:56:49,666
with the hardware and even
with the world around.


1115
00:56:51,906 --> 00:56:53,396
Let's start by taking
a look at two


1116
00:56:53,396 --> 00:56:55,256
of our more popular
applications.


1117
00:56:56,086 --> 00:56:59,306
Underlying each of these
is a very rich set of API.


1118
00:57:01,066 --> 00:57:03,446
We've introduced a new
Photos framework this year


1119
00:57:03,446 --> 00:57:06,126
and have greatly
enhanced the media API


1120
00:57:06,406 --> 00:57:08,266
with many long-standing
requests.


1121
00:57:09,336 --> 00:57:11,276
Combined, they form
the foundation


1122
00:57:11,276 --> 00:57:14,656
of a photographic platform
that brings your applications


1123
00:57:14,656 --> 00:57:16,356
in right alongside our own.


1124
00:57:18,826 --> 00:57:21,666
The new Photos framework
gives you direct access


1125
00:57:21,666 --> 00:57:25,146
to the user's photo library
with no need to import a copy


1126
00:57:25,146 --> 00:57:28,996
of anything anymore, and you
can even make changes directly


1127
00:57:28,996 --> 00:57:30,366
with the appropriate permission.


1128
00:57:31,186 --> 00:57:32,906
And with iCloud Photo Library,


1129
00:57:33,236 --> 00:57:36,866
you can access the user's entire
collection of photos and movies


1130
00:57:37,166 --> 00:57:39,566
without having to worry
about whether they're local


1131
00:57:39,616 --> 00:57:40,766
or stored in the Cloud.


1132
00:57:40,896 --> 00:57:42,246
We take care of that for you.


1133
00:57:44,366 --> 00:57:47,476
The new Camera API gives
you full manual control


1134
00:57:47,476 --> 00:57:50,446
over the camera settings, which
I think is something that many


1135
00:57:50,446 --> 00:57:51,856
of you have wanted for a while.


1136
00:57:53,406 --> 00:57:56,226
You can set the, the
lens position explicitly.


1137
00:57:56,226 --> 00:57:59,046
The white balance
or color temperature


1138
00:57:59,486 --> 00:58:03,026
and various exposure settings,
like the shutter speed and ISO.


1139
00:58:03,026 --> 00:58:07,136
And these are all the same APIs
that our applications are using.


1140
00:58:08,956 --> 00:58:12,446
A great new feature lets you
grab a burst of photographs,


1141
00:58:12,476 --> 00:58:14,506
each with different
exposure settings,


1142
00:58:15,596 --> 00:58:16,906
and with the video tool box,


1143
00:58:16,906 --> 00:58:20,096
you can now access the
hardware H264 encoder


1144
00:58:20,096 --> 00:58:21,336
and decoder directly.


1145
00:58:23,046 --> 00:58:23,816
[Background applause]
Yes, thank you.


1146
00:58:27,146 --> 00:58:28,096
Now, we announced a number


1147
00:58:28,096 --> 00:58:30,336
of great new initiatives
this morning, and we're going


1148
00:58:30,336 --> 00:58:32,476
to cover them all in
great detail this week.


1149
00:58:32,796 --> 00:58:34,836
I want to touch on
just a few of them now.


1150
00:58:36,396 --> 00:58:38,366
First, Local Authentication.


1151
00:58:39,266 --> 00:58:40,666
This lets you ask the user


1152
00:58:40,666 --> 00:58:44,346
to authenticate using touch
ID right in your application.


1153
00:58:45,196 --> 00:58:46,416
It's a very simple API,


1154
00:58:46,416 --> 00:58:49,826
and we tell you whether the
authentication succeeded or not.


1155
00:58:50,396 --> 00:58:52,126
At no time, though,
do you get access


1156
00:58:52,126 --> 00:58:54,046
to the user's biometric
information.


1157
00:58:54,596 --> 00:58:55,926
That's stored away securely


1158
00:58:55,926 --> 00:58:58,606
so that not even our own
applications can get access


1159
00:58:59,726 --> 00:59:00,666
to that.


1160
00:59:01,376 --> 00:59:04,976
Handoff lets you start a task
on one device and pick it


1161
00:59:04,976 --> 00:59:08,416
up seamlessly on another
Mac, phone or, or iPad.


1162
00:59:09,496 --> 00:59:13,806
You create an NSUserActivity
to encapsulate an activity


1163
00:59:13,806 --> 00:59:15,986
in your app such as
opening a web page,


1164
00:59:16,446 --> 00:59:19,656
and then as the context changes,
you update that activity.


1165
00:59:19,986 --> 00:59:23,246
And note that this contains only
the metadata for the activity


1166
00:59:23,306 --> 00:59:25,986
such as the document
URL or scroll position.


1167
00:59:26,426 --> 00:59:28,026
You need to find
an alternate means


1168
00:59:28,236 --> 00:59:31,066
for getting the actual data
across to the other devices.


1169
00:59:32,486 --> 00:59:35,346
Now, once you've created this
activity, we'll take care


1170
00:59:35,346 --> 00:59:37,746
of advertising it across
all of your devices.


1171
00:59:38,396 --> 00:59:39,796
We're going to tell
only the devices


1172
00:59:39,796 --> 00:59:42,136
which are actually near you,
so you don't need to worry


1173
00:59:42,136 --> 00:59:43,866
about your computer
at home revealing


1174
00:59:43,866 --> 00:59:45,256
when you're surfing
the web at work.


1175
00:59:48,456 --> 00:59:51,626
Health and wellness has become
extremely popular lately,


1176
00:59:52,116 --> 00:59:54,546
with new applications
and devices exploding


1177
00:59:54,546 --> 00:59:55,856
on the scene every day.


1178
00:59:56,776 --> 00:59:58,526
HealthKit provides a platform


1179
00:59:58,836 --> 01:00:00,746
where your applications
can store


1180
01:00:00,746 --> 01:00:02,976
and share health-related
information.


1181
01:00:03,846 --> 01:00:06,266
We can import some kinds
of data automatically


1182
01:00:06,266 --> 01:00:09,256
from standard supporting devices
such as your blood pressure


1183
01:00:09,256 --> 01:00:12,446
and glucose levels, and
your app can read and write


1184
01:00:12,446 --> 01:00:14,836
over 60 different
kinds of information,


1185
01:00:15,266 --> 01:00:17,226
ranging from fitness
to nutrition


1186
01:00:17,526 --> 01:00:18,756
to medical information.


1187
01:00:19,696 --> 01:00:22,216
Now, all of this is extremely
sensitive, of course,


1188
01:00:22,446 --> 01:00:25,376
and so we give the user
extremely fine-grained control


1189
01:00:25,376 --> 01:00:26,876
over who can access what.


1190
01:00:26,876 --> 01:00:31,846
Now, I'd like to talk
about design a little bit.


1191
01:00:33,436 --> 01:00:37,176
Last year, of course, well, we
completely revamped the iOS UI


1192
01:00:37,176 --> 01:00:40,806
and I told you at the time that
we were only just beginning.


1193
01:00:41,566 --> 01:00:42,796
Now, that wasn't a threat.


1194
01:00:43,506 --> 01:00:45,676
We've continued to add
refinements, but just not


1195
01:00:45,676 --> 01:00:50,376
at quite the same breakneck
pace as we have before.


1196
01:00:51,276 --> 01:00:54,306
Interactive notifications
let you provide the user


1197
01:00:54,306 --> 01:00:58,296
with custom actions right there
in the notification banner.


1198
01:00:59,046 --> 01:01:00,266
And as you heard this morning,


1199
01:01:00,676 --> 01:01:02,986
they even work on
the lock screen.


1200
01:01:03,856 --> 01:01:08,526
Now, because your users want
to focus on their content


1201
01:01:08,626 --> 01:01:12,146
and not the chrome
around it, in landscape,


1202
01:01:12,146 --> 01:01:15,626
we're automatically hiding
the status bar and shrinking,


1203
01:01:15,626 --> 01:01:18,486
or hiding, the navigation
bar and tool bars.


1204
01:01:20,066 --> 01:01:24,056
And we have a new compact style
for action sheets in landscape.


1205
01:01:26,546 --> 01:01:28,016
We're continuing to push support


1206
01:01:28,016 --> 01:01:31,176
for dynamic type throughout
our own applications,


1207
01:01:31,296 --> 01:01:34,256
and we've greatly enhanced
the API in UIKit and WebKit


1208
01:01:34,256 --> 01:01:37,086
to make it even easier
for you to adopt.


1209
01:01:38,996 --> 01:01:41,526
And finally, we have
a new settings pane,


1210
01:01:41,526 --> 01:01:44,526
which combines your applications
preferences with all


1211
01:01:44,526 --> 01:01:46,796
of the various system
privacy preferences


1212
01:01:46,796 --> 01:01:48,436
such as whether the user wants


1213
01:01:48,436 --> 01:01:50,336
to receive notifications
from your app.


1214
01:01:51,376 --> 01:01:53,706
We've put them together
in one place here now


1215
01:01:53,946 --> 01:01:55,336
and given you a simple API


1216
01:01:55,336 --> 01:01:57,296
so that you can take
the user right here


1217
01:01:57,296 --> 01:01:58,876
from within your application.


1218
01:02:00,516 --> 01:02:07,006
[ Applause ]


1219
01:02:07,506 --> 01:02:10,446
Now I read this quote on
John August's blog a couple


1220
01:02:10,446 --> 01:02:11,126
of months ago.


1221
01:02:12,186 --> 01:02:15,046
"Adding landscape to the
iPhone isn't impossible,


1222
01:02:15,666 --> 01:02:17,566
but it means not
doing something else,


1223
01:02:18,026 --> 01:02:20,936
and right now the many
'something elses' are worth a


1224
01:02:20,936 --> 01:02:21,606
lot more."


1225
01:02:22,846 --> 01:02:24,376
That really resonated with me


1226
01:02:24,826 --> 01:02:27,236
because we've been spending
a lot time thinking about how


1227
01:02:27,236 --> 01:02:30,276
to manage the proliferation
of UI layouts.


1228
01:02:32,366 --> 01:02:35,846
When we launched iPhone seven
years ago, it was pretty simple.


1229
01:02:36,846 --> 01:02:40,876
You had one screen size and
two user-interface orientations


1230
01:02:40,926 --> 01:02:41,506
to deal with.


1231
01:02:42,716 --> 01:02:46,116
A few years later, we
added iPad and now you have


1232
01:02:46,116 --> 01:02:48,546
to use a global user
interface idiom to select


1233
01:02:48,546 --> 01:02:51,466
between your iPhone
and your iPad layouts.


1234
01:02:52,566 --> 01:02:55,656
Then we added iPhone 5 with
its larger screen size,


1235
01:02:55,656 --> 01:02:57,856
and now you've got a
total of six screen bounds


1236
01:02:57,856 --> 01:02:58,916
to have to contend with.


1237
01:02:59,356 --> 01:03:01,346
And that's getting
to be rather a lot.


1238
01:03:01,346 --> 01:03:04,626
And so we've been working to try
and rationalize things for you.


1239
01:03:05,366 --> 01:03:10,356
Now, in iOS 8, you can
use a single storyboard


1240
01:03:10,896 --> 01:03:16,306
across iPhone 4, iPhone
5, portrait and landscape,


1241
01:03:16,766 --> 01:03:20,766
and here's where things get
interesting, on the iPad 2.


1242
01:03:21,866 --> 01:03:23,166
Now, hang on a second.


1243
01:03:23,816 --> 01:03:26,686
We've always encouraged
you to design explicitly


1244
01:03:26,726 --> 01:03:30,286
for iPad's larger screen
size and not just blow


1245
01:03:30,286 --> 01:03:33,366
up your iPhone UI, and
we're not backpedaling


1246
01:03:33,406 --> 01:03:34,536
on this message now.


1247
01:03:36,406 --> 01:03:39,786
Different screen sizes demand
a different user experience,


1248
01:03:40,236 --> 01:03:42,186
and so we've been
teaching storyboards


1249
01:03:42,236 --> 01:03:44,946
and our view controllers
how to adapt themselves


1250
01:03:45,096 --> 01:03:46,516
to the environment
that they're in.


1251
01:03:47,826 --> 01:03:49,186
In this example here,


1252
01:03:49,546 --> 01:03:52,226
it's actually the same
split-view controller class


1253
01:03:52,366 --> 01:03:54,816
running on both the
iPhone and the iPad.


1254
01:03:55,616 --> 01:03:57,586
On the phone, well
it looks and behaves


1255
01:03:57,586 --> 01:04:01,256
like a single-column navigation
browser, and on the iPad,


1256
01:04:01,636 --> 01:04:03,876
you get the split-paned
master detail view


1257
01:04:03,876 --> 01:04:06,446
that you're probably
pretty familiar with.


1258
01:04:07,176 --> 01:04:11,756
We're introducing a new notion
called size classes to try


1259
01:04:11,756 --> 01:04:14,446
and express this idea
of how big something is.


1260
01:04:15,776 --> 01:04:19,096
Broadly speaking, you can
think of the iPhone size UI


1261
01:04:19,206 --> 01:04:24,036
as a compact size class and the
iPad UI as a regular size class.


1262
01:04:24,686 --> 01:04:26,166
But don't make the
mistake of thinking


1263
01:04:26,166 --> 01:04:29,106
that size classes are bound
to a particular device.


1264
01:04:29,526 --> 01:04:30,976
They're a lot more
general than that.


1265
01:04:32,596 --> 01:04:35,326
For example, in this
split-view controller on iPad,


1266
01:04:35,716 --> 01:04:37,586
it has two child-view
controllers.


1267
01:04:38,586 --> 01:04:40,766
The one on the left here,
well, it kind of looks


1268
01:04:40,766 --> 01:04:42,506
like an iPhone UI, and in fact,


1269
01:04:42,506 --> 01:04:45,766
it has a compact size
class whereas the one


1270
01:04:45,766 --> 01:04:48,186
on the right has a
regular size class.


1271
01:04:50,066 --> 01:04:52,956
This idea of things adapting
themselves to the space


1272
01:04:52,956 --> 01:04:56,066
that they're contained in
forms the basis for something


1273
01:04:56,066 --> 01:04:57,646
that we're calling adaptive UI,


1274
01:04:58,306 --> 01:05:00,176
and this is what makes
it possible for you


1275
01:05:00,176 --> 01:05:02,926
to use a single storyboard
on iPhone 4,


1276
01:05:03,346 --> 01:05:05,166
iPhone 5, and the iPad.


1277
01:05:06,726 --> 01:05:08,626
Now, I'd like to ask
Max Drukman to come up


1278
01:05:08,626 --> 01:05:11,596
and give you a quick tour of
how easy this is to do in Xcode.


1279
01:05:12,046 --> 01:05:12,346
Max?


1280
01:05:13,516 --> 01:05:18,486
[ Applause ]


1281
01:05:18,986 --> 01:05:19,946
>> I missed you guys.


1282
01:05:21,176 --> 01:05:22,046
Especially you, Craig.


1283
01:05:23,676 --> 01:05:28,886
All right, I'm going to show
you how size classes in iOS 8,


1284
01:05:29,306 --> 01:05:30,716
if I can get the
right screen up,


1285
01:05:31,416 --> 01:05:34,966
allow me to create a single
storyboard that is adaptive


1286
01:05:35,406 --> 01:05:39,176
for both iPhone and iPad.


1287
01:05:39,426 --> 01:05:42,006
Here's my party finder
app, NO.SLEEP.


1288
01:05:42,006 --> 01:05:45,686
@DUBDUB. It's a pretty
simple little thing.


1289
01:05:45,686 --> 01:05:47,896
There's a login screen
on the left and a,


1290
01:05:47,896 --> 01:05:49,446
a list of parties on the right.


1291
01:05:50,446 --> 01:05:55,516
Now, the astute among you may
notice that my layout is square.


1292
01:05:56,296 --> 01:05:56,976
Why is that?


1293
01:05:57,706 --> 01:06:05,056
Well, because size
classes are, they're, wow!


1294
01:06:05,846 --> 01:06:09,186
Since size classes
aren't, they're not real,


1295
01:06:10,056 --> 01:06:12,556
one size class doesn't
necessarily map


1296
01:06:12,756 --> 01:06:14,746
to one device and
one orientation.


1297
01:06:15,546 --> 01:06:18,596
The layout canvas in,


1298
01:06:19,526 --> 01:06:23,836
in interface builder
is also that way.


1299
01:06:24,946 --> 01:06:26,396
Wow. Could've done that better.


1300
01:06:29,156 --> 01:06:33,776
Now, just because I'm, so,


1301
01:06:33,976 --> 01:06:35,946
I'm laying out my
interface this way.


1302
01:06:35,946 --> 01:06:40,066
I still want to see how
it looks on real devices


1303
01:06:40,226 --> 01:06:41,506
when it gets in peoples' hands.


1304
01:06:42,346 --> 01:06:46,026
For that, I have the
preview assistant.


1305
01:06:47,866 --> 01:06:50,716
In Xcode 6, the preview
assistant allows me


1306
01:06:50,716 --> 01:06:53,816
to add multiple devices
and orientations


1307
01:06:54,356 --> 01:06:59,366
so I can see how my interface is
working in as many devices and,


1308
01:06:59,476 --> 01:07:00,736
and layouts as I want.


1309
01:07:01,646 --> 01:07:05,906
And here you can see that I've
already specialized for one


1310
01:07:05,906 --> 01:07:09,706
of the size classes so that
my interface looks different


1311
01:07:10,226 --> 01:07:13,126
on an iPhone in landscape
orientation.


1312
01:07:13,706 --> 01:07:18,536
Now, if I select my
other view controller,


1313
01:07:19,756 --> 01:07:21,166
we can see my party table


1314
01:07:22,256 --> 01:07:24,486
and this I haven't
specialized at all.


1315
01:07:25,426 --> 01:07:28,136
That's because table
views, like many views,


1316
01:07:28,506 --> 01:07:30,176
are themselves adaptive,


1317
01:07:30,576 --> 01:07:33,316
and so there's no specialization
that's necessary at all.


1318
01:07:33,316 --> 01:07:38,916
Well, let's go back
to my login screen.


1319
01:07:40,516 --> 01:07:44,476
Now, Interface Builder starts
you out in the size class


1320
01:07:44,476 --> 01:07:47,236
for any width and any height.


1321
01:07:48,386 --> 01:07:52,166
So this is where you lay out
what is common about your app


1322
01:07:52,166 --> 01:07:53,906
across all size classes.


1323
01:07:54,776 --> 01:07:56,276
It's a great place to do edits


1324
01:07:56,276 --> 01:07:57,866
that you want reflected
everywhere.


1325
01:07:58,736 --> 01:08:01,606
For instance, if I want to
move this shiny little graphic


1326
01:08:01,606 --> 01:08:05,296
up into the corner,
that will get reflected


1327
01:08:05,296 --> 01:08:07,676
in both landscape and portrait.


1328
01:08:08,696 --> 01:08:12,126
But because one size
class does not fit all,


1329
01:08:12,906 --> 01:08:16,756
I can also tell Interface
Builder to edit


1330
01:08:16,935 --> 01:08:18,276
in different size classes.


1331
01:08:19,736 --> 01:08:22,466
In this case, I'm going
to choose compact height,


1332
01:08:23,666 --> 01:08:26,986
which is the size class
that maps to an iPhone


1333
01:08:27,046 --> 01:08:28,296
in landscape orientation.


1334
01:08:29,395 --> 01:08:31,696
And now, when I make an edit,


1335
01:08:31,696 --> 01:08:34,366
for instance moving
all these objects up,


1336
01:08:35,636 --> 01:08:39,265
that will only be reflected
in a landscape orientation.


1337
01:08:39,906 --> 01:08:48,725
Now, if I add an iPad to the
mix, we can see yet another take


1338
01:08:49,066 --> 01:08:51,576
at positioning and sizing
these same elements.


1339
01:08:52,126 --> 01:08:54,966
And once again, these
are all the same elements


1340
01:08:55,326 --> 01:08:58,765
with the same logic, styles,
connections still attached.


1341
01:08:59,326 --> 01:09:01,636
They're just positioned
and sized differently


1342
01:09:01,926 --> 01:09:03,716
because they have
different constraints.


1343
01:09:05,446 --> 01:09:07,946
So, if I were to change
the nature of something,


1344
01:09:08,486 --> 01:09:13,026
like the background image
here, that will get reflected


1345
01:09:13,826 --> 01:09:16,506
in all of the size classes.


1346
01:09:19,076 --> 01:09:22,305
That's a quick take at
size classes in iOS 8


1347
01:09:22,645 --> 01:09:25,345
and one storyboard
to rule them all.


1348
01:09:26,666 --> 01:09:27,426
Back to you, Toby.


1349
01:09:28,515 --> 01:09:34,496
[ Applause ]


1350
01:09:34,996 --> 01:09:35,316
>> Thanks, Max.


1351
01:09:36,055 --> 01:09:38,356
Well, so that's just a taste of
some of the things that we have


1352
01:09:38,475 --> 01:09:41,886
for you in iOS 8, and we can't
wait for you to get your hands


1353
01:09:41,886 --> 01:09:43,326
on it and start playing with it.


1354
01:09:44,616 --> 01:09:46,256
Now, I'd like to
talk about iCloud.


1355
01:09:47,426 --> 01:09:50,116
iCloud is an important
and thriving part


1356
01:09:50,116 --> 01:09:51,826
of the Apple ecosystem.


1357
01:09:53,036 --> 01:09:56,746
We have well over 400 million
users, and we're continuing


1358
01:09:56,746 --> 01:09:59,886
to improve and add new
features to it all the time.


1359
01:10:01,466 --> 01:10:03,596
First, let's talk
about iCloud Drive.


1360
01:10:05,686 --> 01:10:08,276
So, we introduced documents
in the cloud a few years ago,


1361
01:10:08,276 --> 01:10:11,976
of course, and it provides a
seamless, in-app experience


1362
01:10:11,976 --> 01:10:14,756
to getting your files from
device, device, to the Mac.


1363
01:10:15,346 --> 01:10:17,206
And that's great, if you happen


1364
01:10:17,206 --> 01:10:20,246
to have the same application
running on your phone,


1365
01:10:20,246 --> 01:10:23,716
your iPad, and your Mac, but
that's not always the case.


1366
01:10:25,926 --> 01:10:28,966
iCloud Drive gives you a
folder right there in Finder,


1367
01:10:29,226 --> 01:10:31,236
where you can manage
your files directly.


1368
01:10:31,926 --> 01:10:34,756
And we're even making
this available


1369
01:10:34,756 --> 01:10:36,716
on Windows too, in the Explorer.


1370
01:10:37,786 --> 01:10:39,966
Now, if you're already
a document-based app,


1371
01:10:40,286 --> 01:10:41,926
it's actually pretty
easy for you


1372
01:10:41,926 --> 01:10:43,806
to add support for iCloud Drive.


1373
01:10:44,646 --> 01:10:47,886
On the Mac, well, you get it
basically for free with AppKit.


1374
01:10:48,936 --> 01:10:51,906
On iOS, however, you
can't access the files


1375
01:10:51,906 --> 01:10:56,366
in iCloud Drive directly without
some form of user intervention.


1376
01:10:58,286 --> 01:11:01,486
Well, that's done in this
new UIDocumentPicker class,


1377
01:11:01,576 --> 01:11:04,466
which lets the user select
the files that they want


1378
01:11:04,466 --> 01:11:05,956
to use in your application.


1379
01:11:06,866 --> 01:11:09,986
We then dynamically extend
your application sandbox


1380
01:11:09,986 --> 01:11:12,746
around those files
so that you can read


1381
01:11:12,746 --> 01:11:14,186
and write them directly,
without having


1382
01:11:14,186 --> 01:11:15,916
to make a copy of
anything anymore.


1383
01:11:16,876 --> 01:11:19,876
And this even works across
different application containers


1384
01:11:20,256 --> 01:11:23,076
so that multiple cooperating
applications can all work


1385
01:11:23,076 --> 01:11:25,016
together on the same files.


1386
01:11:26,936 --> 01:11:30,956
We told you earlier how document
providers let you extend your


1387
01:11:30,956 --> 01:11:33,486
device with alternate
file storage systems,


1388
01:11:33,906 --> 01:11:36,466
and these are all managed
by the UIDocumentPicker.


1389
01:11:36,786 --> 01:11:39,356
And so once you're adopting
that, there's nothing else


1390
01:11:39,356 --> 01:11:42,486
for you to have to do in your
application to take advantage


1391
01:11:42,486 --> 01:11:43,906
of these document providers.


1392
01:11:44,626 --> 01:11:45,806
And that's iCloud Drive.


1393
01:11:45,866 --> 01:11:46,876
We think it's pretty easy.


1394
01:11:48,786 --> 01:11:50,956
Now, I'm really excited
to be able


1395
01:11:50,956 --> 01:11:52,566
to tell you a bit
about CloudKit.


1396
01:11:53,486 --> 01:11:57,666
Simply put, CloudKit lets you
write client server applications


1397
01:11:58,076 --> 01:11:59,856
without having to
write the server part.


1398
01:12:00,906 --> 01:12:02,386
Let's say you've got a hot idea


1399
01:12:02,386 --> 01:12:05,276
for a coffee shop review
service or, I don't know,


1400
01:12:05,276 --> 01:12:06,546
a photo sharing service.


1401
01:12:07,696 --> 01:12:10,856
Well, here's what you don't
have to do with CloudKit.


1402
01:12:13,206 --> 01:12:16,556
You don't have to write any
server code, you don't have


1403
01:12:16,556 --> 01:12:20,536
to operate a 24-by-7
service, and you don't have


1404
01:12:20,536 --> 01:12:21,726
to deploy any servers.


1405
01:12:22,876 --> 01:12:25,296
And in fact, once you
become wildly successful,


1406
01:12:26,226 --> 01:12:28,116
here's something else
that you don't have to do.


1407
01:12:30,026 --> 01:12:30,306
All-


1408
01:12:31,516 --> 01:12:35,576
[ Applause ]


1409
01:12:36,076 --> 01:12:39,156
All you need to do to build
a client server application


1410
01:12:39,226 --> 01:12:44,286
with CloudKit is write your iOS
and Mac app, and we take care


1411
01:12:44,286 --> 01:12:45,726
of all of the rest
of it for you.


1412
01:12:47,236 --> 01:12:48,966
So, when we were
designing CloudKit,


1413
01:12:49,406 --> 01:12:52,776
we asked ourselves the question,
"What do you need in the cloud


1414
01:12:53,016 --> 01:12:54,376
to be able to all of this?"


1415
01:12:55,966 --> 01:12:58,306
Well, a database seems
like a good place to start.


1416
01:12:58,876 --> 01:13:01,786
We've got records and
relationships, queries,


1417
01:13:01,786 --> 01:13:03,306
all the things you
come to expect


1418
01:13:03,306 --> 01:13:04,716
from an OS-equal database.


1419
01:13:05,956 --> 01:13:08,406
We have an asset API
to efficiently store


1420
01:13:08,406 --> 01:13:10,656
and retrieve large
blobs of data.


1421
01:13:10,656 --> 01:13:13,446
And we have a subscription
service.


1422
01:13:14,406 --> 01:13:17,336
You can think of the
subscription service as kind


1423
01:13:17,336 --> 01:13:20,156
of like a long-running
query on the server,


1424
01:13:20,566 --> 01:13:23,946
and as new records are matched
by the query, iCloud will send


1425
01:13:23,946 --> 01:13:26,406
out push notifications
to all of the devices


1426
01:13:26,406 --> 01:13:28,716
that have registered an
interest in that subscription.


1427
01:13:30,196 --> 01:13:33,446
We've built a developer
portal so that you can go


1428
01:13:33,446 --> 01:13:35,306
and take a look exactly
at what's going


1429
01:13:35,306 --> 01:13:37,116
on with your service
in the Cloud.


1430
01:13:38,466 --> 01:13:41,016
And of course, you're
going to want users.


1431
01:13:42,216 --> 01:13:45,136
Well, it turns out, we've got
rather a lot of them in iCloud,


1432
01:13:45,596 --> 01:13:49,456
and every single one of those
iCloud users could be your user


1433
01:13:49,456 --> 01:13:50,056
as well.


1434
01:13:50,146 --> 01:13:53,516
There's no account to create, no
signup, or any hoops they have


1435
01:13:53,516 --> 01:13:56,296
to jump through, and we think
that's pretty huge for you.


1436
01:13:57,516 --> 01:14:03,196
[ Applause ]


1437
01:14:03,696 --> 01:14:06,796
As Craig told you this
morning, it's basically free


1438
01:14:07,406 --> 01:14:08,916
up to these maximum limits.


1439
01:14:09,726 --> 01:14:12,556
Now, that's one petabyte
of asset data.


1440
01:14:13,456 --> 01:14:14,866
To put this in perspective,


1441
01:14:15,136 --> 01:14:17,486
let's say that you're building
a photo sharing service


1442
01:14:17,486 --> 01:14:19,426
and you're using the
same image size as some


1443
01:14:19,426 --> 01:14:20,966
of your popular competitors.


1444
01:14:22,396 --> 01:14:25,326
That would let you
store 10 billion photos


1445
01:14:25,466 --> 01:14:27,286
in iCloud for free.


1446
01:14:27,286 --> 01:14:30,636
And we think that's
pretty huge too.


1447
01:14:31,576 --> 01:14:35,126
We're doubling down on
this technology ourselves.


1448
01:14:35,596 --> 01:14:39,206
iCloud Photo Library and iCloud
Drive are both built on top


1449
01:14:39,206 --> 01:14:42,186
of CloudKit and we see
this as the foundation


1450
01:14:42,236 --> 01:14:43,896
for our services moving forward.


1451
01:14:45,306 --> 01:14:47,986
We think this is really cool,
and we've been working on it


1452
01:14:47,986 --> 01:14:50,396
for a while and can't wait
to see what you do with this.


1453
01:14:51,056 --> 01:14:53,076
We think this is going to
open up a whole new class


1454
01:14:53,076 --> 01:14:54,236
of application for you.


1455
01:14:55,066 --> 01:14:58,256
And that's what we
have for iCloud.


1456
01:14:59,186 --> 01:15:01,116
Now, I'd like to turn
it over to Andreas


1457
01:15:01,116 --> 01:15:02,806
to tell you about OS X Yosemite.


1458
01:15:03,166 --> 01:15:03,836
Thank you.


1459
01:15:04,516 --> 01:15:11,146
[ Applause ]


1460
01:15:11,646 --> 01:15:11,976
>> All right.


1461
01:15:11,976 --> 01:15:13,276
Let's talk about OS X.


1462
01:15:14,996 --> 01:15:18,586
Yosemite is a big new
release with an all-new look.


1463
01:15:19,096 --> 01:15:22,426
We carefully evolved this look
from our previous releases


1464
01:15:22,426 --> 01:15:25,406
to make it truly beautiful
without being disruptive.


1465
01:15:26,906 --> 01:15:29,076
The basic ideas behind
the redesign were


1466
01:15:29,076 --> 01:15:32,876
to increase consistency, to
reduce visual noise and clutter,


1467
01:15:33,716 --> 01:15:37,106
to make animations more subtle,
and increase the vibrancy


1468
01:15:37,106 --> 01:15:38,816
of the UI for more liveliness.


1469
01:15:39,976 --> 01:15:41,796
Let's go over the
cornerstones of the new look


1470
01:15:41,846 --> 01:15:43,506
and what they mean
to app developers.


1471
01:15:45,196 --> 01:15:47,896
We started by completely
redesigning our window chrome.


1472
01:15:47,896 --> 01:15:51,526
We made our toolbars and
our title bars simpler


1473
01:15:51,636 --> 01:15:52,246
and more compact.


1474
01:15:53,946 --> 01:15:56,536
But for non-document-based apps,
we went a whole lot further


1475
01:15:56,536 --> 01:15:58,396
and defined a new
style of window chrome.


1476
01:15:59,396 --> 01:16:02,046
Many of our apps now
use a combined toolbar


1477
01:16:02,196 --> 01:16:04,286
in which we merge the
title bar and the toolbar


1478
01:16:04,566 --> 01:16:06,036
into a single, compact row.


1479
01:16:06,186 --> 01:16:09,086
This is a great way to
give users more space


1480
01:16:09,086 --> 01:16:11,506
for their content,
but it only works well


1481
01:16:11,506 --> 01:16:14,416
if you have few enough toolbar
items to leave enough space


1482
01:16:14,416 --> 01:16:16,826
so that the user can grab
the window and drag it


1483
01:16:16,826 --> 01:16:19,706
around on the screen, so this
is not recommended for all apps.


1484
01:16:21,646 --> 01:16:24,386
Now, for several of our apps,
we also moved the search fields,


1485
01:16:24,496 --> 01:16:26,966
which have historically been
located at the far right side


1486
01:16:26,996 --> 01:16:29,686
of our toolbars, smack into
the middle of the window


1487
01:16:30,006 --> 01:16:32,916
if searching is the primary way
of interacting with that app,


1488
01:16:33,466 --> 01:16:36,166
such as is the case
in Maps and Safari.


1489
01:16:37,966 --> 01:16:40,996
And for sidebar apps, which have
essentially no toolbar items,


1490
01:16:41,306 --> 01:16:42,636
we went yet another step further


1491
01:16:42,636 --> 01:16:44,636
and used only partial
title bars.


1492
01:16:45,416 --> 01:16:47,816
These windows, they have the
normal window controls on top


1493
01:16:47,816 --> 01:16:50,096
of the sidebar, but
otherwise they stretch


1494
01:16:50,096 --> 01:16:52,626
out the content all the way
to the edges of the window.


1495
01:16:55,366 --> 01:16:57,916
Now, one thing that is
interesting about our new UI is


1496
01:16:57,916 --> 01:17:00,796
that it uses a number of
new transparent materials.


1497
01:17:01,476 --> 01:17:03,506
For example, if you
scrolled some window content


1498
01:17:03,506 --> 01:17:06,356
under the title bars, that
content will still show


1499
01:17:06,406 --> 01:17:08,176
through in a heavily
blurred way,


1500
01:17:08,426 --> 01:17:10,946
giving the user a better
sense for the entire document.


1501
01:17:11,896 --> 01:17:13,936
And the new translucent
sidebars still


1502
01:17:13,936 --> 01:17:15,856
at the desktop background
shine through,


1503
01:17:16,256 --> 01:17:19,836
so that really gives the user a
way to customize the entire look


1504
01:17:19,836 --> 01:17:21,016
and feel of the system.


1505
01:17:23,296 --> 01:17:25,946
Now, if you're using our
standard AppKit controls,


1506
01:17:26,076 --> 01:17:27,686
such as a layer with
scroll view,


1507
01:17:28,066 --> 01:17:30,936
your apps will automatically
inherit the right new look,


1508
01:17:31,926 --> 01:17:34,556
and for more custom cases,
you're exposing a number


1509
01:17:34,556 --> 01:17:38,586
of new APIs that will get you
the same effect that you see


1510
01:17:38,586 --> 01:17:42,116
in our, in our system apps.


1511
01:17:42,596 --> 01:17:43,376
One thing you should watch


1512
01:17:43,376 --> 01:17:45,666
out for is the readability
of your text.


1513
01:17:45,666 --> 01:17:48,826
While the new translucent
effects are very beautiful,


1514
01:17:49,376 --> 01:17:52,006
they are not a great fit
for primary user content,


1515
01:17:52,166 --> 01:17:53,696
so use these effects
selectively.


1516
01:17:56,226 --> 01:17:58,616
Now, we've also changed
the system font in our UI.


1517
01:17:58,616 --> 01:18:01,646
We changed it from Lucida
Grande to Helvetica Neue,


1518
01:18:02,816 --> 01:18:03,926
and that's how you
pronounce that.


1519
01:18:04,516 --> 01:18:12,846
[ Laughter ]


1520
01:18:13,346 --> 01:18:16,546
So, we hand-tweaked the
metrics of the new system font


1521
01:18:16,546 --> 01:18:19,306
so that they are very,
very close to the metrics


1522
01:18:19,306 --> 01:18:22,036
of the old Lucida Grande
font, with a result


1523
01:18:22,106 --> 01:18:25,436
that strings have almost the
same size and usually fit


1524
01:18:25,436 --> 01:18:28,216
in the space that you've
allocated in your UI so far.


1525
01:18:31,016 --> 01:18:33,086
Now, to help with
binary compatibility,


1526
01:18:33,676 --> 01:18:36,846
AppKit will actually detect,
AppKit controls will detect


1527
01:18:37,286 --> 01:18:38,956
if your strings are
being clipped.


1528
01:18:39,546 --> 01:18:40,856
And in that case,
they will ever so,


1529
01:18:41,216 --> 01:18:44,086
ever so slightly compress
the strings and make them fit


1530
01:18:44,086 --> 01:18:45,236
into the available space.


1531
01:18:47,926 --> 01:18:49,216
In addition to the system font,


1532
01:18:49,426 --> 01:18:52,566
we've also updated
our application icons


1533
01:18:52,616 --> 01:18:54,506
and the glyphs used
throughout the system.


1534
01:18:55,406 --> 01:18:57,606
We've tried to remove
unnecessary variations,


1535
01:18:57,676 --> 01:19:00,596
and we've standardized on three
basic shapes of app icons:


1536
01:19:01,196 --> 01:19:03,326
circle, square, and
tilted rectangle.


1537
01:19:04,676 --> 01:19:07,286
Our application icons are
now, now more uniform,


1538
01:19:07,706 --> 01:19:08,906
they use more vibrant colors,


1539
01:19:09,006 --> 01:19:13,126
and they also remove unnecessary
variations and adornments.


1540
01:19:16,356 --> 01:19:18,536
Our AppKit controls
now use animations


1541
01:19:18,536 --> 01:19:20,386
that are more meaningful,
and in general,


1542
01:19:20,706 --> 01:19:22,486
they support a lot
more styles for,


1543
01:19:22,626 --> 01:19:24,206
to support the new
appearance settings


1544
01:19:24,206 --> 01:19:26,056
in addition to vibrancy
settings.


1545
01:19:26,726 --> 01:19:28,116
Specifically for vibrancy,


1546
01:19:28,206 --> 01:19:30,326
they push out their
colors a lot more strongly,


1547
01:19:30,456 --> 01:19:32,296
which can really
help its readability


1548
01:19:32,466 --> 01:19:33,606
on translucent surfaces.


1549
01:19:35,946 --> 01:19:38,356
And another big change
that Jeff just mentioned is


1550
01:19:38,406 --> 01:19:41,756
that Yosemite strongly
de-emphasizes dashboard widgets


1551
01:19:41,906 --> 01:19:44,326
in favor of the new
Notification Center widgets.


1552
01:19:45,336 --> 01:19:47,856
While we still fully support
dashboard, we are now moving


1553
01:19:47,856 --> 01:19:50,916
over to running native widgets
inside Notification Center,


1554
01:19:51,506 --> 01:19:52,926
and if you're a dashboard
developer,


1555
01:19:53,236 --> 01:19:55,606
we suggest that you quickly
adopt the new technology,


1556
01:19:55,606 --> 01:19:58,006
which we believe will be even
more popular with our users.


1557
01:20:01,786 --> 01:20:03,186
I'd also like to take
a moment and talk


1558
01:20:03,186 --> 01:20:05,146
about our accessibility APIs.


1559
01:20:05,606 --> 01:20:08,076
Accessibility is a topic
we care about deeply,


1560
01:20:09,056 --> 01:20:11,786
and along with the new look,
we made it dramatically simpler


1561
01:20:12,106 --> 01:20:14,476
to let your applications
work with voiceover


1562
01:20:14,616 --> 01:20:16,686
and our other accessibility
technologies.


1563
01:20:17,306 --> 01:20:18,866
We took, we took some
lessons we learned on iOS


1564
01:20:19,066 --> 01:20:23,046
and created a new API that
requires much less coding.


1565
01:20:23,796 --> 01:20:24,826
So, please take some time


1566
01:20:24,826 --> 01:20:26,786
and add this important
capability to your apps.


1567
01:20:27,606 --> 01:20:30,356
It has never been easier and
it will change people's lives.


1568
01:20:33,356 --> 01:20:35,686
So, that was a quick tour
of the new look in Yosemite.


1569
01:20:36,646 --> 01:20:38,576
Once we've shipped this
release later this year,


1570
01:20:38,646 --> 01:20:40,776
users will expect
that your apps fit


1571
01:20:40,776 --> 01:20:42,506
in with the new look
of Yosemite.


1572
01:20:42,866 --> 01:20:44,776
So, please take some time
over the next few months


1573
01:20:45,096 --> 01:20:46,706
and change the style to fit


1574
01:20:46,706 --> 01:20:48,826
in with what we've done
in our system apps.


1575
01:20:50,586 --> 01:20:52,276
Next, we're going
to talk about Xcode,


1576
01:20:52,526 --> 01:20:54,016
and for that section
I'm going to hand


1577
01:20:54,016 --> 01:20:54,656
over to Matthew [inaudible].


1578
01:20:56,516 --> 01:21:02,746
[ Applause ]


1579
01:21:03,246 --> 01:21:03,786
>> Thank you, Andreas.


1580
01:21:05,836 --> 01:21:08,826
Now, you've already had a sneak
peek into some of the features


1581
01:21:08,826 --> 01:21:12,626
of the new Xcode tools for
iOS 8 and OS X Yosemite.


1582
01:21:14,016 --> 01:21:14,756
Playgrounds.


1583
01:21:15,106 --> 01:21:16,846
A powerful and interactive way


1584
01:21:16,846 --> 01:21:19,516
to work with, and
play with, Swift.


1585
01:21:21,366 --> 01:21:24,746
The new integrated SpriteKit
and SceneKit design tools,


1586
01:21:25,006 --> 01:21:29,266
enabling you to design truly
amazing 2D and 3D applications.


1587
01:21:30,856 --> 01:21:33,356
And universal storyboards
with size classes.


1588
01:21:33,476 --> 01:21:36,866
A great way to conceptualize
and design your applications


1589
01:21:36,936 --> 01:21:38,606
for both iPhone and iPad.


1590
01:21:39,786 --> 01:21:43,036
Three great new features, and
we are just getting started.


1591
01:21:44,796 --> 01:21:49,066
Universal storyboards, size
classes, and autolayout combine


1592
01:21:49,066 --> 01:21:52,866
to enable you to design for all
devices using a single interface


1593
01:21:52,866 --> 01:21:54,666
document, and we're
bringing this


1594
01:21:54,846 --> 01:21:57,786
to another area, Launch Images.


1595
01:21:58,876 --> 01:22:01,896
With iOS 8, you can now provide
an Interface Builder document


1596
01:22:02,206 --> 01:22:04,696
and, at runtime, have
the OS generate all


1597
01:22:04,696 --> 01:22:06,886
of the necessary
Launch Images for you.


1598
01:22:07,516 --> 01:22:14,426
[ Applause ]


1599
01:22:14,926 --> 01:22:17,996
So now you no longer need to
provide the individual assets


1600
01:22:18,286 --> 01:22:21,816
and you can use the same great
design tools for your interfaces


1601
01:22:22,116 --> 01:22:23,416
and your launch presentations.


1602
01:22:24,966 --> 01:22:28,366
Now, storyboards have been a
great addition to the iOS tools


1603
01:22:28,636 --> 01:22:31,756
for development, and we are
extending their use even further


1604
01:22:31,756 --> 01:22:35,646
this year by bringing
them to you for OS X.


1605
01:22:36,516 --> 01:22:38,836
[ Applause ]


1606
01:22:39,336 --> 01:22:41,896
Storyboards work with
the new view controllers


1607
01:22:41,896 --> 01:22:44,416
in OS X Yosemite to
make it really easy


1608
01:22:44,416 --> 01:22:46,456
to design great Mac
applications.


1609
01:22:47,186 --> 01:22:49,406
You can design your
apps using scenes


1610
01:22:49,726 --> 01:22:52,396
and then connect those scenes
together very simply using the


1611
01:22:52,396 --> 01:22:54,236
familiar Interface
Builder gestures.


1612
01:22:55,936 --> 01:22:59,016
Interactive workflows, such
as popovers and sheets,


1613
01:22:59,316 --> 01:23:01,946
can now be designed wholly in
the Interface Builder canvas,


1614
01:23:02,506 --> 01:23:04,666
and containment relationships
such as tabs


1615
01:23:04,926 --> 01:23:08,966
and splits-those use the new
OS X view controller APIs


1616
01:23:09,216 --> 01:23:12,296
to make customization and
configuration really easy.


1617
01:23:13,106 --> 01:23:16,186
So now you can use storyboards
to design all of your interfaces


1618
01:23:16,396 --> 01:23:19,996
for both iOS and OS X.


1619
01:23:20,126 --> 01:23:22,216
We have some other great
design tool additions for you.


1620
01:23:23,296 --> 01:23:26,626
Asset catalogs now include
support for more asset types,


1621
01:23:26,856 --> 01:23:31,116
including vector art like PDF
and also supports marking images


1622
01:23:31,116 --> 01:23:34,086
as templates for the OS to
use as stencils at runtime.


1623
01:23:36,086 --> 01:23:38,436
Interface Builder
documents are now searchable,


1624
01:23:38,736 --> 01:23:40,946
both in the editor
and projectwide.


1625
01:23:41,516 --> 01:23:46,676
[ Applause ]


1626
01:23:47,176 --> 01:23:50,036
Now, this searching
works on both strings


1627
01:23:50,166 --> 01:23:53,476
and on property values like
connections and class names.


1628
01:23:53,816 --> 01:23:56,946
So, investigation and making
mass change is really simple.


1629
01:23:58,776 --> 01:24:01,246
And for iOS, we are
bringing custom fonts


1630
01:24:01,246 --> 01:24:02,776
into the Interface
Builder canvas.


1631
01:24:03,516 --> 01:24:08,946
[ Applause ]


1632
01:24:09,446 --> 01:24:11,356
So now these are rendered
live, and getting the layout


1633
01:24:11,356 --> 01:24:13,336
and precision you
want is really easy.


1634
01:24:14,746 --> 01:24:17,166
Now, in addition to
designing applications to work


1635
01:24:17,166 --> 01:24:19,966
on multiple devices, you
want your apps to ship


1636
01:24:19,966 --> 01:24:23,026
to as many people as
possible, and for this release,


1637
01:24:23,026 --> 01:24:25,756
shipping to a worldwide
audience is even easier.


1638
01:24:26,606 --> 01:24:29,556
For this release, we're
including support for XLIFF,


1639
01:24:29,696 --> 01:24:31,926
the industry-standard
format for managing


1640
01:24:31,926 --> 01:24:33,856
and exchanging localized data.


1641
01:24:35,186 --> 01:24:36,896
Xcode now includes a workflow


1642
01:24:36,896 --> 01:24:39,716
to automatically export
all the necessary content


1643
01:24:39,756 --> 01:24:40,556
for localization.


1644
01:24:41,016 --> 01:24:43,376
We'll run the necessary
processes on your source


1645
01:24:43,376 --> 01:24:46,206
and interface documents,
and in just a few clicks,


1646
01:24:46,366 --> 01:24:48,496
you have XLIFF to send
to your localizers,


1647
01:24:49,156 --> 01:24:51,936
and integrating the changes
back from them is just as easy.


1648
01:24:53,056 --> 01:24:55,406
Now, a benefit of this is
that you no longer need


1649
01:24:55,406 --> 01:24:58,176
to use strings files for
your development regions.


1650
01:24:58,446 --> 01:25:01,586
You can work solely in your
source and interface documents.


1651
01:25:02,516 --> 01:25:07,986
[ Applause ]


1652
01:25:08,486 --> 01:25:09,396
And if that wasn't enough,


1653
01:25:09,396 --> 01:25:11,326
we're going to bring
the localization content


1654
01:25:11,326 --> 01:25:14,066
into the Interface Builder
preview editor as well.


1655
01:25:14,656 --> 01:25:17,266
So, now in addition to
size classes and devices,


1656
01:25:17,526 --> 01:25:19,766
you can pick from any of
the localization languages


1657
01:25:20,016 --> 01:25:22,066
in your project and
view the results.


1658
01:25:22,066 --> 01:25:24,976
If you've not yet
localized, fret not.


1659
01:25:25,286 --> 01:25:27,596
You can use one of the
built-in pseudo localizations


1660
01:25:27,876 --> 01:25:29,376
to see how your interface
will respond.


1661
01:25:30,346 --> 01:25:31,346
So, now more than ever,


1662
01:25:31,346 --> 01:25:34,006
it is easy to ship
applications for everybody.


1663
01:25:36,516 --> 01:25:40,886
[ Applause ]


1664
01:25:41,386 --> 01:25:43,796
So we have a lot of great
design tools that work together


1665
01:25:43,796 --> 01:25:46,706
to make a really live and
interactive experience.


1666
01:25:46,996 --> 01:25:49,326
But there's been one
piece that's been missing,


1667
01:25:50,016 --> 01:25:51,856
and that's your custom controls.


1668
01:25:52,816 --> 01:25:55,306
Starting today, that
is no longer,


1669
01:25:55,356 --> 01:25:57,836
because your custom controls
are now rendered live


1670
01:25:58,086 --> 01:25:59,586
on the Interface Builder canvas.


1671
01:26:00,516 --> 01:26:08,126
[ Applause ]


1672
01:26:08,626 --> 01:26:10,416
I was pretty sure you
were going to like that.


1673
01:26:10,496 --> 01:26:12,646
So, let's go look at a
demo and see how it works.


1674
01:26:21,076 --> 01:26:23,236
So, here we have a photo kind


1675
01:26:23,236 --> 01:26:25,716
of scavenger hunt
application called Shutterbugs,


1676
01:26:26,126 --> 01:26:28,406
and on the main screen
we have a custom control.


1677
01:26:28,976 --> 01:26:31,636
It's showing the image from
one of the scavenger hunts.


1678
01:26:31,746 --> 01:26:34,586
It's masked to a circle and
has some adornments around it.


1679
01:26:35,456 --> 01:26:37,856
So, let's take a look in
Xcode 6 on how we will work


1680
01:26:38,146 --> 01:26:39,206
with this custom control.


1681
01:26:41,376 --> 01:26:42,256
Here's my project.


1682
01:26:42,356 --> 01:26:44,906
On the left-hand side we have
our universal storyboard,


1683
01:26:45,326 --> 01:26:47,956
and on the right-hand side I
have the code for my control.


1684
01:26:48,776 --> 01:26:51,356
It's written in Swift, and
I'm also taking advantage


1685
01:26:51,356 --> 01:26:54,246
of an iOS framework so
I can reuse this control


1686
01:26:54,246 --> 01:26:55,476
across my applications.


1687
01:26:56,606 --> 01:26:58,636
Now, in this case, we see our
custom control is currently


1688
01:26:58,636 --> 01:27:00,636
rendering as just the big
white box here on the left.


1689
01:27:01,316 --> 01:27:03,966
But surfacing it in the editor
as designable is really easy.


1690
01:27:04,626 --> 01:27:07,446
All you need to do is add
in the IB designable keyword


1691
01:27:07,446 --> 01:27:10,376
to my class, and the tools
will take care of the rest.


1692
01:27:11,006 --> 01:27:13,296
Now, my custom control
is just rendered inside


1693
01:27:13,296 --> 01:27:14,586
of the Interface Builder canvas.


1694
01:27:15,516 --> 01:27:22,086
[ Applause ]


1695
01:27:22,586 --> 01:27:24,156
Now, you're looking at it
going, "That doesn't look


1696
01:27:24,156 --> 01:27:25,156
like the picture did."


1697
01:27:25,156 --> 01:27:28,026
There are some values, like
the photo and the name,


1698
01:27:28,026 --> 01:27:29,826
that I typically
specify at runtime


1699
01:27:29,826 --> 01:27:31,326
on an individual instance.


1700
01:27:32,026 --> 01:27:32,956
We'll get to that in a moment.


1701
01:27:33,906 --> 01:27:36,726
There are some other properties
of my control that I would


1702
01:27:36,726 --> 01:27:39,806
like to allow people to
customize in Interface Builder,


1703
01:27:39,806 --> 01:27:42,546
and the metaphor for that
is using the inspector.


1704
01:27:43,416 --> 01:27:45,066
We've made that really
easy, too.


1705
01:27:45,566 --> 01:27:47,776
So, for any property
that I want to expose,


1706
01:27:47,986 --> 01:27:51,586
I can now add the IB inspectable
keyword, and I will do


1707
01:27:51,586 --> 01:27:53,366
that on a handful
of the properties


1708
01:27:53,426 --> 01:27:54,496
that I would like to expose.


1709
01:27:55,816 --> 01:27:58,286
Once I do that and go
back to Interface Builder


1710
01:27:58,286 --> 01:27:59,516
and select my control,


1711
01:27:59,516 --> 01:28:02,196
at the top of the
inspector are now controls


1712
01:28:02,196 --> 01:28:04,116
for my items, for my properties.


1713
01:28:05,516 --> 01:28:11,426
[ Applause ]


1714
01:28:11,926 --> 01:28:13,216
So, let's adjust
this a little bit.


1715
01:28:13,216 --> 01:28:14,556
I can make the border thicker.


1716
01:28:15,036 --> 01:28:18,026
I can also pick a different
color font for the bezel.


1717
01:28:19,016 --> 01:28:21,426
So, just like that, I've been
able to customize the control


1718
01:28:21,426 --> 01:28:23,756
with the limited
capability that I wanted


1719
01:28:23,756 --> 01:28:25,156
to expose to my developers.


1720
01:28:26,346 --> 01:28:28,956
Now, let's go back to the
image content I was talking


1721
01:28:28,956 --> 01:28:29,566
to you before.


1722
01:28:30,556 --> 01:28:34,186
In some cases, you really want
the closest representation


1723
01:28:34,256 --> 01:28:36,796
to your control as possible,
but you don't necessarily want


1724
01:28:36,796 --> 01:28:39,136
to set values that are going to
work for everybody at runtime.


1725
01:28:40,086 --> 01:28:41,356
We have a great mechanism
for you.


1726
01:28:41,526 --> 01:28:44,796
There's new API on our
controls called Prepare


1727
01:28:44,856 --> 01:28:45,776
for Interface Builder.


1728
01:28:46,256 --> 01:28:49,246
And this is your ability to
provide all the necessary setup


1729
01:28:49,246 --> 01:28:51,786
and configuration of your
control for how you want it


1730
01:28:51,786 --> 01:28:53,046
to look while you're designing.


1731
01:28:53,666 --> 01:28:54,946
Now, this is just for design.


1732
01:28:54,946 --> 01:28:57,616
It won't ship this way, but
it gives you all the ability


1733
01:28:57,616 --> 01:28:59,536
to surface your controls
in the way you want.


1734
01:29:02,586 --> 01:29:04,766
Now, I've been working with
my, thank you [applause].


1735
01:29:08,116 --> 01:29:08,746
There's still more.


1736
01:29:10,446 --> 01:29:12,266
I've been actually
working with my application


1737
01:29:12,266 --> 01:29:15,436
and localizing it, and I'd like
to see how my progress is doing.


1738
01:29:15,956 --> 01:29:17,566
So for that, I will
switch the assistant


1739
01:29:17,906 --> 01:29:21,466
over to the preview editor, and
here I will zoom in a little bit


1740
01:29:21,466 --> 01:29:22,526
so we can see the results.


1741
01:29:23,516 --> 01:29:26,426
Now, in the bottom right of the
preview editor is now a list


1742
01:29:26,426 --> 01:29:28,586
of all the localizations
for my project.


1743
01:29:29,506 --> 01:29:30,606
I can switch into any one


1744
01:29:30,606 --> 01:29:32,986
of them-let's pick
Spanish-and we'll see


1745
01:29:32,986 --> 01:29:34,256
that the interface updates.


1746
01:29:34,876 --> 01:29:36,526
Now, it looks like
I'm doing pretty well.


1747
01:29:36,526 --> 01:29:38,876
The controls at the bottom
updated, but we'll see


1748
01:29:38,876 --> 01:29:40,386
that the name for
the control did not.


1749
01:29:40,906 --> 01:29:43,096
That's an indication to me that
there's still more work for me


1750
01:29:43,156 --> 01:29:45,636
to do, but I didn't have to
build and run to find that out.


1751
01:29:46,986 --> 01:29:49,466
Let's select a, select
another language and make sure


1752
01:29:49,466 --> 01:29:50,866
that everything's
looking correct.


1753
01:29:51,316 --> 01:29:54,036
I've selected German
here, and now we'll notice


1754
01:29:54,036 --> 01:29:56,876
that our interface is doing
somewhat of the right thing.


1755
01:29:57,236 --> 01:30:00,646
I've been using autolayout
to lay out my controls,


1756
01:30:01,016 --> 01:30:02,996
and it's keeping the
items from overlapping,


1757
01:30:03,276 --> 01:30:04,776
but it's causing
one of the controls


1758
01:30:04,776 --> 01:30:06,796
to get clipped unnecessarily.


1759
01:30:07,386 --> 01:30:09,046
That's not quite
the UI I would like.


1760
01:30:09,926 --> 01:30:11,106
So, that's not a problem.


1761
01:30:11,106 --> 01:30:12,376
I can just go back over here


1762
01:30:12,376 --> 01:30:13,806
into the Interface
Builder canvas


1763
01:30:14,066 --> 01:30:16,596
and I can lower the priority
for one of those constraints.


1764
01:30:17,776 --> 01:30:20,166
Doing that, we'll now see
that on the right-hand side,


1765
01:30:20,166 --> 01:30:21,176
it lays out correctly.


1766
01:30:21,866 --> 01:30:24,346
So, just like that, I've been
able to design my interface


1767
01:30:24,446 --> 01:30:26,966
with my custom controls
and make sure it looks good


1768
01:30:26,966 --> 01:30:27,996
in all languages.


1769
01:30:28,036 --> 01:30:31,976
So, that's just a quick overview
of some of the great new tools


1770
01:30:32,056 --> 01:30:32,836
for Interface Builder.


1771
01:30:33,516 --> 01:30:40,456
[ Applause ]


1772
01:30:40,956 --> 01:30:42,636
Now, in addition to
great design tools,


1773
01:30:42,636 --> 01:30:44,616
we also have some great
new debugging tools


1774
01:30:44,616 --> 01:30:45,176
for you this year.


1775
01:30:45,686 --> 01:30:47,436
And it starts with
queue debugging.


1776
01:30:49,146 --> 01:30:51,666
Oftentimes when working with
blocks, it can be difficult


1777
01:30:51,666 --> 01:30:53,666
to keep track of where
your blocks are coming


1778
01:30:53,666 --> 01:30:55,166
from or going to.


1779
01:30:56,296 --> 01:30:58,616
Now, when you're debugging
your application and viewing


1780
01:30:58,616 --> 01:31:01,876
by queues, you will have not
only the executing blocks


1781
01:31:02,106 --> 01:31:04,426
but all of the pending
blocks available as well.


1782
01:31:05,306 --> 01:31:08,086
And disclosing the pending
blocks will show you the


1783
01:31:08,086 --> 01:31:10,656
enqueueing backtrace,
the backtrace


1784
01:31:10,656 --> 01:31:12,806
on where this block was
added to this queue.


1785
01:31:13,516 --> 01:31:17,566
[ Applause ]


1786
01:31:18,066 --> 01:31:19,406
And the pending backtrace is,


1787
01:31:19,506 --> 01:31:21,706
the backtrace is not
just for pending blocks.


1788
01:31:22,426 --> 01:31:26,316
As you are executing and
evaluating your own blocks,


1789
01:31:26,416 --> 01:31:29,526
the pending, the backtrace
is also included there too.


1790
01:31:29,826 --> 01:31:31,706
So, now even more of the
history is available to you.


1791
01:31:32,726 --> 01:31:35,556
Now, you may be wondering, as my
block moves from queue to queue


1792
01:31:35,556 --> 01:31:37,556
to queue, do you
keep track of it?


1793
01:31:37,646 --> 01:31:38,866
And the answer is yes.


1794
01:31:38,866 --> 01:31:40,626
If you have a very
well-traveled block,


1795
01:31:41,076 --> 01:31:42,426
all that information
will be available


1796
01:31:42,426 --> 01:31:43,576
to you during debugging.


1797
01:31:44,516 --> 01:31:49,796
[ Applause ]


1798
01:31:50,296 --> 01:31:51,756
Next up are debug gauges.


1799
01:31:52,346 --> 01:31:55,156
The debug gauges are a great
way to get an overview of kind


1800
01:31:55,156 --> 01:31:56,716
of the performance
of your application,


1801
01:31:57,286 --> 01:31:59,646
and for this release,
we're adding two new gauges


1802
01:31:59,996 --> 01:32:02,366
in the form of network
I/O and disk I/O.


1803
01:32:03,386 --> 01:32:05,156
These gauges give
you insight into some


1804
01:32:05,156 --> 01:32:07,436
of the more intensive
operations for your application,


1805
01:32:07,826 --> 01:32:11,146
showing read and write activity
and also giving you access


1806
01:32:11,196 --> 01:32:13,726
to the list of active
resources in use.


1807
01:32:15,646 --> 01:32:18,526
We've also updated the
debug gauges for graphics


1808
01:32:19,326 --> 01:32:20,456
to work great with Metal.


1809
01:32:20,756 --> 01:32:23,466
So, now you have all the same
debugging and profiling tools


1810
01:32:23,716 --> 01:32:25,106
to tune your games in Metal.


1811
01:32:27,316 --> 01:32:29,836
And we've also updated the
iCloud gauge and utilities


1812
01:32:29,836 --> 01:32:33,046
to work great with CloudKit
and with iCloud documents.


1813
01:32:34,236 --> 01:32:36,536
A new addition that's
really helpful is


1814
01:32:36,536 --> 01:32:40,346
that this iOS simulator now
supports custom configurations.


1815
01:32:40,726 --> 01:32:43,356
So, it's separate user
data and applications.


1816
01:32:44,226 --> 01:32:46,686
This allows you to simulate
having multiple users


1817
01:32:46,686 --> 01:32:49,766
on your machine so now testing
synchronization and sharing


1818
01:32:49,766 --> 01:32:51,306
with iCloud is a breeze.


1819
01:32:54,516 --> 01:32:58,676
[ Applause ]


1820
01:32:59,176 --> 01:33:01,576
Testing is a very
important and key area to us,


1821
01:33:01,776 --> 01:33:03,786
and we are bringing you
two great new additions


1822
01:33:03,866 --> 01:33:04,936
in our testing frameworks.


1823
01:33:05,406 --> 01:33:07,486
The first is asynchronous
testing.


1824
01:33:09,126 --> 01:33:12,216
XE test now includes a
flexible API to allow you


1825
01:33:12,216 --> 01:33:14,306
to test your longer-running
systems.


1826
01:33:15,476 --> 01:33:18,766
You can set up your tests
with predefined expectations,


1827
01:33:19,356 --> 01:33:22,586
and those expectations can be
evaluated as your test runs.


1828
01:33:23,976 --> 01:33:24,936
When you get to the
end of your test,


1829
01:33:25,306 --> 01:33:28,006
if your expectations have
been met, your test passes.


1830
01:33:28,376 --> 01:33:29,916
If not, your test fails.


1831
01:33:30,986 --> 01:33:32,976
This simple approach
makes it really easy


1832
01:33:32,976 --> 01:33:35,726
to test your asynchronous
systems right alongside


1833
01:33:35,986 --> 01:33:36,626
with your other tests.


1834
01:33:38,406 --> 01:33:39,366
But to go a step further,


1835
01:33:39,366 --> 01:33:41,846
for this release we're moving
beyond correctness testing,


1836
01:33:42,046 --> 01:33:44,616
and we're also adding
in performance testing.


1837
01:33:46,656 --> 01:33:49,816
With performance testing, you
have a simple blocks-based API


1838
01:33:50,366 --> 01:33:52,946
to identify areas of your
application that you would


1839
01:33:52,946 --> 01:33:54,416
like evaluated for performance.


1840
01:33:55,546 --> 01:33:57,056
Now, these blocks are
treated specially.


1841
01:33:57,496 --> 01:33:58,776
When the test executes,


1842
01:33:58,976 --> 01:34:01,396
we evaluate this
block multiple times


1843
01:34:01,466 --> 01:34:03,396
so we can get a sampling
of your performance.


1844
01:34:03,956 --> 01:34:05,096
And when the test ends,


1845
01:34:05,386 --> 01:34:07,746
we surface the performance
results right inside


1846
01:34:07,746 --> 01:34:08,296
of the editor.


1847
01:34:09,486 --> 01:34:12,496
Now, as part of this, you
can also establish baselines


1848
01:34:12,866 --> 01:34:14,266
as points of comparison
for your test,


1849
01:34:15,086 --> 01:34:17,236
which means that as
you improve your tests,


1850
01:34:17,696 --> 01:34:19,306
that'll be highlighted
in the editor as a win.


1851
01:34:20,196 --> 01:34:22,846
On the off chance though that
your performance regresses,


1852
01:34:23,216 --> 01:34:24,786
those will also be
highlighted in the editor


1853
01:34:24,786 --> 01:34:26,176
as areas for investigation.


1854
01:34:27,466 --> 01:34:29,906
Now, as part of this, you
also have access to all


1855
01:34:29,906 --> 01:34:31,836
of the details running
for the test.


1856
01:34:31,836 --> 01:34:34,286
So you have each of
the integration values,


1857
01:34:34,466 --> 01:34:36,306
you also have access
to the baselines,


1858
01:34:36,546 --> 01:34:38,396
and even the standard
deviations for your test.


1859
01:34:38,396 --> 01:34:40,846
So you have complete
control of your tests.


1860
01:34:42,666 --> 01:34:45,016
Now, as part of performance
testing, thank you.


1861
01:34:47,516 --> 01:34:51,346
[ Applause ]


1862
01:34:51,846 --> 01:34:53,416
I do agree, performance
testing is very cool.


1863
01:34:54,396 --> 01:34:57,206
Now, as part of this, a
part of performance testing,


1864
01:34:57,396 --> 01:34:59,366
you also want to
analyze your tests,


1865
01:34:59,726 --> 01:35:02,276
and we have by far the
coolest profiling tools


1866
01:35:02,276 --> 01:35:04,026
on the planet, Instruments.


1867
01:35:04,786 --> 01:35:05,906
So, for this release, we wanted


1868
01:35:05,906 --> 01:35:08,336
to bring together
testing and profiling.


1869
01:35:08,976 --> 01:35:12,786
So now, in the context menu
from any test or test bundle,


1870
01:35:13,056 --> 01:35:15,336
you can profile them
right into Instruments.


1871
01:35:15,846 --> 01:35:18,546
So, you can quickly look
down regressions or even look


1872
01:35:18,546 --> 01:35:20,356
for opportunities
for improvement.


1873
01:35:21,536 --> 01:35:22,996
Now, to sweeten the
deal even more,


1874
01:35:23,166 --> 01:35:25,676
Instruments has a
brand-new design and layout


1875
01:35:25,676 --> 01:35:28,606
that has been optimized for
a smoother user experience


1876
01:35:28,936 --> 01:35:31,576
and to make investigating
issues even easier.


1877
01:35:32,836 --> 01:35:35,376
In addition, in this release
we're also adding in support


1878
01:35:35,376 --> 01:35:37,466
for performance counters
for iOS,


1879
01:35:37,826 --> 01:35:39,966
which is a great new addition
to our profiling tools.


1880
01:35:43,346 --> 01:35:45,606
Inherently, though, when you
are writing performance tests,


1881
01:35:45,996 --> 01:35:48,206
you are identifying
areas of your application


1882
01:35:48,286 --> 01:35:51,086
where performance is
sensitive or critical.


1883
01:35:51,996 --> 01:35:54,546
Xcode and the compiler can
make use of this information


1884
01:35:54,806 --> 01:35:57,826
with a new feature called
Profile Guided Optimization,


1885
01:35:58,256 --> 01:35:59,526
or PGO for short.


1886
01:36:00,726 --> 01:36:03,026
With PGO, your performance
tests are used


1887
01:36:03,026 --> 01:36:06,306
to profile your application,
and that information is used


1888
01:36:06,306 --> 01:36:09,216
in subsequent builds
to optimize your code


1889
01:36:09,216 --> 01:36:10,926
for better runtime performance,


1890
01:36:11,556 --> 01:36:13,786
so the result is
performance testing


1891
01:36:13,996 --> 01:36:16,406
and performance improvement
all in one.


1892
01:36:17,716 --> 01:36:18,466
And that's PGO.


1893
01:36:19,516 --> 01:36:24,596
[ Applause ]


1894
01:36:25,096 --> 01:36:26,746
Now, to take advantage of many


1895
01:36:26,746 --> 01:36:29,246
of these new workflows
continuously during development,


1896
01:36:29,586 --> 01:36:31,666
we've also updated
the Xcode bots


1897
01:36:31,976 --> 01:36:33,566
with a new streamlined
interface,


1898
01:36:33,936 --> 01:36:36,846
more configuration
options, and support for all


1899
01:36:36,846 --> 01:36:38,436
of the new testing workflows.


1900
01:36:40,156 --> 01:36:43,446
The new integration reports for
bots give you even more details


1901
01:36:43,446 --> 01:36:44,416
about your integrations.


1902
01:36:45,006 --> 01:36:47,466
We separated out new
from pre-existing issues,


1903
01:36:47,666 --> 01:36:50,846
and we also tracked down
individual issues to committers


1904
01:36:51,206 --> 01:36:52,526
and individual commits.


1905
01:36:53,186 --> 01:36:55,186
So, you can quickly
find the guilty


1906
01:36:55,246 --> 01:36:58,096
or the more responsible party
for any issue that comes up.


1907
01:36:59,686 --> 01:37:02,456
We also have more
scheduling options and support


1908
01:37:02,456 --> 01:37:06,026
for custom triggers, which you
can run your own scripts before


1909
01:37:06,026 --> 01:37:07,986
or after any integration.


1910
01:37:09,516 --> 01:37:13,896
[ Applause ]


1911
01:37:14,396 --> 01:37:17,236
And the new testing reports give
you access to all of the details


1912
01:37:17,236 --> 01:37:21,096
about your tests, highlighting
regressions and improvements.


1913
01:37:21,766 --> 01:37:24,256
You have access to all the same
data for your performance tests


1914
01:37:24,956 --> 01:37:26,646
and including the
baseline workflows


1915
01:37:26,646 --> 01:37:27,956
for managing those
on your server.


1916
01:37:29,166 --> 01:37:32,026
These reports are also available
for the local testing workflows,


1917
01:37:32,066 --> 01:37:34,866
so you can take advantage
of them on your desktop too.


1918
01:37:35,866 --> 01:37:38,896
So, now even more great
reasons to use Xcode bots


1919
01:37:39,256 --> 01:37:40,296
in your daily integrations.


1920
01:37:43,006 --> 01:37:45,276
Now, we have one more
feature for you today.


1921
01:37:45,866 --> 01:37:48,526
And this feature really
brings together the liveness


1922
01:37:48,526 --> 01:37:51,726
of the design experience and
the debugging experience,


1923
01:37:52,326 --> 01:37:54,926
and we're calling this
feature View Debugging.


1924
01:37:56,396 --> 01:38:00,066
With View Debugging, you have
a live, interactive way to dive


1925
01:38:00,066 --> 01:38:02,126
into the details of
the user interface


1926
01:38:02,406 --> 01:38:06,046
of your running application, and
I'd like to give you a demo now


1927
01:38:06,046 --> 01:38:09,546
of the now more visual way
to debug your applications.


1928
01:38:17,476 --> 01:38:19,496
So, here we are,
back in our project.


1929
01:38:19,756 --> 01:38:21,576
Let's just simplify our
view a little bit here.


1930
01:38:22,916 --> 01:38:25,006
And remember, we were
running our application


1931
01:38:25,006 --> 01:38:26,056
over here in the simulator.


1932
01:38:27,236 --> 01:38:29,386
Now, if I wanted to
get more information


1933
01:38:29,386 --> 01:38:31,866
about this interface, I
could pause and use some


1934
01:38:31,936 --> 01:38:34,006
of the debugger introspection
tools,


1935
01:38:34,006 --> 01:38:35,646
but there's an easier way now.


1936
01:38:36,046 --> 01:38:38,156
In the debug bar,
there's a button here


1937
01:38:38,196 --> 01:38:40,906
to capture my view hierarchy,
and I will click that.


1938
01:38:42,146 --> 01:38:44,016
And you'll see that now
the main view is replaced


1939
01:38:44,016 --> 01:38:45,956
with a snapshot of
my application.


1940
01:38:46,956 --> 01:38:48,856
Now, this snapshot
is not a screenshot.


1941
01:38:49,136 --> 01:38:50,166
It's actually an encapture


1942
01:38:50,166 --> 01:38:52,786
of the entire view
hierarchy of my interface.


1943
01:38:54,386 --> 01:38:57,066
Let's change perspective a
little bit to see if that helps.


1944
01:38:59,516 --> 01:39:06,896
[ Applause ]


1945
01:39:07,396 --> 01:39:10,176
We have implemented this for
you using the SceneKit APIs


1946
01:39:10,176 --> 01:39:12,286
to give us this gorgeous
3D interaction.


1947
01:39:13,726 --> 01:39:16,606
I can adjust the interface
to expand the items a bit


1948
01:39:16,606 --> 01:39:18,126
to make it easier
to select things.


1949
01:39:20,176 --> 01:39:22,476
You'll see that I can select
items directly on the canvas.


1950
01:39:22,776 --> 01:39:25,456
I also have access to the
hierarchy in the debug navigator


1951
01:39:25,646 --> 01:39:28,356
and in the jump bar, which
makes selection really easy.


1952
01:39:29,686 --> 01:39:31,696
Now, as I select
items on the canvas,


1953
01:39:31,696 --> 01:39:34,686
you'll see that the inspector's
update will show attributes


1954
01:39:34,686 --> 01:39:35,876
about the items I'm selecting.


1955
01:39:36,886 --> 01:39:38,436
Here's some information
about the main title.


1956
01:39:38,436 --> 01:39:40,926
I can select one of
the progress items,


1957
01:39:40,926 --> 01:39:42,876
and we see that's actually
implemented with an image,


1958
01:39:42,976 --> 01:39:44,486
with a regular and
highlighted state.


1959
01:39:45,996 --> 01:39:48,356
I can select even one of the
labels and I'll see information


1960
01:39:48,896 --> 01:39:52,636
about the texts, the lines, line
breaks, and other properties.


1961
01:39:54,136 --> 01:39:56,216
Now, at certain times
it's, it's difficult


1962
01:39:56,216 --> 01:39:57,536
to see exactly what you want


1963
01:39:57,536 --> 01:39:59,256
because there might be
too many things on screen.


1964
01:39:59,906 --> 01:40:01,966
We've given you the
ability to adjust the range


1965
01:40:01,966 --> 01:40:04,986
of interesting views by
peeling items off from the front


1966
01:40:05,026 --> 01:40:08,586
or the back so you can narrow
down your, your visual focus.


1967
01:40:10,516 --> 01:40:12,216
Now, in some cases it
may be easier to work


1968
01:40:12,386 --> 01:40:15,226
without the wireframes so you
can look at just your contents,


1969
01:40:16,006 --> 01:40:18,756
or if you wanted, you could
look with just wireframes,


1970
01:40:19,076 --> 01:40:20,756
which is really helpful
when trying to work


1971
01:40:20,756 --> 01:40:21,576
through layout issues.


1972
01:40:23,486 --> 01:40:25,376
Now, we also wanted to make
sure that this worked great


1973
01:40:25,436 --> 01:40:27,256
for not just property settings


1974
01:40:27,316 --> 01:40:28,676
but other things you
might be working with.


1975
01:40:28,676 --> 01:40:31,626
So, I'm going to zoom in here
and select one of these labels,


1976
01:40:32,066 --> 01:40:35,506
and you'll see that I can now
enable constraint debugging too,


1977
01:40:35,506 --> 01:40:38,426
and I can visualize in
3D all the constraints


1978
01:40:38,426 --> 01:40:38,896
that are going on.


1979
01:40:39,516 --> 01:40:46,226
[ Applause ]


1980
01:40:46,726 --> 01:40:48,736
This is an amazing tool, and
you guys are going to have a lot


1981
01:40:48,736 --> 01:40:49,636
of fun working with it.


1982
01:40:50,076 --> 01:40:53,246
And that's the new View
Debugger for Xcode.


1983
01:40:54,516 --> 01:40:58,686
[ Applause ]


1984
01:40:59,186 --> 01:41:01,786
So, Xcode 6 is packed
with features


1985
01:41:02,076 --> 01:41:04,076
that I know you all are going
to love and enjoy using.


1986
01:41:04,566 --> 01:41:06,026
We look forward to seeing
you guys in the lab,


1987
01:41:06,366 --> 01:41:08,306
and have fun this week
with the new Xcode 6.


1988
01:41:09,516 --> 01:41:18,766
[ Applause ]


1989
01:41:19,266 --> 01:41:22,146
>> So, we announced
a large number


1990
01:41:22,286 --> 01:41:24,566
of new technologies today.


1991
01:41:24,566 --> 01:41:27,526
iOS 8 and OS X Yosemite
look better than ever before


1992
01:41:28,066 --> 01:41:30,996
and expose an incredible
number of APIs


1993
01:41:31,206 --> 01:41:33,826
so that you can get even more
out of our operating systems


1994
01:41:34,076 --> 01:41:35,406
and the underlying hardware.


1995
01:41:36,666 --> 01:41:39,286
We are supporting these
products with a new version


1996
01:41:39,286 --> 01:41:42,296
of our Xcode IDE,
version 6, which we run


1997
01:41:42,356 --> 01:41:44,446
on OS X Mavericks and Yosemite.


1998
01:41:45,406 --> 01:41:47,486
And among other things, it
of course gives you access


1999
01:41:47,586 --> 01:41:50,946
to our new Swift programming
language specifically designed


2000
01:41:50,946 --> 01:41:53,146
by Apple for Cocoa
and Cocoa Touch.


2001
01:41:55,226 --> 01:41:56,506
So that you can get ready


2002
01:41:56,506 --> 01:41:58,256
for our product launches
later this year,


2003
01:41:58,256 --> 01:42:01,706
we will make developer previews
available for download today


2004
01:42:01,846 --> 01:42:03,686
on the WWDC Attendee Portal.


2005
01:42:03,746 --> 01:42:07,136
You will find all these
products, iOS 8, Yosemite,


2006
01:42:07,136 --> 01:42:08,676
even things like
OS X server there.


2007
01:42:10,136 --> 01:42:12,866
And of course, there are
numerous sessions here


2008
01:42:12,866 --> 01:42:15,086
at the conference that you can
learn more about these products.


2009
01:42:15,826 --> 01:42:18,226
There are more than 100
sessions and even more labs


2010
01:42:18,296 --> 01:42:20,746
where you can meet Apple
engineers one on one


2011
01:42:21,046 --> 01:42:22,956
to get your specific
questions answered.


2012
01:42:24,486 --> 01:42:27,476
So, I'm looking forward to more
amazing and innovative apps


2013
01:42:27,476 --> 01:42:29,926
from you guys, and I hope to
see you around later this week.


2014
01:42:31,516 --> 01:42:34,500
[ Applause ]

