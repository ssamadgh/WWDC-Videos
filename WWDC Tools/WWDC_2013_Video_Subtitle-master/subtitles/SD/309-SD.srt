1
00:00:00,506 --> 00:00:09,666
[ Silence ]


2
00:00:10,166 --> 00:00:11,176
>> Aroon Pahwa: Good
afternoon everybody.


3
00:00:11,176 --> 00:00:11,516
[ Applause ]


4
00:00:11,516 --> 00:00:21,216
Thanks for coming here today to
Putting Map Kit in Perspective.


5
00:00:22,076 --> 00:00:24,826
My name is Aroon Pahwa and I am
here to talk to you about some


6
00:00:24,826 --> 00:00:27,386
of the new ways you can
look at Maps in iOS 7.


7
00:00:27,986 --> 00:00:33,556
So last year with iOS 6 we
introduced an all new maps


8
00:00:33,556 --> 00:00:35,806
application with
vector map rendering.


9
00:00:36,446 --> 00:00:38,486
And along with that we
introduced a few new ways you


10
00:00:38,486 --> 00:00:39,526
can interact with Maps.


11
00:00:39,526 --> 00:00:42,906
We added the ability
to rotate the map,


12
00:00:44,006 --> 00:00:45,776
as well as pitch
the map into 3D.


13
00:00:46,346 --> 00:00:47,946
You get to see these
beautiful 3D buildings.


14
00:00:48,596 --> 00:00:52,126
We also added the
ability to pan westward


15
00:00:52,126 --> 00:00:53,276
across the Pacific Ocean.


16
00:00:53,726 --> 00:00:55,906
You can just keep going forever
all the way around the world.


17
00:00:56,546 --> 00:00:59,986
And to implement
printing support


18
00:00:59,986 --> 00:01:03,706
in Maps we added the ability
to take static map snapshots.


19
00:01:06,496 --> 00:01:09,226
Now we had hundreds of millions
of users using the Maps.app


20
00:01:09,226 --> 00:01:12,066
and when they left and
came to your app they found


21
00:01:12,066 --> 00:01:14,676
that the Map Kit view
did not work the same.


22
00:01:15,696 --> 00:01:17,096
They tried to rotate
it, it didn't work.


23
00:01:17,666 --> 00:01:19,326
They tried to pitch
it and it didn't work.


24
00:01:19,376 --> 00:01:21,906
And it's frustrating for them
and I'm sure it's frustrating


25
00:01:21,906 --> 00:01:24,026
for you too because your
customers can't use the map the


26
00:01:24,026 --> 00:01:24,916
way they do in the Maps.app.


27
00:01:25,966 --> 00:01:28,846
So this year we brought all of
that to Map Kit and not only


28
00:01:28,846 --> 00:01:31,116
that we brought the
whole thing to OS X.


29
00:01:32,536 --> 00:01:33,966
So I'm really excited
to talk to you today


30
00:01:34,916 --> 00:01:37,706
about how we make
that work in Map Kit.


31
00:01:38,236 --> 00:01:39,496
So the first thing
I'm going to go


32
00:01:39,496 --> 00:01:43,346
over is what do we
actually mean by 3D map?


33
00:01:45,196 --> 00:01:48,476
After that I'm going to show
you how you can add perspective


34
00:01:48,476 --> 00:01:49,906
views to your map.


35
00:01:51,196 --> 00:01:53,826
Then I'm going to go over some
new API that we've introduced


36
00:01:53,826 --> 00:01:56,186
to help you take
full advantage of 3D.


37
00:01:56,726 --> 00:01:59,666
And lastly I'm going
to talk to you


38
00:01:59,666 --> 00:02:01,466
about how you can
use the Snapshot API


39
00:02:01,466 --> 00:02:04,596
that we've introduced to create
static snapshots of a map


40
00:02:04,746 --> 00:02:09,126
in a preformat manner.


41
00:02:09,286 --> 00:02:10,455
So what is a 3D map?


42
00:02:10,936 --> 00:02:13,966
What does it mean
to call a map 3D?


43
00:02:14,896 --> 00:02:17,076
When someone says map
usually they're talking


44
00:02:17,076 --> 00:02:18,016
about something flat.


45
00:02:18,016 --> 00:02:20,416
Maybe like a piece of paper you
roll up and put in your car.


46
00:02:21,006 --> 00:02:22,156
It's got a bunch of roads on it.


47
00:02:23,386 --> 00:02:26,116
So how do we take that
flat thing and make it 3D?


48
00:02:28,296 --> 00:02:30,616
Well we start with the
same 2D map you're used to.


49
00:02:30,616 --> 00:02:31,436
Here a picture of one.


50
00:02:31,436 --> 00:02:34,036
North is at the top.


51
00:02:34,696 --> 00:02:38,106
Then we add pitched
views of that map.


52
00:02:38,256 --> 00:02:41,226
And on top of that now we can
add things like 3D buildings.


53
00:02:41,756 --> 00:02:44,276
And the result is something


54
00:02:44,486 --> 00:02:46,666
that is sometimes
referred to as 2.5D.


55
00:02:47,186 --> 00:02:50,426
That's because what's really
going on here is we're looking


56
00:02:50,426 --> 00:02:53,936
at the same 2D map you're used
to seeing in a 3D environment.


57
00:02:54,496 --> 00:02:57,576
And that exactly how you should
conceptualize what's happening.


58
00:02:57,576 --> 00:02:59,386
What we're doing is
we're looking at 2D map


59
00:03:00,046 --> 00:03:03,136
in a 3D environment and
that allows us to move


60
00:03:03,136 --> 00:03:05,626
around in a 3D environment
getting pitched views


61
00:03:05,626 --> 00:03:08,466
and rotation, as well as,
putting 3D objects on top


62
00:03:08,466 --> 00:03:09,446
of the map like these buildings.


63
00:03:09,446 --> 00:03:13,366
So how do you get
around this new 3D map?


64
00:03:13,426 --> 00:03:15,666
Well you're probably all
familiar with the Maps.app


65
00:03:15,666 --> 00:03:17,766
and it works exactly
the same in Map Kit.


66
00:03:17,806 --> 00:03:19,766
You can also use two
fingers to rotate the map


67
00:03:19,766 --> 00:03:20,686
by rotating your fingers.


68
00:03:20,686 --> 00:03:22,916
You can also use two
fingers and pan up


69
00:03:22,916 --> 00:03:23,846
and down to pitch the map.


70
00:03:24,656 --> 00:03:28,126
And in OS X we use all the
gestures you're used to using


71
00:03:28,126 --> 00:03:30,366
with a track pad and if
you don't have a track pad


72
00:03:30,366 --> 00:03:32,696
and you've got a mouse we've
added handy compass controls


73
00:03:32,696 --> 00:03:35,186
and zoom controls so it's easy
to get around that way too.


74
00:03:36,816 --> 00:03:39,236
And I know most of you use the
simulator to test your apps


75
00:03:39,236 --> 00:03:41,086
so we've added the
ability to pitch and rotate


76
00:03:41,086 --> 00:03:42,166
in the simulator, as well.


77
00:03:42,486 --> 00:03:44,066
You can use these key
combinations up here,


78
00:03:44,066 --> 00:03:45,436
now you can pitch and rotate.


79
00:03:45,836 --> 00:03:48,996
Test your app, complete
functionality in the sim.


80
00:03:51,436 --> 00:03:54,886
So how do you get these 3D
views in your Map Kit app?


81
00:03:56,306 --> 00:03:58,396
It's basically three
things you need to do.


82
00:03:58,856 --> 00:04:01,396
The first one is just
recompile with iOS 7 SDK.


83
00:04:01,396 --> 00:04:04,846
You're going to find that
pitching and rotation just work.


84
00:04:04,846 --> 00:04:05,886
They're on by default.


85
00:04:06,576 --> 00:04:09,616
And for the most part your
app will probably just work.


86
00:04:09,706 --> 00:04:12,046
But there are some changes
to the existing API behavior


87
00:04:12,046 --> 00:04:14,096
that you should be aware
of and we're going to go


88
00:04:14,096 --> 00:04:16,166
over the four major
areas of the MKMap API


89
00:04:16,166 --> 00:04:18,586
that change a little
bit, you should be aware


90
00:04:18,586 --> 00:04:21,875
of in case something
in your app breaks.


91
00:04:22,176 --> 00:04:25,666
Lastly I'm going to go over a
new camera API we're introducing


92
00:04:25,666 --> 00:04:27,486
that you should be
adopting in your apps


93
00:04:27,676 --> 00:04:28,986
to take full advantage of 3D.


94
00:04:29,396 --> 00:04:32,736
So I'm pretty sure you can
handle recompiling your app


95
00:04:32,736 --> 00:04:35,656
so I'm just going to go ahead
and get started with adapting


96
00:04:35,656 --> 00:04:36,886
to existing API changes.


97
00:04:37,986 --> 00:04:40,276
So after you create
you MKMapView one


98
00:04:40,276 --> 00:04:41,796
of the first things you're
probably doing is telling the


99
00:04:41,796 --> 00:04:43,786
map what part of the world
that you want to see.


100
00:04:43,786 --> 00:04:46,676
Here are the two APIs that
you're probably using.


101
00:04:47,076 --> 00:04:48,716
The first one is
setVisibleMapRect


102
00:04:48,716 --> 00:04:50,086
and the second one is setRegion.


103
00:04:50,676 --> 00:04:52,396
Both of these take a rectangle


104
00:04:52,456 --> 00:04:54,106
and tell the map
to just show it.


105
00:04:54,106 --> 00:04:56,666
And this API behaves
exactly like it always has


106
00:04:56,666 --> 00:04:57,816
in previous iOS releases.


107
00:04:58,166 --> 00:05:00,676
It results in a 2D map
that's looking straight


108
00:05:00,676 --> 00:05:02,546
down at the map with
no rotation.


109
00:05:02,546 --> 00:05:04,006
So North is at the
top of your map view.


110
00:05:05,066 --> 00:05:07,646
The difference in iOS 7
is now that we can pan


111
00:05:07,646 --> 00:05:09,606
across the Pacific Ocean
it means we can pan


112
00:05:09,606 --> 00:05:13,716
across the 180th Meridian;
this API will now returnRects


113
00:05:13,866 --> 00:05:15,916
that span that as well, and
that's a little bit different


114
00:05:15,916 --> 00:05:17,136
than in previous iOS releases.


115
00:05:17,136 --> 00:05:20,096
So if you're doing math with
these rectangles that math needs


116
00:05:20,096 --> 00:05:22,936
to handle a rectangle that's
spanning that meridian.


117
00:05:27,976 --> 00:05:31,936
So here's an example of a
rectangle that you can now set


118
00:05:31,936 --> 00:05:34,236
with these APIs that
spans the 180th meridian.


119
00:05:34,856 --> 00:05:36,676
Here we have a
MKCoordinateRegion that's


120
00:05:36,676 --> 00:05:41,146
looking directly at the
equator and the 108th Meridian;


121
00:05:41,146 --> 00:05:43,116
that's the line that goes up
and down the Pacific Ocean.


122
00:05:43,346 --> 00:05:45,646
And we have some
radius around it.


123
00:05:46,006 --> 00:05:48,396
So in iOS 6 and before you would
have got an image like this


124
00:05:48,396 --> 00:05:49,846
if you had tried to
set that in MKMapView.


125
00:05:50,386 --> 00:05:51,916
We kind of got bumped
over and now we're looking


126
00:05:51,916 --> 00:05:52,966
at North and South America.


127
00:05:53,746 --> 00:05:55,976
But in iOS 7 we'll obey
the rectangle that you set


128
00:05:55,976 --> 00:05:57,706
and now we're looking in the
middle of the Pacific Ocean.


129
00:05:57,706 --> 00:06:02,756
Now the same two APIs
you can read from


130
00:06:02,756 --> 00:06:03,846
and they'll turn a rectangle


131
00:06:03,846 --> 00:06:05,846
and they behave a little
bit differently now


132
00:06:05,846 --> 00:06:06,536
that we have pitching.


133
00:06:07,326 --> 00:06:10,346
So here's a pitched and rotated
view of downtown San Francisco


134
00:06:11,126 --> 00:06:13,426
and intuition tells me that you
can't really describe what we're


135
00:06:13,426 --> 00:06:14,596
seeing here using a rectangle.


136
00:06:15,866 --> 00:06:16,836
So let's see if that's true.


137
00:06:16,836 --> 00:06:18,606
We can just wash
this view with blue.


138
00:06:19,016 --> 00:06:20,446
Now let's zoom out
and take a look at it


139
00:06:20,676 --> 00:06:22,476
and indeed it's not
a rectangle it's


140
00:06:22,476 --> 00:06:25,326
like some chopped off
rectangle or triangle.


141
00:06:26,666 --> 00:06:29,296
And so these APIs do the most
sensible thing they can do.


142
00:06:29,726 --> 00:06:32,606
They return a rectangle that
contains the visible region.


143
00:06:33,476 --> 00:06:35,276
That means it's now
an approximation


144
00:06:35,276 --> 00:06:38,066
to what your map view is
showing when it's pitched.


145
00:06:39,296 --> 00:06:41,676
The other difference is
they may return a rectangle


146
00:06:41,676 --> 00:06:44,016
that spans 108th Meridian and
like I said you need to be able


147
00:06:44,016 --> 00:06:44,826
to handle that in your app.


148
00:06:45,646 --> 00:06:47,876
You may wonder, "Well what
am I going to use this thing


149
00:06:47,876 --> 00:06:49,706
for if it doesn't actually
tell me what the map view


150
00:06:49,706 --> 00:06:50,106
is showing?"


151
00:06:50,106 --> 00:06:54,156
Well it turns out its really
easy to trim or filter the data


152
00:06:54,156 --> 00:06:56,106
that you're going to show
on a map using a rectangle.


153
00:06:56,106 --> 00:06:57,796
The math is very simple
and you're probably doing


154
00:06:57,796 --> 00:06:59,786
that today already
if you're trying


155
00:06:59,786 --> 00:07:00,926
to show a lot of
data on the map.


156
00:07:01,336 --> 00:07:04,086
So you should continue
using this API to do that.


157
00:07:06,416 --> 00:07:08,396
So there's one more
API to change what part


158
00:07:08,396 --> 00:07:10,116
of the map is being
shown in your map view


159
00:07:10,116 --> 00:07:11,406
and that's setCenterCoordinate.


160
00:07:12,356 --> 00:07:13,476
In previous iOS releases


161
00:07:13,476 --> 00:07:16,866
and in iOS 7 this returns the
coordinate that's at the center


162
00:07:16,866 --> 00:07:18,746
of the screen or allows
you to set the coordinate


163
00:07:18,746 --> 00:07:22,036
which should be visible at
the center of the screen.


164
00:07:22,036 --> 00:07:24,856
And what that does is basically
simulate the pan gesture.


165
00:07:25,266 --> 00:07:28,066
That means when you change this
property the zoom level won't


166
00:07:28,066 --> 00:07:31,246
change and now on iOS 7
the rotation or the pitch


167
00:07:31,246 --> 00:07:32,936
of the map won't change either.


168
00:07:36,086 --> 00:07:36,716
Annotations.


169
00:07:37,596 --> 00:07:39,136
The annotations are a great way


170
00:07:39,136 --> 00:07:40,756
to describe a single
point on the map.


171
00:07:41,296 --> 00:07:44,186
In iOS7 they're really
easy to use.


172
00:07:44,186 --> 00:07:45,356
They continue to be easy to use.


173
00:07:45,746 --> 00:07:49,236
That's because they stay
upright as the map rotates.


174
00:07:49,796 --> 00:07:53,726
They also always face the
screen even as the map pitches.


175
00:07:54,116 --> 00:07:56,596
And as you push them
into the background


176
00:07:56,596 --> 00:07:58,566
when you're pitched they
always stay the same size.


177
00:07:59,136 --> 00:08:01,296
To the artwork that you're
using will never be distorted


178
00:08:01,296 --> 00:08:03,636
and you don't have to
account for it changing size.


179
00:08:05,056 --> 00:08:06,046
What's also handy is


180
00:08:06,046 --> 00:08:08,626
that annotation views
always track the map.


181
00:08:08,626 --> 00:08:11,976
That means as your user is
panning the map the annotation


182
00:08:11,976 --> 00:08:14,636
view will be updated to
stay in the same position.


183
00:08:15,306 --> 00:08:18,126
That means if you have
some UI that you want


184
00:08:18,226 --> 00:08:21,356
to follow the map you should
try to add that as a sub-view


185
00:08:21,356 --> 00:08:23,436
of the annotation view, or
just map it an annotation view


186
00:08:23,436 --> 00:08:24,516
if that seems appropriate.


187
00:08:25,646 --> 00:08:28,886
If you try to approximate
the way the map is moving


188
00:08:29,186 --> 00:08:31,426
by capturing a gesture
recognizer


189
00:08:31,426 --> 00:08:32,796
and overlaying your UI on top


190
00:08:32,796 --> 00:08:34,466
of the map it's just not
going to work anymore.


191
00:08:35,256 --> 00:08:37,586
When you pitch the
transformation is non-linear


192
00:08:37,586 --> 00:08:40,246
so you can't kind
of interpolate that.


193
00:08:42,476 --> 00:08:45,076
So in iOS annotation
views are still UIViews.


194
00:08:45,076 --> 00:08:46,756
There's no changes there
so all the customization


195
00:08:46,756 --> 00:08:48,146
that you're used to
doing continues to work.


196
00:08:48,146 --> 00:08:50,806
And in iOS X we've
introduced them as NSViews


197
00:08:50,806 --> 00:08:52,086
so if you're familiar


198
00:08:52,086 --> 00:08:54,696
with NSViews you can use
annotation views right


199
00:08:54,696 --> 00:08:58,246
out of the box.


200
00:08:58,406 --> 00:09:00,046
There's a few small
changes to overlays.


201
00:09:01,726 --> 00:09:04,146
Overlays now take the
shortest path across the maps.


202
00:09:04,146 --> 00:09:07,576
So if you have a polyline
and you give it two points;


203
00:09:07,576 --> 00:09:09,716
one here in Los Angeles
and the other in Tokyo.


204
00:09:10,516 --> 00:09:11,746
In previous iOS releases


205
00:09:11,746 --> 00:09:14,636
that would have drawn a line
all the way across the U.S. then


206
00:09:14,636 --> 00:09:18,106
across the Atlantic,
Africa, India, then China


207
00:09:18,326 --> 00:09:19,766
and now finally on to Tokyo.


208
00:09:20,566 --> 00:09:21,926
That doesn't really
make that much sense.


209
00:09:21,926 --> 00:09:24,916
And now that we can look across
the Pacific Ocean we'll now draw


210
00:09:24,916 --> 00:09:26,336
that polyline over
the Pacific Ocean.


211
00:09:27,066 --> 00:09:30,236
In red what you're seeing here
is the new MKGeodesicPolyline


212
00:09:30,476 --> 00:09:32,446
and those behave just
like normal polylines.


213
00:09:32,446 --> 00:09:33,686
They're going to take
the short path, as well.


214
00:09:33,686 --> 00:09:38,446
The other thing to note is
now that we have 3D buildings


215
00:09:39,576 --> 00:09:42,106
when you pitch a view if there
are 3D buildings available those


216
00:09:42,106 --> 00:09:44,106
are going to occlude
your overlays.


217
00:09:45,476 --> 00:09:46,436
That's just something
to be aware of.


218
00:09:46,436 --> 00:09:48,176
If you're presenting data that
doesn't really make sense,


219
00:09:48,176 --> 00:09:49,366
if it's partially occluded,


220
00:09:49,946 --> 00:09:51,446
something you should
be aware of.


221
00:09:54,676 --> 00:09:58,516
So in the Maps.app we have
this feature; if you long press


222
00:09:58,516 --> 00:10:00,416
on the map a purple
pins going to drop.


223
00:10:01,026 --> 00:10:02,716
And that's really
handy for figuring


224
00:10:02,716 --> 00:10:05,026
out what a random
address is on the map.


225
00:10:05,026 --> 00:10:07,446
You can place it over a house
and you'll see the address


226
00:10:07,446 --> 00:10:08,246
that that house is at.


227
00:10:09,596 --> 00:10:12,766
Well to implement that the
Maps.app uses this first API I


228
00:10:12,766 --> 00:10:13,266
listed here.


229
00:10:14,046 --> 00:10:16,006
Convert point to
coordinate from view.


230
00:10:16,736 --> 00:10:18,806
We take the point where the
user rested their finger


231
00:10:18,806 --> 00:10:21,186
and we convert that into
a coordinate in the map.


232
00:10:22,046 --> 00:10:23,446
From there you can
make an annotation


233
00:10:23,536 --> 00:10:24,796
and drop an annotation
view on the map.


234
00:10:25,996 --> 00:10:28,706
These other APIs are useful
for similar kinds of features.


235
00:10:30,236 --> 00:10:31,836
Now in this image here
we can see the sky


236
00:10:31,836 --> 00:10:33,606
and if the user places
their finger there


237
00:10:33,606 --> 00:10:34,866
and long presses well,


238
00:10:35,656 --> 00:10:37,726
what coordinate represents
a point of the sky?


239
00:10:37,796 --> 00:10:38,316
There isn't one.


240
00:10:39,346 --> 00:10:42,296
And so these APIs now have
to somehow indicate that.


241
00:10:42,866 --> 00:10:44,946
Which means they can
return invalid values now


242
00:10:44,946 --> 00:10:46,216
and that's something that
you have to be aware of.


243
00:10:47,666 --> 00:10:49,846
So if you're using these
APIs be sure to check


244
00:10:49,846 --> 00:10:50,886
for these invalid values.


245
00:10:51,856 --> 00:10:53,016
Anywhere there's
a coordinate check


246
00:10:53,016 --> 00:10:56,616
for KCLLocationCoordinate2D,
that's a mouth full.


247
00:10:58,006 --> 00:11:00,636
And if there's a rectangle
involved check for CGRectNull.


248
00:11:01,036 --> 00:11:03,436
It's an indication that we
just couldn't do the conversion


249
00:11:04,026 --> 00:11:06,016
and so you can probably just
handle that by returning.


250
00:11:06,606 --> 00:11:12,466
So that's all the
API behavior changes.


251
00:11:13,956 --> 00:11:14,716
There wasn't much.


252
00:11:15,156 --> 00:11:17,786
If you recompile your app and
you test it you're going to find


253
00:11:17,786 --> 00:11:19,166
that it's mostly compatible.


254
00:11:19,726 --> 00:11:21,926
Most of the ways people are
using Map Kit just continue


255
00:11:21,926 --> 00:11:22,296
to work.


256
00:11:22,296 --> 00:11:24,616
You don't really have
to think about it.


257
00:11:24,706 --> 00:11:26,326
One thing that is
important to note is


258
00:11:26,326 --> 00:11:28,516
that annotations track the map.


259
00:11:28,516 --> 00:11:30,606
Annotation view moves
with the map.


260
00:11:30,606 --> 00:11:33,236
And that's the only reliable
way to get that behavior.


261
00:11:34,356 --> 00:11:35,646
So if you have some
UI that needs


262
00:11:35,646 --> 00:11:37,686
to track the map use
annotation views.


263
00:11:38,226 --> 00:11:42,066
The other thing to note is
that overlays like polylines


264
00:11:42,066 --> 00:11:43,956
and polygons will now
cross the Pacific Ocean


265
00:11:43,956 --> 00:11:45,306
when it makes sense.


266
00:11:46,436 --> 00:11:47,726
And lastly if you're using any


267
00:11:47,726 --> 00:11:50,566
of those geometry conversion
APIs just search in your code


268
00:11:50,566 --> 00:11:53,176
for those and make sure you're
checking for invalid values


269
00:11:54,336 --> 00:11:54,916
that come out of there.


270
00:11:54,966 --> 00:12:01,006
So that's the existing API.


271
00:12:01,006 --> 00:12:05,626
Now I want to talk about a new
API we've introduced called


272
00:12:05,626 --> 00:12:08,896
MKMapCamera that'll help you
take full advantage of 3D.


273
00:12:09,506 --> 00:12:15,276
To understand what a
map camera is it'll help


274
00:12:15,276 --> 00:12:17,166
to understand the coordinate
system that we're operating in.


275
00:12:18,136 --> 00:12:19,576
Here we see a map that
you're used to seeing.


276
00:12:19,816 --> 00:12:22,766
It's North at the top, South
at the bottom, West on the left


277
00:12:22,846 --> 00:12:23,586
and East on the right.


278
00:12:23,586 --> 00:12:26,986
And this is a 2D
coordinate system composed


279
00:12:26,986 --> 00:12:28,496
of an X-axis and a Y-axis.


280
00:12:28,526 --> 00:12:30,296
This is your high
school algebra.


281
00:12:30,896 --> 00:12:35,296
And when we introduce 3D we're
really introducing a third axis,


282
00:12:35,296 --> 00:12:37,186
a Z-axis that's coming
out of the maps.


283
00:12:37,186 --> 00:12:39,626
So like I said before
that 2D map still exists.


284
00:12:39,626 --> 00:12:41,406
There it is sitting at Z=0.


285
00:12:42,796 --> 00:12:45,096
And now we can talk about how
we position a camera inside


286
00:12:45,096 --> 00:12:46,426
of this 3D map.


287
00:12:48,196 --> 00:12:50,356
So our camera is made up
of four basic properties.


288
00:12:50,846 --> 00:12:52,836
The first property is
a center coordinate.


289
00:12:53,146 --> 00:12:56,176
That's a latitude and longitude
that is positioned on the ground


290
00:12:56,546 --> 00:12:59,456
and it's just like the center
coordinate API on MKMapView.


291
00:13:00,236 --> 00:13:02,216
So it's the point
that you want to see


292
00:13:02,216 --> 00:13:03,106
at the center of the screen.


293
00:13:03,676 --> 00:13:07,136
The second property
is an altitude.


294
00:13:07,826 --> 00:13:09,846
That describes how
high above the map


295
00:13:09,846 --> 00:13:12,586
in meters you want
your camera to float.


296
00:13:14,256 --> 00:13:15,746
Third property is heading.


297
00:13:16,556 --> 00:13:19,506
That's the cardinal direction
in which the camera faces.


298
00:13:19,506 --> 00:13:22,666
So is you set that to zero North
will be at the top of your map,


299
00:13:22,666 --> 00:13:25,856
and if you set it to 180 South
will be at the top of your map.


300
00:13:26,346 --> 00:13:28,786
And that's basically a rotation


301
00:13:28,786 --> 00:13:30,246
around that Z-axis
we introduced.


302
00:13:30,696 --> 00:13:34,136
And the last property is pitch.


303
00:13:34,636 --> 00:13:36,486
That describes where the
camera is looking relative


304
00:13:36,486 --> 00:13:36,996
to the ground.


305
00:13:36,996 --> 00:13:39,686
So if you set that to zero the
camera's going to look straight


306
00:13:39,686 --> 00:13:41,546
down and you're going to
get a normal map you're used


307
00:13:41,546 --> 00:13:44,576
to seeing, and as you increase
that value you're going


308
00:13:44,576 --> 00:13:46,176
to look more and more
towards the horizon.


309
00:13:47,106 --> 00:13:49,376
Now there are some pitches
that just don't make sense.


310
00:13:49,376 --> 00:13:51,116
Like it doesn't make sense to
look straight up at the sky.


311
00:13:51,556 --> 00:13:53,126
User's not going to know
how to get out of that view


312
00:13:53,126 --> 00:13:53,916
and look back at the map.


313
00:13:53,916 --> 00:13:57,466
So Map Kit is smart and
it just clamps that value


314
00:13:57,466 --> 00:13:58,506
to something reasonable for you.


315
00:13:58,506 --> 00:14:05,226
So here's the interfacing
code of the four properties


316
00:14:05,226 --> 00:14:06,676
that I just described;
center coordinate,


317
00:14:06,676 --> 00:14:07,946
altitude, heading, and pitch.


318
00:14:08,476 --> 00:14:11,406
And we also have a
convenience constructor


319
00:14:11,406 --> 00:14:13,396
that because sometimes these
four properties aren't the


320
00:14:13,396 --> 00:14:14,226
easiest things to work with.


321
00:14:14,226 --> 00:14:15,926
It takes a lot of
math to convert


322
00:14:15,926 --> 00:14:17,726
from the way you're thinking
about placing the camera


323
00:14:18,226 --> 00:14:19,226
into these four properties.


324
00:14:19,816 --> 00:14:21,986
So I want to introduce one
more way of thinking about how


325
00:14:21,986 --> 00:14:22,846
to position the camera.


326
00:14:24,016 --> 00:14:26,836
You might think about the point
that you want to look at that's


327
00:14:26,836 --> 00:14:29,146
on the ground, and
you might think


328
00:14:29,146 --> 00:14:32,176
about positioning the camera
at another location on the map


329
00:14:32,456 --> 00:14:33,486
with a latitude and longitude.


330
00:14:34,286 --> 00:14:36,316
And then you might think
about raising that camera


331
00:14:36,316 --> 00:14:38,886
up off the ground from
an altitude and looking


332
00:14:38,886 --> 00:14:40,896
at that other point
in the ground.


333
00:14:41,456 --> 00:14:44,426
Well given those three
properties Map Kit can compute a


334
00:14:44,426 --> 00:14:46,936
camera for you and so we
introduced this convenience


335
00:14:46,936 --> 00:14:50,956
constructor which
does the work for you.


336
00:14:50,956 --> 00:14:55,536
You chose the ground point, you
chose the point where you want


337
00:14:55,536 --> 00:14:57,976
to look from and
you pass that all


338
00:14:57,976 --> 00:14:58,916
through the convenience
constructor.


339
00:14:58,916 --> 00:15:00,956
Camera looking at center
coordinate give it the


340
00:15:00,956 --> 00:15:01,426
ground point.


341
00:15:02,056 --> 00:15:03,866
From EyeCoordinate; that's
the point on the ground


342
00:15:03,866 --> 00:15:06,836
that you want to look from and
then you choose an altitude.


343
00:15:06,836 --> 00:15:08,076
Here I'm choosing 100 meters.


344
00:15:09,416 --> 00:15:10,956
Now that I have a camera
I can simply set it


345
00:15:10,956 --> 00:15:12,726
on my map using the
set camera method.


346
00:15:13,736 --> 00:15:16,306
And with that you can create
an image like this pitched view


347
00:15:16,306 --> 00:15:17,156
of the Statue of Liberty.


348
00:15:17,656 --> 00:15:24,566
[ Applause ]


349
00:15:25,066 --> 00:15:28,126
So there's one thing
that you definitely want


350
00:15:28,126 --> 00:15:30,416
to be using MKMapCamera
for and that's saving


351
00:15:30,416 --> 00:15:32,306
and restoring the
state of your map view.


352
00:15:33,646 --> 00:15:34,686
When users leave your app


353
00:15:34,686 --> 00:15:36,026
and then they come
back they really want


354
00:15:36,026 --> 00:15:38,206
to be seeing exactly
what they left.


355
00:15:39,006 --> 00:15:40,656
And so MKMapCamera
makes that really easy


356
00:15:40,656 --> 00:15:42,476
by implementing NSSecureCoding.


357
00:15:43,686 --> 00:15:45,326
Here's a couple examples
of how to use it.


358
00:15:45,326 --> 00:15:48,246
First is saving state the
last is restoring state.


359
00:15:48,606 --> 00:15:51,326
This is saving.


360
00:15:51,326 --> 00:15:53,416
You can use any archiver
you have


361
00:15:53,416 --> 00:15:54,966
but here I'm using
NSKeyedArchiver


362
00:15:54,966 --> 00:15:56,996
and saving the camera
off to a file.


363
00:15:56,996 --> 00:16:00,116
And then to restore it its
one line of code again.


364
00:16:01,276 --> 00:16:03,646
Use unarchiveObjectFromFile:
from that same file


365
00:16:03,646 --> 00:16:05,226
and now I get my
MKMapCamera back.


366
00:16:05,846 --> 00:16:06,986
So you can use this again


367
00:16:06,986 --> 00:16:09,596
with any archiver you have
including the state restoration


368
00:16:09,656 --> 00:16:11,906
APIs in UI kit.


369
00:16:17,076 --> 00:16:19,596
That's exactly the
same API on OS X.


370
00:16:20,376 --> 00:16:22,136
So you don't have to
learn anything else.


371
00:16:22,926 --> 00:16:23,886
That's it.


372
00:16:24,386 --> 00:16:29,876
[ Applause ]


373
00:16:30,376 --> 00:16:32,956
So with that I want to show
you an example of MKMapCamera


374
00:16:32,956 --> 00:16:34,666
in action just so we
can understand how those


375
00:16:34,666 --> 00:16:35,276
properties work.


376
00:16:35,276 --> 00:16:38,026
And after that I want to show
you how you can use MKMapCamera


377
00:16:38,026 --> 00:16:39,446
to add a little bit
of flare to your app.


378
00:16:40,006 --> 00:16:41,506
So I have a very
simple app here.


379
00:16:41,506 --> 00:16:42,686
It's just a map view
in a window.


380
00:16:42,686 --> 00:16:45,306
And what I'm doing
is I'm setting it up


381
00:16:45,306 --> 00:16:48,746
and then anytime
the map moves --


382
00:16:48,746 --> 00:16:51,036
I'm just going to update another
window that's showing the


383
00:16:51,036 --> 00:16:51,766
properties of the map.


384
00:16:51,766 --> 00:16:53,516
And the way I'm doing
this is by looking


385
00:16:53,516 --> 00:16:54,646
at the description
of the camera.


386
00:16:54,646 --> 00:16:57,176
So if you're trying to debug
your app this is a great way


387
00:16:57,176 --> 00:16:57,676
to do that.


388
00:16:57,676 --> 00:16:59,426
If you think you're
setting the camera correctly


389
00:16:59,426 --> 00:17:01,496
and it's not showing what you
want just get the description


390
00:17:01,496 --> 00:17:02,436
from the camera and it's going


391
00:17:02,436 --> 00:17:04,076
to show you all the
properties of the camera.


392
00:17:04,205 --> 00:17:11,076
So, let's run this
-- here we go,


393
00:17:11,076 --> 00:17:12,846
Xcode has moved the
window to the back.


394
00:17:13,256 --> 00:17:17,016
Okay. So here we are
looking at Moscone


395
00:17:17,806 --> 00:17:21,965
and as I pan the map you can see
the center coordinates changing.


396
00:17:22,175 --> 00:17:22,796
It's updating.


397
00:17:23,356 --> 00:17:29,416
Okay. As I pitch the
map you can see now


398
00:17:29,416 --> 00:17:30,146
where the pitch is at zero.


399
00:17:30,146 --> 00:17:31,706
That means that we're looking
straight down at the map


400
00:17:32,406 --> 00:17:35,446
and as I increase my
pitch it's reflected here


401
00:17:35,446 --> 00:17:36,076
in the description.


402
00:17:36,076 --> 00:17:37,196
Now we're at 57 degrees.


403
00:17:37,446 --> 00:17:39,336
And this maximum amount
of pitch you can see


404
00:17:39,336 --> 00:17:41,266
as I pitched it kind of bumps.


405
00:17:41,456 --> 00:17:42,506
Now I'm at a maximum pitch.


406
00:17:43,026 --> 00:17:44,416
As I zoom in that changes.


407
00:17:45,006 --> 00:17:47,156
So now let's pitch some more.


408
00:17:47,966 --> 00:17:49,086
Now I'm at 69 degrees.


409
00:17:49,546 --> 00:17:51,606
So this is that kind of
limiting I was talking about.


410
00:17:53,666 --> 00:17:56,306
Now, I'm using a gesture here to
rotate the map and you can see


411
00:17:56,306 --> 00:17:57,886
that the heading is changing.


412
00:17:58,056 --> 00:17:59,416
So we're going toward South,


413
00:17:59,416 --> 00:18:01,166
it's getting closer
to 180 degrees.


414
00:18:01,166 --> 00:18:04,486
Now I'm going to use
these zoom controls here.


415
00:18:04,486 --> 00:18:05,366
Let me pitch out.


416
00:18:06,096 --> 00:18:08,326
Use these zoom controls
to zoom in and zoom out,


417
00:18:08,326 --> 00:18:09,666
and you can see the
altitudes changing.


418
00:18:09,936 --> 00:18:12,726
And what I want you to notice
here is that as I zoom in


419
00:18:12,726 --> 00:18:15,886
and zoom out by one zoom level
the altitude is roughly doubling


420
00:18:15,886 --> 00:18:16,386
or halving.


421
00:18:17,816 --> 00:18:20,996
And so you can use that in your
app to also reproduce zooming in


422
00:18:20,996 --> 00:18:24,716
and out by one zoom level just
half or double your altitude


423
00:18:24,716 --> 00:18:28,096
as appropriate and you'll
simulate zoom in and zoom


424
00:18:28,096 --> 00:18:29,346
out by one zoom level.


425
00:18:29,776 --> 00:18:32,246
Okay, so those are
the properties


426
00:18:32,246 --> 00:18:33,416
of MKMapCamera in action.


427
00:18:33,666 --> 00:18:34,186
Pretty simple.


428
00:18:35,266 --> 00:18:39,176
Now let's take a look at
how we can use MKMapCamera


429
00:18:39,176 --> 00:18:42,796
to make your app a little more
interesting when you're trying


430
00:18:42,796 --> 00:18:43,776
to move the map around.


431
00:18:44,896 --> 00:18:48,066
So here I have an app
that just does a search


432
00:18:48,066 --> 00:18:49,106
and shows the result for it.


433
00:18:49,236 --> 00:18:51,676
So let's just run this and
see what it looks like.


434
00:18:52,316 --> 00:18:57,756
Okay here we are in Moscone
and I've got a search box.


435
00:18:58,166 --> 00:19:00,966
Let's go to a park nearby
called Golden Gate Park,


436
00:19:02,686 --> 00:19:04,746
search for that and great.


437
00:19:04,746 --> 00:19:06,126
So I saw it, the search worked.


438
00:19:06,606 --> 00:19:09,046
The map view took me
there but you know


439
00:19:09,046 --> 00:19:11,886
that transition wasn't
doing a lot for me.


440
00:19:12,536 --> 00:19:14,226
You know I can't really
tell what's happening.


441
00:19:14,226 --> 00:19:16,586
Where am I going and
how do I get there


442
00:19:16,586 --> 00:19:19,326
and where is Golden Gate Park
relative to Moscone West?


443
00:19:19,326 --> 00:19:19,876
I have no idea.


444
00:19:20,286 --> 00:19:24,326
So let's look at our code
and see what's going on.


445
00:19:25,156 --> 00:19:27,526
So after I finish the search
I'm taking the top result


446
00:19:27,526 --> 00:19:29,186
and I'm adding an
annotation to the map


447
00:19:29,186 --> 00:19:31,086
that represents that
search result.


448
00:19:31,086 --> 00:19:33,976
And then I'm using this
new API that we introduced


449
00:19:33,976 --> 00:19:37,066
in iOS 7 called show Annotations
which is just going to show


450
00:19:37,066 --> 00:19:38,176
that annotation on the map.


451
00:19:38,176 --> 00:19:40,596
And so it's clearly
a no frills animation


452
00:19:40,596 --> 00:19:42,006
when I say animated yes.


453
00:19:42,406 --> 00:19:43,416
It just kind of took me there.


454
00:19:44,536 --> 00:19:47,076
So what I'd like to do is see
how I can make this a little bit


455
00:19:47,076 --> 00:19:47,876
better for my users.


456
00:19:47,876 --> 00:19:51,466
What I want to do is implement
a bit of a two stage hop.


457
00:19:51,466 --> 00:19:53,306
So I want the camera
to kind of lift out.


458
00:19:53,746 --> 00:19:55,676
Maybe I'll have it look
at where we're going to go


459
00:19:55,676 --> 00:19:56,646
and then zoom into there.


460
00:19:57,256 --> 00:20:00,266
And you know what, I want to
add a little bit of pitch too


461
00:20:00,266 --> 00:20:03,116
because I want the user to
see 3D buildings and want them


462
00:20:03,116 --> 00:20:04,106
to just think it's really cool.


463
00:20:04,906 --> 00:20:07,106
So how am I going to do this?


464
00:20:08,536 --> 00:20:10,886
Well the first thing is I
need some infrastructure


465
00:20:10,886 --> 00:20:13,326
to help me animate
through a series of cameras


466
00:20:13,326 --> 00:20:18,646
so let's write that code.


467
00:20:18,736 --> 00:20:19,106
All right.


468
00:20:19,106 --> 00:20:20,966
Let me get my notes up.


469
00:20:22,566 --> 00:20:26,466
Okay. It's really
easy to write code


470
00:20:26,466 --> 00:20:27,456
when you can just
drag it in [laughter].


471
00:20:29,366 --> 00:20:31,536
Okay, so I have a method
here called go to next camera


472
00:20:32,136 --> 00:20:34,936
and as the name implies it's
going to go to the next camera


473
00:20:34,936 --> 00:20:38,606
in the stack of cameras
I've created that are


474
00:20:38,606 --> 00:20:41,576
at key intervals between
the start position


475
00:20:42,136 --> 00:20:42,996
and an end position.


476
00:20:44,046 --> 00:20:46,406
So this method proceeds
as you may expect.


477
00:20:46,666 --> 00:20:48,076
If there's nothing left
on the stack we know


478
00:20:48,076 --> 00:20:49,916
that we're done animating
and so we simply return.


479
00:20:51,536 --> 00:20:54,836
Otherwise we pop the next camera
off of our stack and now we know


480
00:20:54,836 --> 00:20:56,266
that we want to animate
to that camera.


481
00:20:57,386 --> 00:20:59,246
And so here what we're seeing
is we're using the built


482
00:20:59,246 --> 00:21:01,086
in animation APIs
on our platform --


483
00:21:01,086 --> 00:21:03,416
on OS X that's
NSAnimationContext --


484
00:21:04,016 --> 00:21:05,176
to animate to the next camera.


485
00:21:05,176 --> 00:21:07,636
And the reason I can do that is
because the set camera method


486
00:21:07,636 --> 00:21:09,436
on MKMapView is animatable.


487
00:21:10,496 --> 00:21:12,836
And so I create my
NSAnimationContext


488
00:21:12,836 --> 00:21:14,036
and I say run animation group.


489
00:21:14,036 --> 00:21:15,456
That thing has a
block that comes back


490
00:21:15,456 --> 00:21:17,366
with an NSAnimationContext
object.


491
00:21:18,066 --> 00:21:20,016
And on that context
object I can tweak it.


492
00:21:20,016 --> 00:21:21,646
So I can tell it
a custom duration


493
00:21:21,646 --> 00:21:25,566
which I can compute based
on the transition I'm making


494
00:21:26,366 --> 00:21:28,206
and I can also choose
a timing function


495
00:21:28,206 --> 00:21:29,656
and here I'm using
ease in/ease out.


496
00:21:30,926 --> 00:21:32,946
Now I have to be
sure to select --


497
00:21:32,946 --> 00:21:36,456
to change allowed implicit
animation to yes to let the map


498
00:21:36,456 --> 00:21:39,546
in map view know that it
can pick up this animation


499
00:21:39,546 --> 00:21:40,876
and animate that camera change.


500
00:21:40,876 --> 00:21:43,686
So if you leave that out the
camera change won't animate.


501
00:21:44,026 --> 00:21:47,066
So just set that to yes.


502
00:21:47,676 --> 00:21:49,506
Okay now that I fired
off this animation to go


503
00:21:49,506 --> 00:21:50,666
to the next camera
I need to know


504
00:21:50,666 --> 00:21:53,686
when that animation completes
so that I can then animate


505
00:21:53,686 --> 00:21:54,946
to the next camera in our stack.


506
00:21:55,756 --> 00:21:57,936
Well you might think of using
the completion handler here


507
00:21:57,936 --> 00:21:59,706
but it's going to trip you up.


508
00:21:59,706 --> 00:22:00,236
I know it will.


509
00:22:00,916 --> 00:22:02,326
Don't use that completion
handler.


510
00:22:02,326 --> 00:22:06,166
Instead you need to use
MKMapViews delegate method


511
00:22:06,296 --> 00:22:08,436
which tells you when a
region change is completed.


512
00:22:09,336 --> 00:22:13,926
So let's drag in that API here.


513
00:22:14,406 --> 00:22:16,726
Drag it. Okay.


514
00:22:17,176 --> 00:22:19,316
That's map view region
did change animated,


515
00:22:19,776 --> 00:22:22,226
and this gets called anytime
a region change completes.


516
00:22:22,226 --> 00:22:23,676
So even when the user interacts


517
00:22:23,676 --> 00:22:25,236
with the map this
method gets called.


518
00:22:25,236 --> 00:22:27,416
But when the user
interacts with the map,


519
00:22:27,416 --> 00:22:28,646
the animated flags
going to be no.


520
00:22:29,616 --> 00:22:31,796
So we can use that flag
to tell if we're animating


521
00:22:31,796 --> 00:22:33,296
or if the user's been
interacting with our map.


522
00:22:33,296 --> 00:22:35,876
So I just checked if we're
animated then go ahead


523
00:22:35,876 --> 00:22:36,836
and go to our next camera.


524
00:22:37,476 --> 00:22:42,546
Okay. Now that we have the
infrastructure in place


525
00:22:42,546 --> 00:22:44,516
to animate between a series
of cameras we're ready


526
00:22:44,516 --> 00:22:46,336
to implement a particular
animation.


527
00:22:46,466 --> 00:22:49,126
So let's implement the
hop we were talking about.


528
00:22:49,126 --> 00:22:53,586
I'm going to implement a
method called go to coordinate.


529
00:22:53,586 --> 00:22:55,316
The reason is we're
doing a search,


530
00:22:55,956 --> 00:22:57,736
we're picking the top
result off that search


531
00:22:57,736 --> 00:23:00,416
and that search result lives at
a coordinate and we just want


532
00:23:00,416 --> 00:23:01,396
to go look at that coordinate.


533
00:23:02,376 --> 00:23:03,946
Okay. So the first
step here is to figure


534
00:23:03,946 --> 00:23:06,146
out where we want to go.


535
00:23:07,036 --> 00:23:08,476
I'm choosing a camera
that's looking


536
00:23:08,476 --> 00:23:13,116
at our search result coordinate
from directly above it


537
00:23:13,676 --> 00:23:16,266
at a height of 500 meters.


538
00:23:17,466 --> 00:23:19,536
And then what I'm doing
is I'm modifying the pitch


539
00:23:20,136 --> 00:23:21,026
to 55 degrees.


540
00:23:21,026 --> 00:23:22,946
So now we'll be tilted
a little bit,


541
00:23:22,946 --> 00:23:24,586
we'll be able to
see 3D buildings.


542
00:23:25,136 --> 00:23:27,726
Okay, what's next?


543
00:23:27,896 --> 00:23:29,626
Well I said we wanted
to do a two-stage hop


544
00:23:29,626 --> 00:23:33,856
so zoom out, stop, zoom in.


545
00:23:33,966 --> 00:23:36,046
So I need to find a
mid-point between the start


546
00:23:36,046 --> 00:23:37,956
and end coordinate
to animate to.


547
00:23:38,366 --> 00:23:39,816
So here I am I do a
little bit of math.


548
00:23:40,546 --> 00:23:42,536
Okay. I take our starting
point and our ending point


549
00:23:42,536 --> 00:23:44,226
and I find the average
point in the middle.


550
00:23:45,056 --> 00:23:48,636
I convert that to a coordinate.


551
00:23:49,156 --> 00:23:53,416
And then I pick some
arbitrary altitude.


552
00:23:53,416 --> 00:23:54,356
I know I want to zoom out


553
00:23:54,356 --> 00:23:56,426
and here I've just
picked a magic number four


554
00:23:56,426 --> 00:23:59,856
and I'm just going to take the
altitude we want to travel to,


555
00:24:00,426 --> 00:24:01,546
multiply it by four and that's


556
00:24:01,546 --> 00:24:04,866
where I want our
intermediate altitude to be.


557
00:24:05,316 --> 00:24:07,856
Okay now that I have those
properties I can create a


558
00:24:07,856 --> 00:24:08,716
midpoint camera.


559
00:24:09,486 --> 00:24:12,406
So I want it to look at
where we're going to go


560
00:24:13,546 --> 00:24:16,846
from the middle point between
the start and end points


561
00:24:18,196 --> 00:24:20,926
and I want it to sit
at our mid altitude.


562
00:24:20,926 --> 00:24:21,906
That's something high above.


563
00:24:23,066 --> 00:24:25,986
Now I just create our stack of
cameras so I add the mid camera


564
00:24:26,066 --> 00:24:29,346
and our endpoint camera and
I kick off the animation


565
00:24:29,346 --> 00:24:30,746
by calling go to next camera.


566
00:24:32,426 --> 00:24:34,346
Okay, so that's our
animation and now we just want


567
00:24:34,346 --> 00:24:36,006
to replace this animation
we don't


568
00:24:36,646 --> 00:24:42,066
like with the animation
we do like.


569
00:24:43,186 --> 00:24:45,676
All right, let's
see how it works.


570
00:24:46,236 --> 00:24:49,776
All right, here we are
at Moscone West again.


571
00:24:50,286 --> 00:24:52,076
Now let's type Golden Gate Park.


572
00:24:52,666 --> 00:24:55,956
That's pretty sweet [laughter].


573
00:24:56,466 --> 00:24:58,266
[applause] I like that a lot.


574
00:25:02,326 --> 00:25:03,806
The whole map swings around.


575
00:25:04,706 --> 00:25:05,876
Let's go back to Moscone.


576
00:25:07,056 --> 00:25:08,916
That's awesome and look at
those 3D buildings pop up.


577
00:25:08,916 --> 00:25:08,983
[ Laughter & Applause ]


578
00:25:08,983 --> 00:25:16,586
Okay, so now let's do a
little bit more testing.


579
00:25:16,586 --> 00:25:18,446
I mean I wish we were done and
we could just ship this thing,


580
00:25:18,446 --> 00:25:21,456
but I'm pretty sure that hop
doesn't work all the time.


581
00:25:21,456 --> 00:25:22,936
So let's try going
to the Metreon.


582
00:25:22,936 --> 00:25:23,976
That's right across the street.


583
00:25:24,486 --> 00:25:27,596
Yeah, that seems a
little bit heavy.


584
00:25:28,246 --> 00:25:30,856
Now Target which
is right next door.


585
00:25:30,856 --> 00:25:32,596
You know I'm pretty
sure if a user says


586
00:25:32,596 --> 00:25:34,636
that they would wonder like,
"Why are we zooming out


587
00:25:34,636 --> 00:25:35,956
and zooming in and
tilting and..."


588
00:25:36,216 --> 00:25:37,016
It's just too much.


589
00:25:37,566 --> 00:25:39,886
And let's try going
really far away.


590
00:25:39,886 --> 00:25:40,846
Let's go to New York City.


591
00:25:41,466 --> 00:25:44,366
I don't even know
what happened there.


592
00:25:44,366 --> 00:25:46,256
I think New York is
south of San Francisco.


593
00:25:46,256 --> 00:25:47,066
I'm not really sure.


594
00:25:48,296 --> 00:25:50,176
Okay. Clearly one kind


595
00:25:50,176 --> 00:25:51,946
of transition doesn't
necessarily work


596
00:25:52,536 --> 00:25:53,426
for all distances.


597
00:25:54,556 --> 00:25:57,746
So let's modify our program so
that we can account for that.


598
00:25:58,366 --> 00:25:59,446
Okay let's stop this.


599
00:25:59,976 --> 00:26:03,476
All right, the first
thing to figure


600
00:26:03,476 --> 00:26:05,646
out is how do we build a filter?


601
00:26:06,176 --> 00:26:07,776
So I think what I
want to do is figure


602
00:26:07,776 --> 00:26:10,356
out what those distances are and
then build a filter around that.


603
00:26:10,356 --> 00:26:12,446
So let's go to our go
to coordinate method.


604
00:26:13,056 --> 00:26:14,056
This is kind of a funnel point


605
00:26:14,056 --> 00:26:15,586
where we can start looking
at what's happening.


606
00:26:15,906 --> 00:26:18,476
And let's drop in some
code here to figure


607
00:26:18,476 --> 00:26:22,036
out how far we're
trying to travel.


608
00:26:23,226 --> 00:26:27,456
Okay. So I pull the camera off
the map view before we begin the


609
00:26:27,456 --> 00:26:30,256
animation and now I have a start
camera where we're starting from


610
00:26:30,666 --> 00:26:32,276
and I've already computed
an end point camera


611
00:26:32,806 --> 00:26:35,556
and using properties on those
cameras I can populate two CL


612
00:26:35,556 --> 00:26:36,496
location objects.


613
00:26:37,476 --> 00:26:40,436
One for the start location
and one for the end location.


614
00:26:41,646 --> 00:26:44,616
And once I have two CL location
objects I can use the more API


615
00:26:44,616 --> 00:26:47,116
on CL location to
get the distance


616
00:26:47,116 --> 00:26:47,896
between those two points.


617
00:26:47,896 --> 00:26:49,756
This is the distance
from location API.


618
00:26:49,756 --> 00:26:52,086
And now I'm just
going to log that out


619
00:26:52,726 --> 00:26:54,616
so we can inspect how
far we're traveling


620
00:26:54,616 --> 00:26:56,126
and then decide what we
want to do from there.


621
00:26:56,126 --> 00:26:58,886
So here we are back at Moscone
West after I ran the project.


622
00:26:59,356 --> 00:27:05,746
And let's go bring up our
console, switch back to our app.


623
00:27:06,266 --> 00:27:08,396
Let's go to Golden Gate Park.


624
00:27:08,396 --> 00:27:09,156
We know we like that.


625
00:27:09,676 --> 00:27:13,096
Okay, so that's about
7,000 meters


626
00:27:13,096 --> 00:27:14,166
and that feels pretty good.


627
00:27:14,196 --> 00:27:16,026
Let's go back to Moscone west


628
00:27:16,026 --> 00:27:18,536
and we can try a
smaller animation.


629
00:27:19,986 --> 00:27:21,316
Okay, let's go to the Metreon.


630
00:27:21,616 --> 00:27:24,426
All right, that's
just 161 meters.


631
00:27:24,426 --> 00:27:26,226
That's way shorter
than 7,000 meters.


632
00:27:26,586 --> 00:27:28,216
That's good because it
means it's easy to filter.


633
00:27:29,286 --> 00:27:30,956
And Target is just 60 meters.


634
00:27:31,716 --> 00:27:32,736
Okay how about New York City?


635
00:27:34,586 --> 00:27:35,836
Some huge number.


636
00:27:35,836 --> 00:27:37,386
I think that's like
4 million meters.


637
00:27:37,386 --> 00:27:38,786
Okay that's a long way away.


638
00:27:39,446 --> 00:27:40,056
So this is great.


639
00:27:40,056 --> 00:27:41,966
This means that we can
filter between these.


640
00:27:42,036 --> 00:27:44,136
But that's kind of
an extreme example.


641
00:27:44,136 --> 00:27:46,866
Let's try something in between
Dallas and San Francisco


642
00:27:46,866 --> 00:27:48,386
or New York and San Francisco.


643
00:27:48,386 --> 00:27:50,956
Let's try Dallas.


644
00:27:51,096 --> 00:27:51,926
2 million meters.


645
00:27:52,976 --> 00:27:54,096
That also didn't feel very good.


646
00:27:54,656 --> 00:27:57,606
Okay so I think we have a basis
on which we can start filtering.


647
00:27:57,606 --> 00:28:01,316
So let's go back and figure
out how we can filter this.


648
00:28:01,316 --> 00:28:05,626
well right now our animation is
kind of stuck inside of this go


649
00:28:05,626 --> 00:28:07,116
to coordinate method
so I think what I want


650
00:28:07,116 --> 00:28:09,066
to do is refactor
this to make room


651
00:28:09,996 --> 00:28:11,716
for having a few
different animations.


652
00:28:11,716 --> 00:28:13,526
So let's to drag in
a new method here.


653
00:28:14,576 --> 00:28:16,716
This is called perform
short camera animation


654
00:28:16,716 --> 00:28:19,216
and all this does is
produce the same animation


655
00:28:19,216 --> 00:28:19,936
that we've already built.


656
00:28:19,936 --> 00:28:22,806
So this is exactly the same code
we just wrote and what I'm going


657
00:28:22,806 --> 00:28:27,116
to do is delete the code
that is inside the go


658
00:28:27,116 --> 00:28:27,846
to coordinate method.


659
00:28:29,046 --> 00:28:31,406
Okay. Now that we have
that I think I want


660
00:28:31,406 --> 00:28:33,316
to do a different
kind of animation


661
00:28:33,316 --> 00:28:35,116
when we're going all the
way to New York City.


662
00:28:35,116 --> 00:28:38,346
I think what would be better is
if we zoomed out and then panned


663
00:28:38,346 --> 00:28:39,976
over to New York City
and then zoomed in.


664
00:28:40,006 --> 00:28:42,866
I think that'll produce
something that's a little bit


665
00:28:42,866 --> 00:28:44,656
more logical to the user.


666
00:28:44,656 --> 00:28:47,476
So let's drag in a method here;


667
00:28:48,176 --> 00:28:51,706
it's called perform
long camera animation


668
00:28:51,706 --> 00:28:54,236
and that's the animation we want
to use for long transitions.


669
00:28:54,926 --> 00:28:55,606
So how does it work?


670
00:28:56,986 --> 00:28:59,256
Well we get the starting
camera off of the map view.


671
00:28:59,526 --> 00:29:01,646
Now we have a start and end
point just like we were using


672
00:29:01,646 --> 00:29:03,146
to inspect the distance
we were traveling.


673
00:29:04,386 --> 00:29:08,186
And again I can go compute the
distance between the two points


674
00:29:08,416 --> 00:29:11,996
and now I kind of want to just
use that distance to figure


675
00:29:11,996 --> 00:29:14,136
out how far above the
map I want to zoom out.


676
00:29:14,136 --> 00:29:16,756
Because if you're
going to let's say L.A.


677
00:29:16,756 --> 00:29:18,306
from San Francisco
it's pretty different


678
00:29:18,306 --> 00:29:19,266
than going to New York City.


679
00:29:19,266 --> 00:29:21,276
So maybe I don't want to zoom
out as far if I'm just going


680
00:29:21,276 --> 00:29:24,566
to L.A. Okay, so what I'm going
to do here is the naive thing.


681
00:29:24,566 --> 00:29:26,286
I'm just going to use the
distance between the two points


682
00:29:26,696 --> 00:29:29,216
to choose -- to lift
myself up off the map.


683
00:29:29,216 --> 00:29:31,306
So I'm just going to
turn that on its side


684
00:29:31,786 --> 00:29:33,586
and lift off the map
by the same distance.


685
00:29:34,826 --> 00:29:37,766
So now I need to make
two midpoint cameras.


686
00:29:37,866 --> 00:29:42,256
So that means I have now two
key intervals between the start


687
00:29:42,256 --> 00:29:43,616
and end where I want
to animate through.


688
00:29:44,716 --> 00:29:46,176
So I go ahead and
make those cameras.


689
00:29:46,176 --> 00:29:49,546
The first one is looking
at our start point and from


690
00:29:49,806 --> 00:29:51,876
above the start point.


691
00:29:51,876 --> 00:29:53,086
So I'm just zooming out.


692
00:29:53,186 --> 00:29:58,906
I'm going to zoom out to our
extreme altitude and then I want


693
00:29:58,906 --> 00:30:00,386
to pan over to our destination.


694
00:30:00,386 --> 00:30:02,206
So now I have a second
camera and it's going to look


695
00:30:02,206 --> 00:30:05,616
at our second coordinate, our
end coordinate from directly


696
00:30:05,616 --> 00:30:07,316
above it at the same
altitude so now


697
00:30:07,316 --> 00:30:08,636
that means I'm just
going to pan over.


698
00:30:10,536 --> 00:30:12,746
Then just like out short
animation I create a stack


699
00:30:12,746 --> 00:30:13,346
of cameras.


700
00:30:13,896 --> 00:30:16,966
So our first camera, second
camera and then the end camera


701
00:30:16,966 --> 00:30:19,576
and then I can just call our
infrastructure that will animate


702
00:30:19,576 --> 00:30:21,156
through those cameras
go to next camera.


703
00:30:23,516 --> 00:30:25,236
Okay, so what's left
is back in my go


704
00:30:25,236 --> 00:30:27,096
to coordinate method
I want to filter


705
00:30:27,096 --> 00:30:31,396
out which animation I'm going
to use based on the distance.


706
00:30:31,396 --> 00:30:32,716
So we've already
computed the distance.


707
00:30:33,456 --> 00:30:34,716
I'm going to drag in some code


708
00:30:35,336 --> 00:30:38,836
that filters based
on that distance.


709
00:30:39,736 --> 00:30:41,576
Here it is, just a
bunch of if statements.


710
00:30:41,766 --> 00:30:43,226
If the distance is less


711
00:30:43,226 --> 00:30:45,356
than 2,500 meters I think I'm
just going to use the built


712
00:30:45,356 --> 00:30:47,966
in MapKit animation we know
as a no frills animation


713
00:30:47,966 --> 00:30:50,436
and I think that's appropriate
for really short distances.


714
00:30:50,976 --> 00:30:52,936
For medium size differences
I think I want


715
00:30:52,936 --> 00:30:55,766
to use our hop animation so
I chose a filtering range


716
00:30:55,766 --> 00:30:59,166
of 50,000 meters and then
for anything else I consider


717
00:30:59,166 --> 00:31:00,386
that pretty long
and I think I want


718
00:31:00,386 --> 00:31:02,796
to use our multi-stage
transition


719
00:31:03,406 --> 00:31:04,926
to give the user a
little bit more context.


720
00:31:05,436 --> 00:31:08,576
Okay. Let's run this
and see how it works.


721
00:31:09,186 --> 00:31:11,856
Cool, so here's Moscone West.


722
00:31:11,856 --> 00:31:14,856
Let's make sure our Golden Gate
Park transition still works.


723
00:31:15,296 --> 00:31:17,106
Yeah it does.


724
00:31:17,856 --> 00:31:20,226
Nice. All right, let's
go back to Moscone West


725
00:31:20,226 --> 00:31:22,196
and let's test the
Metreon one more time.


726
00:31:22,196 --> 00:31:25,256
So here we are at Moscone West.


727
00:31:25,346 --> 00:31:26,256
Let's go to the Metreon.


728
00:31:27,786 --> 00:31:28,426
Yeah that's great.


729
00:31:28,626 --> 00:31:31,046
For a short transition I mean I
think that's really appropriate.


730
00:31:31,676 --> 00:31:33,086
Now let's try New York City.


731
00:31:36,836 --> 00:31:38,146
I think that's much better.


732
00:31:38,646 --> 00:31:44,286
[ Applause ]


733
00:31:44,786 --> 00:31:45,986
Now the user knows
what's going on.


734
00:31:45,986 --> 00:31:48,946
Right? We saw that New York City
was to the East of San Francisco


735
00:31:48,946 --> 00:31:52,696
and if I go back to San
Francisco, yeah great.


736
00:31:52,696 --> 00:31:56,166
I'm still in the U.S. and I
went west to get San Francisco


737
00:31:56,166 --> 00:31:58,316
from New York City and
that all makes sense.


738
00:31:58,726 --> 00:31:59,616
Let's try Tokyo.


739
00:31:59,616 --> 00:32:00,466
That's really far away.


740
00:32:03,126 --> 00:32:04,876
Boom, all over the
Pacific Ocean.


741
00:32:04,956 --> 00:32:07,096
And you notice how instead
of going the long way


742
00:32:07,096 --> 00:32:09,446
around the world MapKit
was smart enough to go


743
00:32:09,446 --> 00:32:14,086
over the Pacific Ocean which is
how a plane might go [laughter].


744
00:32:14,316 --> 00:32:16,266
Great, so that's all
I'm going to do today


745
00:32:16,266 --> 00:32:17,886
but I think you can
see that there's a lot


746
00:32:17,886 --> 00:32:21,256
of opportunity here for you to
play with MKMapCamera and play


747
00:32:21,256 --> 00:32:22,386
with the transitions
in your app,


748
00:32:22,736 --> 00:32:24,716
and make your app feel
a little bit different


749
00:32:24,716 --> 00:32:25,946
from all the other
apps out there.


750
00:32:26,006 --> 00:32:27,986
So I hope you'll take
advantage of that.


751
00:32:28,826 --> 00:32:30,326
So that was cinematic
camera motion.


752
00:32:31,196 --> 00:32:31,716
What did we learn?


753
00:32:33,086 --> 00:32:34,716
We saw that the crux of this is


754
00:32:34,716 --> 00:32:38,296
that MKMapView's method
setCamera: is animatable.


755
00:32:38,526 --> 00:32:41,886
So you can call that within
the normal animation context


756
00:32:41,886 --> 00:32:42,516
on your platform.


757
00:32:42,516 --> 00:32:44,716
So if you're on iOS
using UI view animations


758
00:32:44,936 --> 00:32:47,106
and in OS X using
NSAnimationContext.


759
00:32:47,596 --> 00:32:51,826
We also saw that we should
use map view region did


760
00:32:51,826 --> 00:32:52,716
change animated.


761
00:32:53,106 --> 00:32:54,616
We want to use that
call back to figure


762
00:32:54,616 --> 00:32:56,296
out when an animation
has completed.


763
00:32:56,706 --> 00:32:59,746
Don't use the completion
handler that's part of the built


764
00:32:59,746 --> 00:33:00,616
in animation framework.


765
00:33:01,116 --> 00:33:04,596
And lastly we saw
that it's pretty clear


766
00:33:04,596 --> 00:33:06,466
that there isn't
necessarily one answer


767
00:33:06,466 --> 00:33:07,626
for every type of transition.


768
00:33:07,626 --> 00:33:09,956
Right? If we're just going a
few meters you really don't want


769
00:33:09,956 --> 00:33:11,256
to be zooming all the way out


770
00:33:11,256 --> 00:33:12,516
and then zooming
all the way back in.


771
00:33:12,556 --> 00:33:14,196
It's a little bit long winded.


772
00:33:15,256 --> 00:33:16,466
So play with it.


773
00:33:18,916 --> 00:33:20,396
So that's MKMapCamera.


774
00:33:21,446 --> 00:33:24,436
It's the one API you need to
know to take advantage of 3D.


775
00:33:24,436 --> 00:33:25,446
There isn't anything else.


776
00:33:26,576 --> 00:33:28,536
At minimum you should
be using it to save


777
00:33:28,536 --> 00:33:30,346
and restore the viewport
state for your map view.


778
00:33:31,746 --> 00:33:39,346
And clearly you can use it to
add a special touch to your app.


779
00:33:39,616 --> 00:33:41,026
Now sometimes rotation


780
00:33:41,776 --> 00:33:44,036
and pitching may not be the
right answer for your app.


781
00:33:44,666 --> 00:33:46,796
If you're showing something
like weather data on top


782
00:33:46,796 --> 00:33:49,856
of a map maybe that looks just
really weird if you're pitched


783
00:33:49,856 --> 00:33:51,716
and buildings are showing
through clouds or something.


784
00:33:53,436 --> 00:33:56,006
Well in previous iOS releases
we've given you the control


785
00:33:56,006 --> 00:33:58,356
to disable and enable
gestures selectively


786
00:33:58,976 --> 00:34:00,956
and in iOS 7 we're
doing the same thing.


787
00:34:00,956 --> 00:34:02,996
We've introduced rotate
enabled and pitch enabled


788
00:34:02,996 --> 00:34:04,336
so you can disabled
these properties


789
00:34:04,376 --> 00:34:07,096
if that's what you
need for your app.


790
00:34:07,716 --> 00:34:10,295
Now as I mentioned these are
all on by default in iOS 7.


791
00:34:11,045 --> 00:34:13,786
That's because users who come
out of the map app, Maps.app


792
00:34:14,226 --> 00:34:16,766
and see a map view in your
app really expect to be able


793
00:34:16,766 --> 00:34:19,235
to rotate it and pitch it just
like they could in the Maps.app.


794
00:34:20,096 --> 00:34:22,396
So think carefully
before you disable them.


795
00:34:24,146 --> 00:34:25,936
Now some devices don't
support pitching.


796
00:34:26,846 --> 00:34:29,286
And in that case the pitch
enabled property will always


797
00:34:29,286 --> 00:34:29,815
return no.


798
00:34:30,696 --> 00:34:33,156
So that means if you have a
feature of your app that depends


799
00:34:33,156 --> 00:34:37,186
on pitching just be
sure to enable that only


800
00:34:37,326 --> 00:34:39,116
if the pitching enabled
property returns yes.


801
00:34:43,576 --> 00:34:44,706
So that's all the new API.


802
00:34:44,706 --> 00:34:45,585
That's 3D.


803
00:34:46,966 --> 00:34:52,196
Now I want to talk to you about
producing snapshots of a map.


804
00:34:52,426 --> 00:34:53,686
Now why would you
want to do this?


805
00:34:53,686 --> 00:34:55,775
Why do you want to create
a static snapshot of a map?


806
00:34:56,366 --> 00:34:59,756
Well, there's some cases where
a fully interactive map just


807
00:34:59,756 --> 00:35:00,626
doesn't make sense.


808
00:35:01,006 --> 00:35:04,196
You may have seen an app like
this; it's a table view app.


809
00:35:04,706 --> 00:35:08,536
You're scrolling it, it's full
of MKMapViews and its jittery,


810
00:35:08,536 --> 00:35:11,226
the map is loading in pieces
and it doesn't quite feel right.


811
00:35:11,226 --> 00:35:13,596
I mean it's just not what
you want your users to see.


812
00:35:14,526 --> 00:35:18,756
Well with Snapshots you can
create maps images off the


813
00:35:18,756 --> 00:35:19,236
main thread.


814
00:35:19,446 --> 00:35:21,066
You get smooth table
view scrolling


815
00:35:21,066 --> 00:35:22,866
and the whole map
comes in at once.


816
00:35:22,866 --> 00:35:25,176
And because it's just an image
you can do all the effect you


817
00:35:25,176 --> 00:35:27,826
want to do with images like
fade it in or apply filters


818
00:35:27,826 --> 00:35:29,106
or anything like that.


819
00:35:30,636 --> 00:35:31,736
The other reason you may want


820
00:35:31,736 --> 00:35:34,366
to use them is the same reason
we use them in the Maps.app.


821
00:35:34,936 --> 00:35:37,046
To implement a printing
feature in your app.


822
00:35:39,686 --> 00:35:40,826
So how do you create a Snapshot?


823
00:35:41,176 --> 00:35:42,226
It's just three steps.


824
00:35:43,536 --> 00:35:46,906
The first step is create an
options object and configure it.


825
00:35:47,716 --> 00:35:49,986
Second step is to create
a snapshot or object


826
00:35:50,536 --> 00:35:52,366
and give it the options
object you configured.


827
00:35:52,856 --> 00:35:57,926
And second step is to kick off
the asynch snapshot task wait


828
00:35:57,926 --> 00:35:58,556
for it to complete.


829
00:35:59,056 --> 00:36:02,936
The options object has
a few properties on it


830
00:36:02,936 --> 00:36:03,796
that you need to configure.


831
00:36:04,206 --> 00:36:06,576
The first one is the
image size is the size


832
00:36:06,576 --> 00:36:07,596
of the image you want.


833
00:36:08,706 --> 00:36:10,896
Then you can tell it which part
of the map you want to see.


834
00:36:10,896 --> 00:36:13,176
You can use the same
properties you're used to using


835
00:36:13,176 --> 00:36:16,456
on MKMapView, that's
setVisibleMapRec and setRegion.


836
00:36:17,086 --> 00:36:19,786
You can also use a camera which
means you can produce pitched


837
00:36:19,786 --> 00:36:21,116
and rotated snapshots.


838
00:36:21,666 --> 00:36:24,266
And then you can
specify a map type


839
00:36:24,266 --> 00:36:25,666
and we support all
the same map types


840
00:36:25,666 --> 00:36:26,886
that we support in MKMapView.


841
00:36:26,886 --> 00:36:29,046
So that's standard,
satellite and hybrid.


842
00:36:29,616 --> 00:36:33,936
And lastly on iOS only you
need to specify a scale.


843
00:36:34,796 --> 00:36:37,906
The scale property lets you
support retina displays as well


844
00:36:37,906 --> 00:36:38,896
as non-retina displays.


845
00:36:38,896 --> 00:36:41,106
So for non-retina displays
you want to set this to 1,


846
00:36:41,106 --> 00:36:43,126
for retina displays you
want to set it to 2.


847
00:36:43,126 --> 00:36:45,716
You can always grab
this off of the view


848
00:36:45,716 --> 00:36:46,626
that you're about to display.


849
00:36:46,626 --> 00:36:48,496
So [[UIScreen mainScreen]
scale] will give you an


850
00:36:48,496 --> 00:36:49,246
appropriate scale.


851
00:36:49,556 --> 00:36:55,246
So here's what the
code looks like.


852
00:36:56,336 --> 00:36:57,346
There's step one.


853
00:36:57,346 --> 00:36:58,596
We created our options object.


854
00:36:59,926 --> 00:37:02,346
Here I'm setting it to
a size of 512 points


855
00:37:02,346 --> 00:37:04,286
by 512 points, a square image.


856
00:37:05,556 --> 00:37:07,426
Then on iOS I need
to set a scale here.


857
00:37:07,426 --> 00:37:08,806
I'm just using the
main screen scale.


858
00:37:08,806 --> 00:37:11,266
That's the scale of the
display that's on your device.


859
00:37:11,726 --> 00:37:14,216
So if you intend on showing this
image on a different screen,


860
00:37:14,216 --> 00:37:17,156
maybe it's an AirPlay screen,
you want to make sure to set


861
00:37:17,156 --> 00:37:19,176
that scale to what's
appropriate for that screen.


862
00:37:19,176 --> 00:37:21,666
You can use the UIScreen
API to figure that out.


863
00:37:22,816 --> 00:37:24,876
Then I'm setting a
camera to choose what part


864
00:37:24,876 --> 00:37:25,766
of the map I want to see.


865
00:37:26,936 --> 00:37:28,506
Then I'm setting
MKMapTypeStandard.


866
00:37:29,466 --> 00:37:32,106
Step two I created my Snapshot.


867
00:37:32,206 --> 00:37:33,926
Thats alloc init I think
you can all do that.


868
00:37:34,566 --> 00:37:38,316
And the last step is
kick off async task


869
00:37:38,316 --> 00:37:39,336
and wait for it to complete.


870
00:37:40,356 --> 00:37:41,996
MapKit's going to
call your block back


871
00:37:41,996 --> 00:37:44,396
when the async task is complete
and your Snapshot is ready


872
00:37:44,396 --> 00:37:45,356
or if we get an error.


873
00:37:46,446 --> 00:37:49,066
Generating an image of a map
just like using MKMapView


874
00:37:49,066 --> 00:37:50,896
or the Maps.app requires
a network connection


875
00:37:50,896 --> 00:37:53,196
so that can obviously
fail if you're


876
00:37:53,196 --> 00:37:54,136
out in the boonies somewhere.


877
00:37:55,416 --> 00:37:57,206
So be sure to check for an error


878
00:37:57,206 --> 00:37:58,636
and if there is an error
have a backup plan.


879
00:37:58,636 --> 00:38:01,116
Have a placeholder image or
something you can show your user


880
00:38:01,116 --> 00:38:02,606
in case the map wasn't
able to load.


881
00:38:03,016 --> 00:38:05,806
But if you don't have an error
object then we know the Snapshot


882
00:38:05,806 --> 00:38:07,956
was generated successfully
and the image


883
00:38:07,956 --> 00:38:11,066
of the map itself is sitting
inside the MKMapSnapshot object


884
00:38:11,336 --> 00:38:12,326
under the image property.


885
00:38:16,376 --> 00:38:17,536
So I talked about printing.


886
00:38:18,596 --> 00:38:20,736
If you're implementing
printing you might find yourself


887
00:38:20,736 --> 00:38:21,906
implementing a method like this.


888
00:38:21,906 --> 00:38:24,886
drawContentForPageAtIndexInRect.


889
00:38:26,526 --> 00:38:27,976
So okay, you need a Snapshot.


890
00:38:28,156 --> 00:38:29,386
Aroon told you that on stage.


891
00:38:29,976 --> 00:38:31,726
So step one, create
your options.


892
00:38:31,726 --> 00:38:33,266
Step two, create your snapshot.


893
00:38:33,266 --> 00:38:35,046
Step three, kick
off that async task.


894
00:38:35,046 --> 00:38:39,116
So the thing about
printing is that you have


895
00:38:39,116 --> 00:38:41,926
to provide all the content for
your print out synchronously.


896
00:38:42,266 --> 00:38:44,196
You need to draw all that
right there in that method


897
00:38:44,196 --> 00:38:47,556
but if you have to kick off an
async task how are you going


898
00:38:48,136 --> 00:38:49,266
to do that.


899
00:38:49,266 --> 00:38:52,126
Well, the steps for
producing a map snapshot


900
00:38:52,126 --> 00:38:53,486
for printing are a
little bit different.


901
00:38:53,486 --> 00:38:54,366
A little bit longer.


902
00:38:55,836 --> 00:38:57,046
But it's not too hard.


903
00:38:57,376 --> 00:38:59,206
The first step is
configure options just


904
00:38:59,206 --> 00:39:00,196
like you normally would.


905
00:39:01,056 --> 00:39:02,726
Create a snapshot just
like you normally would.


906
00:39:03,706 --> 00:39:05,676
The third step is to
create a semaphore.


907
00:39:05,806 --> 00:39:08,016
This is something that's
going to allow us to wait


908
00:39:08,426 --> 00:39:09,886
for a resource to
become available.


909
00:39:10,366 --> 00:39:13,446
The third step is you need
to pick a dispatch queue


910
00:39:13,446 --> 00:39:14,866
where you want to
receive a call back


911
00:39:15,426 --> 00:39:17,676
when the snapshot is
done being generated.


912
00:39:18,196 --> 00:39:20,196
That's because you're going to
block the thread that you're on


913
00:39:20,196 --> 00:39:22,626
and if you block that thread
while waiting for something


914
00:39:22,626 --> 00:39:24,856
to come back on that thread I
think we all know that's called


915
00:39:24,856 --> 00:39:25,406
a deadlock.


916
00:39:25,676 --> 00:39:28,316
You don't want that.


917
00:39:28,366 --> 00:39:30,016
Then you create a couple
of result variables


918
00:39:30,016 --> 00:39:32,196
where you can stash the
results of the async tasks


919
00:39:32,196 --> 00:39:33,996
to use after it's generated.


920
00:39:34,846 --> 00:39:37,726
Then you start the snapshotter
as usual and then wait


921
00:39:37,726 --> 00:39:38,746
for that snapshotter
to complete.


922
00:39:38,746 --> 00:39:40,826
So let's look at some code.


923
00:39:41,226 --> 00:39:41,596
Here it is.


924
00:39:42,656 --> 00:39:44,876
Let's just assume we
have the options object


925
00:39:44,876 --> 00:39:46,166
in the snapshotter
object that we created


926
00:39:46,166 --> 00:39:47,166
in the last few slides.


927
00:39:47,476 --> 00:39:49,886
The only difference
is that for printing


928
00:39:50,116 --> 00:39:52,866
on iOS you probably want
to set the scale to 2.


929
00:39:53,436 --> 00:39:55,706
That's because most printers
are fairly high resolution


930
00:39:55,706 --> 00:39:57,776
and so you want kind of
retina quality graphics


931
00:39:57,776 --> 00:39:58,276
for your printout.


932
00:39:58,276 --> 00:40:02,196
All right, into the differences.


933
00:40:02,676 --> 00:40:05,576
The first step we're doing here
is using dispatch semaphore APIs


934
00:40:05,756 --> 00:40:07,976
to create and initialize
the semaphore to zero.


935
00:40:08,416 --> 00:40:09,686
The reason we initialize
it to zero is


936
00:40:09,686 --> 00:40:11,236
because we don't have
any resources yet.


937
00:40:11,236 --> 00:40:13,586
We need to wait for a
resource to become available.


938
00:40:14,396 --> 00:40:15,396
Then we need to pick a queue.


939
00:40:15,826 --> 00:40:17,526
Generally any global
queue will work


940
00:40:17,526 --> 00:40:19,816
so you can use the get
dispatch global queue API


941
00:40:20,096 --> 00:40:21,166
to pick a queue to run on.


942
00:40:21,166 --> 00:40:23,136
A high, or low, or
medium priority queue.


943
00:40:23,136 --> 00:40:26,576
Then we can create a
couple of variables


944
00:40:26,576 --> 00:40:27,786
where we want to
stash the results.


945
00:40:27,786 --> 00:40:29,756
We need to use the
block modifiers here


946
00:40:29,756 --> 00:40:31,386
because we're going to
modify these variables inside


947
00:40:31,386 --> 00:40:32,406
of a block.


948
00:40:33,586 --> 00:40:36,166
So we need a place to stash
the map Snapshot and a place


949
00:40:36,166 --> 00:40:37,966
to stash the error just
in case there is one.


950
00:40:38,406 --> 00:40:42,396
Then we kick off our
async task using a variant


951
00:40:42,396 --> 00:40:42,986
of the start API.


952
00:40:42,986 --> 00:40:45,466
Here we're using the --
this is the startWithQueue:


953
00:40:45,466 --> 00:40:48,156
API that lets us
tell the snapshotter


954
00:40:48,156 --> 00:40:49,926
that we want the call back
not on the main thread


955
00:40:49,926 --> 00:40:52,476
where we're starting this
request but on a different queue


956
00:40:52,476 --> 00:40:53,626
where we're not blocking.


957
00:40:54,146 --> 00:40:58,126
Then on that same
thread we're going


958
00:40:58,126 --> 00:40:59,936
to use the
dispatch-semaphore-wait API


959
00:41:00,006 --> 00:41:02,066
to just wait for that
resource to become available.


960
00:41:02,516 --> 00:41:06,836
Okay. After some time
that Snapshot will finish


961
00:41:06,836 --> 00:41:09,796
or it'll error out and we
can stash those two variables


962
00:41:09,796 --> 00:41:13,056
where we made space and then
call the dispatch semaphore


963
00:41:13,056 --> 00:41:16,436
signal API in order to indicate
that the snapshot is finished.


964
00:41:16,436 --> 00:41:18,676
So that will unblock
our main thread


965
00:41:18,676 --> 00:41:20,156
and now we can handle
the snapshot just


966
00:41:20,156 --> 00:41:20,946
like we normally would.


967
00:41:21,276 --> 00:41:23,766
Check for an error, otherwise
you know we have an image.


968
00:41:24,226 --> 00:41:29,426
So here's an example
of a snapshot.


969
00:41:30,246 --> 00:41:30,926
It's great.


970
00:41:30,926 --> 00:41:34,506
It looks just like MKMapView and
that's probably what you wanted.


971
00:41:35,556 --> 00:41:38,546
Now you probably just don't
want a blank image though.


972
00:41:38,546 --> 00:41:39,946
I mean you probably
want to put something


973
00:41:39,946 --> 00:41:42,526
on it may be like pins.


974
00:41:42,716 --> 00:41:43,956
So I want to show
you how to do that.


975
00:41:44,356 --> 00:41:48,396
Here's a sample project that's
pretty bare bones right now.


976
00:41:49,026 --> 00:41:53,916
What I've got is two
points that I want


977
00:41:53,916 --> 00:41:55,406
to show in a static snapshot.


978
00:41:55,406 --> 00:41:58,106
And for the purpose of this demo
I just want to save the snapshot


979
00:41:58,106 --> 00:41:59,286
out and I'm going to
show you the result.


980
00:41:59,286 --> 00:42:02,486
So I have London, I have
Paris, two coordinates.


981
00:42:02,486 --> 00:42:04,756
I also have a little
helper method I wrote


982
00:42:04,956 --> 00:42:07,766
which given two map points is
just going to return a rectangle


983
00:42:07,766 --> 00:42:08,806
around those two map points.


984
00:42:10,176 --> 00:42:11,026
Okay, so let's get started.


985
00:42:11,026 --> 00:42:12,746
The first thing I want to
do is figure out what part


986
00:42:12,746 --> 00:42:14,566
of the world I actually
want to show in my snapshot.


987
00:42:14,566 --> 00:42:19,536
So let's make a region.


988
00:42:19,536 --> 00:42:21,426
What I do is I make a
list of my two points,


989
00:42:21,886 --> 00:42:23,166
pass it to my helper method.


990
00:42:23,166 --> 00:42:24,296
It's going to return a rectangle


991
00:42:24,296 --> 00:42:26,056
and now I have a
CoordinateRegion


992
00:42:26,816 --> 00:42:29,066
so I can specify what part
of the world I want to see.


993
00:42:29,596 --> 00:42:36,166
Step two is create
my options object.


994
00:42:36,696 --> 00:42:38,416
So I created my options object.


995
00:42:38,596 --> 00:42:44,296
I give it the CoordinateRegion
I just decided to show.


996
00:42:45,386 --> 00:42:46,996
Then I want to add
some rotation to that


997
00:42:47,486 --> 00:42:50,286
and so what I do is I copy the
camera off my options object.


998
00:42:50,896 --> 00:42:53,506
I add a heading which will
rotate the cardinal direction


999
00:42:53,506 --> 00:42:56,786
of a map and I set it back
on the options object.


1000
00:42:58,006 --> 00:42:59,446
Then I chose the
size of the image.


1001
00:42:59,446 --> 00:43:00,956
Here is one that is
relatively large.


1002
00:43:01,136 --> 00:43:04,286
1680 points by 825 points.


1003
00:43:05,566 --> 00:43:07,456
Okay now I'm ready to
create a snapshotter.


1004
00:43:08,066 --> 00:43:11,566
So I created my snapshotter
object


1005
00:43:11,566 --> 00:43:13,606
and then I kick off
my async task


1006
00:43:13,976 --> 00:43:16,986
and I've got a block here
ready to receive the results.


1007
00:43:16,986 --> 00:43:19,616
So the first step is of
course handle an error


1008
00:43:20,256 --> 00:43:22,666
and I don't have an error
image to show you guys


1009
00:43:22,666 --> 00:43:23,346
so I'm just going to log


1010
00:43:23,346 --> 00:43:25,096
if there's an error
and I'll be very sad.


1011
00:43:25,686 --> 00:43:30,456
And otherwise we know we've got
the images so go ahead and pull


1012
00:43:30,456 --> 00:43:32,706
that image off that
snapshot object.


1013
00:43:32,796 --> 00:43:35,776
And now I'm going to draw a
couple pins on this and I want


1014
00:43:35,776 --> 00:43:36,676
to show you something neat here.


1015
00:43:36,676 --> 00:43:41,806
We can reuse the MKPinAnnotation
view API to draw the pin


1016
00:43:41,806 --> 00:43:42,826
on our static snapshot.


1017
00:43:44,016 --> 00:43:47,846
MKAnnotationViews all have
an image property on them


1018
00:43:47,976 --> 00:43:51,046
that you can use to specify
an image to show inside


1019
00:43:51,046 --> 00:43:52,156
of the MKAnnotationView.


1020
00:43:52,736 --> 00:43:56,886
MKPinAnnotation view uses that
property to set a pin image


1021
00:43:56,886 --> 00:43:58,906
and so you can just pull that
image right on out of there.


1022
00:43:59,316 --> 00:44:06,976
So here I am using the pin.image
property to get the pin image.


1023
00:44:08,026 --> 00:44:12,236
Okay. Now I have a pin image
and I have a map image.


1024
00:44:12,736 --> 00:44:15,186
I need to figure out where
on the image to draw the pin


1025
00:44:15,186 --> 00:44:17,086
so that they sit right on
top of London and Paris.


1026
00:44:18,396 --> 00:44:21,626
So MKMapSnapshotter has an
API called pointForCoordinate:


1027
00:44:21,626 --> 00:44:24,756
which will convert a latitude
and longitude into a point


1028
00:44:24,756 --> 00:44:27,166
in the coordinate
system of your image.


1029
00:44:28,296 --> 00:44:31,166
So I call those methods
for both London and Paris


1030
00:44:31,166 --> 00:44:33,056
to get the point of the image
for both London and Paris.


1031
00:44:33,776 --> 00:44:37,136
And those points sit right
on top of London and Paris.


1032
00:44:37,456 --> 00:44:39,456
But pins are actually
a rectangular image


1033
00:44:39,456 --> 00:44:42,306
and I don't want the, you
know, top left part of the pin


1034
00:44:42,306 --> 00:44:44,196
to be sitting on London and
Paris because then it's going


1035
00:44:44,196 --> 00:44:45,956
to look like the bottom of
the pin is somewhere off


1036
00:44:45,956 --> 00:44:47,636
in those respective countries.


1037
00:44:48,846 --> 00:44:53,236
So what I need to do is offset
that projected point to take


1038
00:44:53,236 --> 00:44:55,436
into account the area of the pin


1039
00:44:56,016 --> 00:44:57,336
and not just the
area of the pin.


1040
00:44:57,846 --> 00:45:00,746
MKAnnotationView also
has an offset property


1041
00:45:01,426 --> 00:45:04,866
and MapKit normally uses this
to offset your annotation views


1042
00:45:04,866 --> 00:45:07,066
such that a particular
anchor point


1043
00:45:07,066 --> 00:45:09,946
in your annotation view
sits at the point of the map


1044
00:45:09,996 --> 00:45:11,156
that you're trying to annotate.


1045
00:45:11,996 --> 00:45:14,256
Now because you're doing
the drawing you need to take


1046
00:45:14,256 --> 00:45:15,896
into account the center offset.


1047
00:45:16,916 --> 00:45:17,996
So here we are.


1048
00:45:17,996 --> 00:45:19,326
We get the center
offset for a pin


1049
00:45:20,256 --> 00:45:24,906
and on OS X NSViews support
a flipped orientation.


1050
00:45:25,636 --> 00:45:28,996
That means the coordinate
system of the view can originate


1051
00:45:28,996 --> 00:45:30,636
in the top left instead
of the bottom left


1052
00:45:30,636 --> 00:45:31,886
which is what's normal in OS X.


1053
00:45:32,356 --> 00:45:34,356
So you need to account
for that as well on OS X.


1054
00:45:34,606 --> 00:45:40,086
If the view is in a flipped
coordinate system simply invert


1055
00:45:40,086 --> 00:45:40,936
that center offset.


1056
00:45:41,146 --> 00:45:44,796
So multiply y by negative
one and you're done.


1057
00:45:45,006 --> 00:45:47,766
Okay so now we adjust
our projected point


1058
00:45:48,426 --> 00:45:49,246
so that the center


1059
00:45:49,246 --> 00:45:51,136
of the annotation view
sits on top of that point.


1060
00:45:51,846 --> 00:45:55,666
Then we adjust for the
center offset property


1061
00:45:55,666 --> 00:46:00,036
on MKAnnotationView to make sure
that the bottom of that pin sits


1062
00:46:00,036 --> 00:46:02,606
on the point for
London and for Paris.


1063
00:46:03,196 --> 00:46:06,856
Okay now we're ready to draw.


1064
00:46:07,746 --> 00:46:10,096
So you can use your normal
system drawing APIs on OS X.


1065
00:46:10,096 --> 00:46:12,356
It looks a little bit
different that iOS.


1066
00:46:12,696 --> 00:46:18,626
We lock focus on the map image;
we draw a pin on top of London


1067
00:46:19,416 --> 00:46:21,536
and draw the same pin
again on top of Paris.


1068
00:46:21,536 --> 00:46:24,056
Then we unlock focus
and we're done.


1069
00:46:24,056 --> 00:46:28,326
Now I'm ready to write
this image out to a file.


1070
00:46:29,046 --> 00:46:31,716
Drop in some code here.


1071
00:46:31,936 --> 00:46:34,056
And let's run it and see
what the image looks like.


1072
00:46:34,896 --> 00:46:38,466
Hit play and its
running and it's done.


1073
00:46:38,466 --> 00:46:39,066
It's pretty quick.


1074
00:46:39,756 --> 00:46:43,126
And we can just open up
this file and preview.


1075
00:46:43,736 --> 00:46:45,886
Boom there you got it.


1076
00:46:46,386 --> 00:46:51,936
[ Applause ]


1077
00:46:52,436 --> 00:46:52,916
All right.


1078
00:46:52,916 --> 00:46:53,756
Now while we're here --


1079
00:46:54,216 --> 00:46:56,466
I mentioned that the APIs
exactly the same as the iOS


1080
00:46:56,466 --> 00:46:59,256
so I have this already
implemented on iOS


1081
00:46:59,256 --> 00:47:00,736
and I just want you
to take a look at it.


1082
00:47:01,116 --> 00:47:02,266
It's almost exactly the same.


1083
00:47:02,266 --> 00:47:03,596
Here's that same helper method,


1084
00:47:03,596 --> 00:47:05,286
application did finish
launching.


1085
00:47:05,816 --> 00:47:07,316
I'm doing a little work
to show our window.


1086
00:47:07,376 --> 00:47:10,536
I started out with the same
London and Paris coordinate,


1087
00:47:11,246 --> 00:47:15,116
pick a region, set
up some options --


1088
00:47:15,506 --> 00:47:20,756
they're exactly the same --
create my snapshotter, same API,


1089
00:47:21,526 --> 00:47:25,386
start the asynch task,
same API, handle errors.


1090
00:47:25,996 --> 00:47:28,106
Now I'm using UIImage
instead of NSImage.


1091
00:47:28,276 --> 00:47:29,686
That's a platform difference.


1092
00:47:30,086 --> 00:47:31,966
But I can still use
MKPinAnnotation view


1093
00:47:31,966 --> 00:47:33,116
to drop pins on my image.


1094
00:47:33,176 --> 00:47:35,606
I still have to account
for offsets.


1095
00:47:35,606 --> 00:47:38,556
I don't have to worry about
flipped coordinate systems


1096
00:47:38,556 --> 00:47:40,046
because UIView has no notion.


1097
00:47:40,616 --> 00:47:44,996
I do the same math to
account for the offset.


1098
00:47:44,996 --> 00:47:50,766
I'm using UIKit's drawing APIs
to draw pins on top of my image


1099
00:47:51,966 --> 00:47:54,836
and then I'm using the same
APIs to write that out to a file


1100
00:47:54,836 --> 00:47:56,526
and I'm going to
get the same image.


1101
00:47:57,756 --> 00:47:59,536
So same API on both platforms.


1102
00:48:00,576 --> 00:48:03,276
So that's creating a Snapshot.


1103
00:48:03,776 --> 00:48:09,576
[ Applause ]


1104
00:48:10,076 --> 00:48:15,136
So what did we see there?


1105
00:48:15,366 --> 00:48:18,346
As you saw iOS and OS X
share really similar APIs.


1106
00:48:18,346 --> 00:48:20,226
Primarily where the
differences are it's due


1107
00:48:20,226 --> 00:48:24,006
to the platform differences
like CGPoint on iOS


1108
00:48:24,006 --> 00:48:25,536
and use NSPoint on OS X.


1109
00:48:26,036 --> 00:48:29,876
We use UIImage on iOS
and use NSImage on OS X.


1110
00:48:32,116 --> 00:48:35,056
We saw that you can use
annotation view classes


1111
00:48:35,056 --> 00:48:36,786
to draw annotation
views on your maps.


1112
00:48:36,786 --> 00:48:39,356
So you don't have to rebuild
anything, you don't have


1113
00:48:39,356 --> 00:48:41,016
to go digging through
the iOS SDK trying


1114
00:48:41,016 --> 00:48:42,386
to find a pin image
to redraw it.


1115
00:48:42,386 --> 00:48:44,536
You can just use
MKPinAnnotation view


1116
00:48:44,536 --> 00:48:46,436
to draw pins on your snapshot.


1117
00:48:50,096 --> 00:48:51,246
So, to recap.


1118
00:48:52,076 --> 00:48:53,276
Why do you want to
use snapshots?


1119
00:48:53,996 --> 00:48:55,276
Well you want to use
them for performance.


1120
00:48:55,276 --> 00:48:57,486
We saw those videos at the
beginning where if you try


1121
00:48:57,486 --> 00:49:00,766
to stick an MKMapView inside
of a table view and then scroll


1122
00:49:00,766 --> 00:49:03,136
that table view it really
didn't perform like we liked.


1123
00:49:03,866 --> 00:49:05,986
Instead use snapshots; it's
going to be a lot better.


1124
00:49:06,556 --> 00:49:09,326
We saw that we want to use
snapshots for printing.


1125
00:49:09,326 --> 00:49:11,896
It's really the only reliable
way to generate a snapshot


1126
00:49:11,896 --> 00:49:16,486
of a map while blocking
the main thread.


1127
00:49:16,786 --> 00:49:19,006
And if you're use -- trying
to generate Snapshots today


1128
00:49:19,006 --> 00:49:22,206
by using the rendering concepts
API on CALayer just throw


1129
00:49:22,206 --> 00:49:24,726
that code away and
use snapshots instead.


1130
00:49:25,326 --> 00:49:28,026
So basically anytime
you want an image


1131
00:49:28,026 --> 00:49:29,796
of a map try using
snapshots first.


1132
00:49:29,796 --> 00:49:31,036
It's probably going
to do what you want.


1133
00:49:31,526 --> 00:49:36,106
So that's putting Map
Kit in Perspective.


1134
00:49:36,756 --> 00:49:41,096
We introduced Map
Kit on OS X this year


1135
00:49:42,346 --> 00:49:43,856
and the APIs pretty
much the same.


1136
00:49:44,416 --> 00:49:48,566
We saw that if you just
recompile your app you're going


1137
00:49:48,566 --> 00:49:52,336
to get pitching and rotation for
free and it mostly just works.


1138
00:49:52,636 --> 00:49:54,146
But there are some
changes to our API


1139
00:49:54,146 --> 00:49:56,816
that if you're really
using some corner


1140
00:49:56,816 --> 00:49:59,566
of Map Kit it may affect
you and so you just need


1141
00:49:59,566 --> 00:50:04,726
to change your app a little
bit to account for that.


1142
00:50:04,726 --> 00:50:07,226
Then make sure you
adopt MKMapCamera


1143
00:50:07,226 --> 00:50:09,466
to take full advantage
of 3D in your app.


1144
00:50:10,956 --> 00:50:13,896
Lastly, use MkMapSnapshotter
anytime you want an image


1145
00:50:13,896 --> 00:50:16,326
of a map but you don't
need the interactivity


1146
00:50:16,326 --> 00:50:17,666
of a full blown MKMapView.


1147
00:50:18,256 --> 00:50:24,396
We have a wonderful evangelist
to help answer your questions


1148
00:50:24,436 --> 00:50:26,756
if you need any help after WWDC.


1149
00:50:26,756 --> 00:50:27,866
His name is Paul Marcos


1150
00:50:27,866 --> 00:50:29,206
and there's his email
address up there.


1151
00:50:29,306 --> 00:50:31,016
We also have a whole bunch


1152
00:50:31,016 --> 00:50:32,896
of documentation you can
find inside of Xcode.


1153
00:50:32,896 --> 00:50:35,866
It's a long URL but if you just
go to Xcode help and search


1154
00:50:35,866 --> 00:50:37,356
for MKMapView you're
going to find that.


1155
00:50:38,096 --> 00:50:40,106
We also have a location
awareness programing guide


1156
00:50:40,106 --> 00:50:42,986
that's chalk full of
goodies on how to use Map Kit


1157
00:50:42,986 --> 00:50:44,176
and Core Location together.


1158
00:50:44,176 --> 00:50:46,546
And there's also the
developer forums.


1159
00:50:46,546 --> 00:50:48,086
I highly encourage
you to use those.


1160
00:50:48,086 --> 00:50:49,946
A lot of the Map Kit
engineers hang out in there


1161
00:50:49,946 --> 00:50:55,446
and we're there to answer
your questions and help you.


1162
00:50:55,676 --> 00:50:57,006
So we had a session
this morning.


1163
00:50:57,006 --> 00:50:58,636
It was a great session.


1164
00:50:58,636 --> 00:50:59,906
There's a lot of new
things in Map Kit


1165
00:50:59,906 --> 00:51:01,086
that I couldn't go
over here today.


1166
00:51:01,466 --> 00:51:03,536
We introduced a ton of
new APIs on overlays.


1167
00:51:03,536 --> 00:51:07,026
We also introduced search
APIs and directions APIs.


1168
00:51:07,596 --> 00:51:10,296
So if you missed that
session catch the video later.


1169
00:51:10,296 --> 00:51:11,456
It's really worth your time.


1170
00:51:12,876 --> 00:51:13,456
That's it.


1171
00:51:13,666 --> 00:51:17,186
Thank you for your time.


1172
00:51:17,417 --> 00:51:19,417
[ Applause ]


1173
00:51:19,648 --> 00:51:21,648
[ Silence ]

