1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:21,986 --> 00:00:23,726
>> Welcome to what's
new in tvOS.


3
00:00:24,406 --> 00:00:26,406
[ Applause ]


4
00:00:26,796 --> 00:00:29,396
I'm Hans, and I'm an
engineer on the tvOS team.


5
00:00:31,216 --> 00:00:34,146
We're really thrilled
this year to welcome you


6
00:00:34,706 --> 00:00:38,926
to the very first WWDC for tvOS.


7
00:00:39,516 --> 00:00:43,606
[ Applause ]


8
00:00:44,106 --> 00:00:45,686
So I'd like to begin
this afternoon


9
00:00:46,046 --> 00:00:47,746
with a brief overview of tvOS.


10
00:00:47,746 --> 00:00:52,066
And we'll walk you through some
of the new features of tvOS 10.


11
00:00:52,596 --> 00:00:56,766
And then we'll take a few of
them and dive into more details.


12
00:00:57,506 --> 00:00:59,056
And we even have
a very good demo.


13
00:01:00,686 --> 00:01:03,636
So let's begin.


14
00:01:03,776 --> 00:01:06,586
Just nine months ago we
launched the new Apple TV


15
00:01:07,336 --> 00:01:09,246
and with it the tvOS.


16
00:01:10,656 --> 00:01:14,106
tvOS is a modern
operating system designed


17
00:01:14,216 --> 00:01:17,696
for modern hardware,
which is 64-bit only


18
00:01:18,146 --> 00:01:19,626
with no 32-bit runtime.


19
00:01:20,766 --> 00:01:23,376
So it would save you
nontrivial amount of time


20
00:01:23,546 --> 00:01:27,496
that you'd spent testing
for 32-bit compatibility


21
00:01:28,096 --> 00:01:30,106
or configuring for
32-bit slices.


22
00:01:30,706 --> 00:01:38,326
And unlike your iPhone,
iPad, or even Mac,


23
00:01:39,436 --> 00:01:41,936
the Apple TV is always connected
to a high speed network.


24
00:01:42,916 --> 00:01:45,936
And this makes tvOS
an ideal platform


25
00:01:46,386 --> 00:01:51,316
where you can offload some tasks
like managing your app's assets,


26
00:01:52,086 --> 00:01:56,276
user data, or even your
app's content to technologies


27
00:01:56,276 --> 00:02:00,076
such as CloudKit and
on-demand resources.


28
00:02:02,016 --> 00:02:04,516
CloudKit is your interface


29
00:02:04,516 --> 00:02:07,796
to an almost infinite
amount of storage in iCloud.


30
00:02:09,336 --> 00:02:11,856
It offers a structure
storage for your assets.


31
00:02:11,856 --> 00:02:16,836
It also provides a public and
private database for user data.


32
00:02:18,046 --> 00:02:19,746
So as you've heard in
the previous session,


33
00:02:20,476 --> 00:02:24,346
it can be accessed from
across iOS, Mac OS, and tvOS


34
00:02:24,346 --> 00:02:26,636
and can also be shared.


35
00:02:26,636 --> 00:02:32,486
And thanks to iCloud
authentication, you don't have


36
00:02:32,486 --> 00:02:35,546
to ask your customers for
a separate login anymore.


37
00:02:36,116 --> 00:02:41,986
And this is still true even if
your app happens to also run


38
00:02:41,986 --> 00:02:44,586
on other platforms that
do not have CloudKit.


39
00:02:45,786 --> 00:02:50,406
And by using CloudKit JS and its
web service API's you don't have


40
00:02:50,406 --> 00:02:53,346
to roll your own solution
and still take advantage


41
00:02:53,346 --> 00:02:55,116
of the security and efficiency.


42
00:02:55,706 --> 00:03:02,916
Now, traditionally customers
had to download an entire app


43
00:03:03,476 --> 00:03:05,196
to be able to launch
and start using it.


44
00:03:06,396 --> 00:03:09,876
And as app grows in size,
this becomes a pain point.


45
00:03:10,586 --> 00:03:15,456
Because we don't wait 800
megabytes to download for fun.


46
00:03:15,726 --> 00:03:19,236
And this is not only
frustrating for the users,


47
00:03:19,236 --> 00:03:21,226
but also a challenge
for us developers


48
00:03:21,986 --> 00:03:24,536
because customers
may lose an interest


49
00:03:24,536 --> 00:03:29,126
in our apps before they
even get to try them.


50
00:03:29,126 --> 00:03:32,626
On-demand resources
takes advantage


51
00:03:32,626 --> 00:03:34,576
of Apple TV's constant
connection


52
00:03:35,806 --> 00:03:37,036
and provides a mechanism


53
00:03:37,086 --> 00:03:39,606
by which your app can
launch even before all


54
00:03:39,606 --> 00:03:40,846
of its content is downloaded.


55
00:03:42,176 --> 00:03:44,656
This means for your customers,
they can use the app sooner.


56
00:03:45,186 --> 00:03:48,016
And while the app
is being downloaded,


57
00:03:49,336 --> 00:03:52,126
the system can continue
to download more content


58
00:03:52,586 --> 00:03:55,066
so they're ready
when they're needed,


59
00:03:55,826 --> 00:03:58,376
minimizing further wait time.


60
00:04:00,436 --> 00:04:06,406
And also, applications can
be very large, in fact,


61
00:04:06,786 --> 00:04:09,596
much larger than was
traditionally agreeable.


62
00:04:10,696 --> 00:04:15,096
Let's take a look at this.


63
00:04:15,326 --> 00:04:17,555
Every app has a main app bundle


64
00:04:17,906 --> 00:04:20,086
of executable and
base resources.


65
00:04:21,166 --> 00:04:24,336
And when using ODR, your
main app bundle can be


66
00:04:24,706 --> 00:04:26,566
up to 200 megabytes.


67
00:04:28,096 --> 00:04:32,056
To this you can add a first
set of content to be downloaded


68
00:04:32,706 --> 00:04:35,576
with the app bundle so they're
ready when the app installs.


69
00:04:35,576 --> 00:04:41,366
For example, this could be the
first three levels of your game.


70
00:04:41,566 --> 00:04:44,196
This first set is called
the initial install tags,


71
00:04:44,286 --> 00:04:47,946
and this can be up
to two gigabytes.


72
00:04:48,556 --> 00:04:51,416
What if you have more contents?


73
00:04:52,366 --> 00:04:56,676
Well, you can specific
additional sets of assets packs


74
00:04:56,676 --> 00:04:59,406
to be downloaded
immediately after the install.


75
00:04:59,466 --> 00:05:03,406
And this is called
prefetch tags.


76
00:05:04,736 --> 00:05:07,506
And prefetch tags are
intended for content


77
00:05:07,506 --> 00:05:10,556
that you know you'll need
soon but not soon enough


78
00:05:10,666 --> 00:05:13,026
to justify blocking your
app's initial launch,


79
00:05:13,296 --> 00:05:16,826
thereby preventing your
users from using the app.


80
00:05:17,806 --> 00:05:26,226
So, for example, if your user is
playing level one of your game,


81
00:05:27,396 --> 00:05:29,426
the system will start
downloading levels four,


82
00:05:29,426 --> 00:05:30,186
five, and six.


83
00:05:31,336 --> 00:05:34,976
And by the time the user is
completed with level three,


84
00:05:35,986 --> 00:05:37,876
the next levels are
already downloaded


85
00:05:37,876 --> 00:05:39,266
and waiting for the user.


86
00:05:40,486 --> 00:05:44,426
So the wait has been shifted
from the user to the system.


87
00:05:44,426 --> 00:05:50,436
And the system doesn't mind
waiting, but the users do.


88
00:05:50,966 --> 00:05:53,266
Prefetch tags can be
up to four gigabytes,


89
00:05:53,886 --> 00:05:56,886
using the rest of the allowance.


90
00:05:58,216 --> 00:06:01,276
So, for example, if
you spent 500 megabytes


91
00:06:01,276 --> 00:06:02,496
for initial install tags,


92
00:06:03,416 --> 00:06:07,466
then you have 3.5
gigabytes for prefetch tags.


93
00:06:08,356 --> 00:06:11,176
If you've spent all
two gigabytes


94
00:06:11,176 --> 00:06:12,436
of your initial install tags,


95
00:06:12,896 --> 00:06:15,476
then naturally you
have two gigabytes


96
00:06:15,476 --> 00:06:16,526
for your prefetch tags.


97
00:06:17,756 --> 00:06:20,596
What if you had no
initial install tags?


98
00:06:21,356 --> 00:06:23,256
Well, math says it's
four gigabytes


99
00:06:23,256 --> 00:06:24,256
for your prefetch tags.


100
00:06:24,336 --> 00:06:27,506
But you might want to
move some of that content


101
00:06:27,506 --> 00:06:30,206
into initial install tags
so they can be used early.


102
00:06:35,176 --> 00:06:38,786
In similar way as the
app is further used,


103
00:06:39,526 --> 00:06:41,116
more assets packs
can be downloaded.


104
00:06:41,756 --> 00:06:44,416
And the total downloadable
content can be


105
00:06:44,416 --> 00:06:48,556
up to 20 gigabytes, making the
combined size of app bundle


106
00:06:48,556 --> 00:06:52,996
and downloadable content at
a whopping 20.2 gigabytes.


107
00:06:54,516 --> 00:06:58,126
[ Applause ]


108
00:06:58,626 --> 00:07:01,666
And this is not just a big
number, but a big number


109
00:07:01,666 --> 00:07:04,346
that does not feel to the
customers heavy or tedious


110
00:07:04,956 --> 00:07:07,746
because they can get started
sooner and they can continue


111
00:07:07,746 --> 00:07:10,356
to use the app without
much interruption.


112
00:07:11,896 --> 00:07:16,816
Transistor is a great game and
a great example of using ODR.


113
00:07:17,936 --> 00:07:22,206
It has 160 megabytes of app
bundle and 500 megabytes


114
00:07:22,206 --> 00:07:27,016
of initial install tags, so it
downloads and installs quickly.


115
00:07:27,426 --> 00:07:33,436
But thanks to 900
megabytes of prefetch tags,


116
00:07:33,626 --> 00:07:36,006
gamers are continuously
challenged with new,


117
00:07:36,086 --> 00:07:40,726
gorgeous game levels without
virtually any interruption.


118
00:07:41,246 --> 00:07:44,556
But ODR is not just for games.


119
00:07:45,256 --> 00:07:50,056
One of my favorite
apps is Earthlapse TV.


120
00:07:51,696 --> 00:07:55,206
Earthlapse TV presents
time lapse videos taken


121
00:07:55,246 --> 00:07:59,536
from International Space Station
and creates a virtual window


122
00:07:59,536 --> 00:08:01,636
to the space right
in your living room.


123
00:08:03,076 --> 00:08:07,196
It has over one gigabyte of
super high-quality content.


124
00:08:07,706 --> 00:08:11,176
And yet, it downloads
and launches quickly


125
00:08:11,696 --> 00:08:15,326
and there's virtually any wait
jumping from content to content.


126
00:08:16,096 --> 00:08:19,156
So that's ODR.


127
00:08:20,456 --> 00:08:23,976
And that, by the way, is Canada
seen from the Cupola module.


128
00:08:24,516 --> 00:08:27,206
[ Applause ]


129
00:08:27,706 --> 00:08:32,015
Now, let's take a look at
how we interact with the TV.


130
00:08:32,206 --> 00:08:35,726
We use our phone every day and
we're quite accustomed to it.


131
00:08:36,436 --> 00:08:39,626
But it's unique in
that both our attention


132
00:08:39,626 --> 00:08:42,456
and our action are
right there in front


133
00:08:42,456 --> 00:08:46,046
of us on the touch surface.


134
00:08:46,716 --> 00:08:48,256
When you're looking
at a TV, however,


135
00:08:48,256 --> 00:08:53,186
our attention is 10 feet away
on the other side of the room


136
00:08:54,226 --> 00:08:57,796
and our action is on the
remote right in our hand.


137
00:08:58,586 --> 00:09:02,396
There's no direct
connection between the two.


138
00:09:02,986 --> 00:09:06,296
tvOS provides a unique
opportunity


139
00:09:06,676 --> 00:09:09,756
to make this experience
more direct and connected.


140
00:09:10,336 --> 00:09:13,206
First is the Siri Remote.


141
00:09:14,236 --> 00:09:18,876
Through its touch surface
Siri Remote enables a new


142
00:09:18,956 --> 00:09:22,136
focused-based interaction
designed specifically


143
00:09:22,136 --> 00:09:23,256
for this kind of environment.


144
00:09:24,956 --> 00:09:30,446
By pressing buttons and using
gestures on the touch surface,


145
00:09:31,836 --> 00:09:35,426
users can move focus from
one element to another,


146
00:09:36,316 --> 00:09:40,736
stop on a specific one, and
click to trigger an action.


147
00:09:47,556 --> 00:09:49,656
To complement this
focused interaction,


148
00:09:50,206 --> 00:09:53,676
tvOS also introduces
a new parallax effect.


149
00:09:55,486 --> 00:09:58,766
The parallax effect gives you
a sense of where your focus is


150
00:09:59,586 --> 00:10:02,586
and also the feeling that you
are connected with the screen.


151
00:10:03,136 --> 00:10:06,456
And the best way
to take advantage


152
00:10:06,456 --> 00:10:10,566
of the parallax effect is
by using layered image.


153
00:10:12,556 --> 00:10:15,716
A layered image is an image
type designed for tvOS,


154
00:10:15,936 --> 00:10:19,336
and it increases
depth and dynamism


155
00:10:19,806 --> 00:10:21,086
when an element is in focus.


156
00:10:21,696 --> 00:10:26,636
It can have up to five layers


157
00:10:27,386 --> 00:10:30,106
and is actually required
for the app icon.


158
00:10:30,626 --> 00:10:34,606
And to create a new
layered image,


159
00:10:34,776 --> 00:10:37,116
you can use Xcode's
asset catalog,


160
00:10:38,196 --> 00:10:40,426
the Parallax Previewer
app for Mac OS,


161
00:10:41,026 --> 00:10:45,356
and the Parallax Exporter
plug-in for Photoshop.


162
00:10:46,046 --> 00:10:48,086
And of course, all of these
are available for download


163
00:10:48,086 --> 00:10:52,346
at developer.apple.com.


164
00:10:52,776 --> 00:10:57,526
Now, let's take a step back and
take a look at the Home screen.


165
00:10:59,156 --> 00:11:01,546
The Home screen is where
this 10-foot experience is


166
00:11:01,626 --> 00:11:02,486
best illustrated.


167
00:11:02,996 --> 00:11:10,476
Above the first row of app icons
is an area called Top Shelf,


168
00:11:11,956 --> 00:11:17,626
and apps placed on the first
row can participate in it.


169
00:11:17,886 --> 00:11:21,586
Your apps can present the most
relevant features or contents


170
00:11:21,866 --> 00:11:25,846
as shortcuts to the
content deep inside your app


171
00:11:26,056 --> 00:11:27,886
so your customers can
jump straight to it.


172
00:11:27,886 --> 00:11:32,676
And this could be, for example,
a poster for your movies,


173
00:11:38,916 --> 00:11:44,026
album art for music,
banners, or really anything


174
00:11:44,566 --> 00:11:46,846
that makes sense for your app.


175
00:11:50,436 --> 00:11:54,346
Top Shelf is a great conduit
for bringing customers back


176
00:11:54,346 --> 00:11:56,176
into your app, so
we highly recommend


177
00:11:56,536 --> 00:11:57,416
that you take advantage


178
00:11:57,416 --> 00:12:00,956
of it beyond providing
a placeholder image.


179
00:12:01,376 --> 00:12:07,876
Now let's come back to
the Home screen again.


180
00:12:08,036 --> 00:12:11,626
The Home screen is a collection
of apps you care about.


181
00:12:12,556 --> 00:12:14,366
And as you've heard
in the keynote,


182
00:12:15,346 --> 00:12:17,246
we believe the future
of TV is apps.


183
00:12:18,746 --> 00:12:21,956
And all of this is
enabled by the App Store.


184
00:12:22,676 --> 00:12:28,166
The App Store, just like on
iOS, is where you go to browse,


185
00:12:28,676 --> 00:12:30,596
discover, and download apps.


186
00:12:31,986 --> 00:12:36,636
And because it exists
on both iOS and tvOS,


187
00:12:36,826 --> 00:12:38,576
it supports universal purchase.


188
00:12:39,996 --> 00:12:42,816
So if your customer has
downloaded the app on iOS,


189
00:12:43,636 --> 00:12:45,076
they can enjoy the app on tvOS


190
00:12:45,076 --> 00:12:47,826
with just one button
press and for free.


191
00:12:48,146 --> 00:12:53,326
And thanks to Apple TV's
constant connection,


192
00:12:53,696 --> 00:12:57,386
in tvOS 10 we're
introducing auto download.


193
00:12:58,466 --> 00:13:02,326
So apps downloaded on iOS will
be automatically downloaded


194
00:13:02,326 --> 00:13:06,826
to the TV just like that.


195
00:13:07,276 --> 00:13:09,106
So it's even easier
for your customers


196
00:13:09,146 --> 00:13:10,326
to get a hold of your apps.


197
00:13:11,846 --> 00:13:16,406
But how are you going
build them?


198
00:13:16,506 --> 00:13:19,606
tvOS offers the same
developer tools and languages


199
00:13:20,696 --> 00:13:23,446
as iOS, Mac OS, and watchOS.


200
00:13:23,446 --> 00:13:27,556
And many of the same frameworks
you that already know,


201
00:13:27,906 --> 00:13:33,066
such as UIKit, Foundation,
Core Animation, AVFoundation,


202
00:13:33,506 --> 00:13:38,436
Core Audio, and so on and so
on are all available on tvOS.


203
00:13:39,566 --> 00:13:43,746
And by the way, in tvOS 9.2
we've also brought MapKit to TV.


204
00:13:44,286 --> 00:13:47,506
But this is still a partial list


205
00:13:47,506 --> 00:13:50,106
of a whole lot more you
can pick and choose from.


206
00:13:50,646 --> 00:13:53,796
For example, if you're
developing a game,


207
00:13:54,416 --> 00:13:57,156
you'd be excited to learn
that all the game technologies


208
00:13:57,156 --> 00:14:02,056
that you love are all
available on tvOS: Game Center,


209
00:14:02,636 --> 00:14:07,266
Game Controller, GameplayKit,
Model I/O, MetalKit,


210
00:14:07,536 --> 00:14:11,636
Performance Traders, SpriteKit,
SceneKit and many more,


211
00:14:11,986 --> 00:14:14,146
these are all available
at your disposal.


212
00:14:15,826 --> 00:14:21,956
And finally, tvOS introduces a
brand new high-level framework


213
00:14:22,436 --> 00:14:23,566
called TVMLKit.


214
00:14:23,566 --> 00:14:28,816
TVMLKit makes it
really easy for you


215
00:14:28,816 --> 00:14:32,186
to build content-centric
apps by taking care


216
00:14:32,186 --> 00:14:34,256
of the heavy lifting,
such as layout


217
00:14:34,696 --> 00:14:36,136
and focus management, for you.


218
00:14:37,286 --> 00:14:41,866
And it does so with
predefined templates for layout


219
00:14:42,636 --> 00:14:44,596
and JavaScript for
application logic.


220
00:14:45,456 --> 00:14:48,326
It is really great for rapidly
iteration and deployment.


221
00:14:48,326 --> 00:14:51,496
And, of course, it's tuned
for great performance.


222
00:14:52,136 --> 00:14:58,256
In fact, several of Apple's own
apps are built using TVML --


223
00:14:58,976 --> 00:14:59,976
the Movies app.


224
00:14:59,976 --> 00:15:05,716
And that's right, the App Store
itself is built using TVMLKit.


225
00:15:05,966 --> 00:15:13,606
And all of the developer tools
on iOS that helped you fine-tune


226
00:15:13,606 --> 00:15:18,516
and optimize your apps, such
as Unit Testing, App Analytics


227
00:15:18,926 --> 00:15:27,276
and TestFlight are also
available for tvOS.


228
00:15:27,456 --> 00:15:31,756
This year tvOS continues to
offer new and exciting features.


229
00:15:32,576 --> 00:15:37,346
As you've heard in the keynote,
we're bringing HomeKit to the TV


230
00:15:37,346 --> 00:15:39,926
so you can control
HomeKit-compatible accessories


231
00:15:39,926 --> 00:15:41,266
from your TV.


232
00:15:42,156 --> 00:15:44,106
We're also bringing PhotoKit


233
00:15:44,106 --> 00:15:50,716
so your app can leverage your
customers' iCloud photo library.


234
00:15:50,876 --> 00:15:56,546
Using SpriteKit is even easier
thanks to native support


235
00:15:56,616 --> 00:15:57,536
from the focus engine.


236
00:15:58,376 --> 00:16:02,396
Your movement and navigation
will feel more natural


237
00:16:03,746 --> 00:16:06,556
and fully integrated with
the rest of the OS for free.


238
00:16:07,866 --> 00:16:12,486
Speaking of movement and
navigation, an integral part


239
00:16:12,486 --> 00:16:14,336
of gameplay is how
you control them.


240
00:16:14,926 --> 00:16:20,096
You can hold the Siri
Remote vertically


241
00:16:20,646 --> 00:16:26,046
as a lightweight game controller
and use gestures like swipes


242
00:16:26,196 --> 00:16:30,776
and clicks for jumping, for
example, to control a game.


243
00:16:32,086 --> 00:16:36,236
If your title requires
slightly more complex input,


244
00:16:37,136 --> 00:16:42,546
you can hold it landscape as a
micro game pad with basic D-pads


245
00:16:42,546 --> 00:16:44,266
and two-button controls.


246
00:16:44,266 --> 00:16:50,106
Well, if your game title
requires even more complex


247
00:16:50,106 --> 00:16:52,956
input, you can use the
extended game controllers


248
00:16:52,956 --> 00:16:57,766
and as you heard in the State of
the Union, up to four of them.


249
00:16:57,976 --> 00:17:01,316
You now have an option
to require the use


250
00:17:01,316 --> 00:17:02,976
of MFI-based game controllers,


251
00:17:02,976 --> 00:17:06,246
and the app store will
prompt the user accordingly


252
00:17:06,246 --> 00:17:07,076
if it's necessary.


253
00:17:08,806 --> 00:17:13,026
We're also bringing
ReplayKit to the TV.


254
00:17:14,556 --> 00:17:19,116
Using ReplayKit, players can
record their gameplays locally


255
00:17:19,116 --> 00:17:23,705
on device and share it
with friends via AirDrop.


256
00:17:24,925 --> 00:17:28,886
But that's not all; game
players can now broadcast their


257
00:17:28,886 --> 00:17:32,316
gameplays live on
services like Mobcrush.


258
00:17:32,876 --> 00:17:42,446
In tvOS 10 we're also
bringing a brand new


259
00:17:42,656 --> 00:17:45,136
UserNotification.framework
with iOS 10


260
00:17:46,296 --> 00:17:49,776
and also
ExternalAccessory.framework


261
00:17:49,776 --> 00:17:52,406
for Bluetooth accessories
from iOS.


262
00:17:53,756 --> 00:17:58,666
We're also shipping a brand
new Apple TV remote app.


263
00:17:58,966 --> 00:18:02,626
And finally, users can set
their system appearance


264
00:18:02,656 --> 00:18:04,096
to light or dark.


265
00:18:04,706 --> 00:18:08,946
And when you're actually
building apps,


266
00:18:10,406 --> 00:18:11,296
you have many options.


267
00:18:11,756 --> 00:18:17,216
You might want to use UIKit as
your baseline and take advantage


268
00:18:17,216 --> 00:18:19,236
of all the available frameworks.


269
00:18:19,826 --> 00:18:22,856
If you're already comfortable
with full native frameworks


270
00:18:22,856 --> 00:18:26,736
or if you have an
existing iOS app,


271
00:18:27,706 --> 00:18:30,546
we have some great sessions
this week for to you check out,


272
00:18:31,066 --> 00:18:35,166
including mastering
UIKit on tvOS


273
00:18:35,346 --> 00:18:38,856
where you can take your
UIKit app to the next level.


274
00:18:38,856 --> 00:18:41,726
And in Focus Interaction
on tvOS,


275
00:18:41,726 --> 00:18:47,016
we review the Focus system,
discuss some of the new features


276
00:18:47,016 --> 00:18:50,646
on tvOS 10, and of
course, SpriteKit.


277
00:18:53,996 --> 00:18:56,726
We also recommend that
you check out TVMLKit.


278
00:18:58,596 --> 00:19:01,916
TVMLKit is an incredibly
rich framework.


279
00:19:02,876 --> 00:19:08,186
And if your skillset already
includes JavaScript and XML,


280
00:19:08,776 --> 00:19:12,996
it's really easy to use
TVMLKit to rapidly develop


281
00:19:13,056 --> 00:19:14,866
and deploy content-centric apps.


282
00:19:15,416 --> 00:19:20,746
And because TVMLKit is built on
top of UIKit, you can even mix


283
00:19:20,746 --> 00:19:22,836
in UIKit for further
customization.


284
00:19:23,386 --> 00:19:29,356
And these sessions focus on
getting the most out of TVMLKit,


285
00:19:29,796 --> 00:19:31,916
and we highly encourage you
to come -- go check out.


286
00:19:32,936 --> 00:19:35,176
And if you are a game
developer, of course,


287
00:19:35,996 --> 00:19:38,316
all the game technologies
packaged


288
00:19:38,316 --> 00:19:40,786
as GameKit might
well be your choice.


289
00:19:45,546 --> 00:19:51,096
Next I'd like to switch gears
and take a deep dive into some


290
00:19:51,096 --> 00:19:52,926
of the new features in tvOS 10.


291
00:19:53,066 --> 00:19:55,066
And for that, I'd
like to hand it


292
00:19:55,066 --> 00:19:56,436
over to my colleague,
Marshall Huss.


293
00:19:57,516 --> 00:20:04,646
[ Applause ]


294
00:20:05,146 --> 00:20:05,816
>> Good afternoon.


295
00:20:05,816 --> 00:20:06,576
My name is Marshall.


296
00:20:06,656 --> 00:20:07,866
I'm a tvOS engineer.


297
00:20:07,906 --> 00:20:11,096
And today we're going to dive
into how you can implement some


298
00:20:11,096 --> 00:20:14,436
of the new features
with tvOS 10.


299
00:20:15,676 --> 00:20:16,996
We heard in the keynote


300
00:20:16,996 --> 00:20:18,966
that there's a new
Apple TV Remote app.


301
00:20:20,106 --> 00:20:22,756
We'll take a look at how
you can use notifications


302
00:20:23,056 --> 00:20:25,656
to notify users when you
have new content available.


303
00:20:26,666 --> 00:20:28,056
And finally, we're going to look


304
00:20:28,296 --> 00:20:30,476
at how you can implement
the light/dark appearance


305
00:20:30,476 --> 00:20:31,906
in your app.


306
00:20:33,796 --> 00:20:38,076
So the new Apple TV Remote app
works just like the Siri Remote,


307
00:20:38,076 --> 00:20:39,826
so there's no changes
that are required


308
00:20:40,266 --> 00:20:41,276
for your app to make it work.


309
00:20:42,296 --> 00:20:45,256
It also includes a new
Game Controller layout


310
00:20:45,726 --> 00:20:47,446
so users can use
it to play games.


311
00:20:47,576 --> 00:20:53,436
Now, if the user is using the
app and your app is linked


312
00:20:53,436 --> 00:20:56,126
against the game controller
framework, then they're going


313
00:20:56,126 --> 00:20:57,956
to get a new icon in
their navigation bar


314
00:20:57,956 --> 00:20:59,196
that looks like this.


315
00:21:00,126 --> 00:21:03,536
When that user taps that
icon, they'll get presented


316
00:21:03,606 --> 00:21:05,336
with a Game Controller
layout that they can use


317
00:21:05,336 --> 00:21:06,336
by rotating the phone.


318
00:21:07,756 --> 00:21:10,386
To learn more how
to make the most use


319
00:21:10,676 --> 00:21:11,956
of Game Controller framework,


320
00:21:11,956 --> 00:21:13,606
we have a session coming
up later this week.


321
00:21:15,036 --> 00:21:17,126
Also, as you heard, the
seed is available today.


322
00:21:17,126 --> 00:21:20,866
So go download it
and try it out.


323
00:21:21,136 --> 00:21:23,966
Next we're going to take
a look at notifications


324
00:21:24,296 --> 00:21:26,316
and how you can use
those to notify users


325
00:21:26,316 --> 00:21:27,956
when you have new
content available.


326
00:21:28,746 --> 00:21:30,326
A great way of doing
this you might be used


327
00:21:30,326 --> 00:21:32,926
to is badging your
application icon.


328
00:21:32,926 --> 00:21:35,126
And we've added this
support for tvOS 10.


329
00:21:36,466 --> 00:21:39,676
Now, like iOS you're required
to request permissions


330
00:21:39,676 --> 00:21:41,936
from the user in order to
badge the application icon.


331
00:21:42,286 --> 00:21:44,206
But on tvOS this looks
a little bit different.


332
00:21:44,726 --> 00:21:46,836
They're going to get a
full-screen modal alert.


333
00:21:47,636 --> 00:21:49,986
So make sure that you
that request permission


334
00:21:49,986 --> 00:21:52,916
at an appropriate time, or this
may be the first experience the


335
00:21:52,916 --> 00:21:55,386
user has with your app.


336
00:21:55,926 --> 00:21:58,906
We've also added support
for remote notifications


337
00:21:58,906 --> 00:22:01,556
so you can use Apple's
Push Notification service


338
00:22:01,866 --> 00:22:03,136
to send remote notifications.


339
00:22:04,126 --> 00:22:06,716
We support two notification
types.


340
00:22:06,866 --> 00:22:11,986
Those are Badge, which we just
saw and also content-available.


341
00:22:13,466 --> 00:22:16,066
Now, if your app is
in the background,


342
00:22:16,066 --> 00:22:18,646
then these content-available
applications will not wake


343
00:22:18,646 --> 00:22:20,816
up your app like you
might be used to in iOS.


344
00:22:20,906 --> 00:22:22,946
Let's take a look
at what that means.


345
00:22:24,136 --> 00:22:26,696
So say your user has
new content available.


346
00:22:26,696 --> 00:22:29,516
A great way to notify them would
be to send a Push Notification


347
00:22:29,596 --> 00:22:31,716
with content-available
and a Badge of 1.


348
00:22:31,876 --> 00:22:34,406
If the application's
not open, tvOS will hold


349
00:22:34,406 --> 00:22:37,596
onto this notification and
update the user's Badge.


350
00:22:37,596 --> 00:22:40,046
Now, the user gets
more content-available,


351
00:22:40,236 --> 00:22:42,186
so you can send another
Push Notification


352
00:22:42,496 --> 00:22:43,856
that updates the Badge icon.


353
00:22:44,826 --> 00:22:49,416
tvOS will hold onto the
latest notification and wait


354
00:22:49,416 --> 00:22:50,286
for the app to come back.


355
00:22:50,286 --> 00:22:52,636
And finally, you get
more content-available


356
00:22:52,636 --> 00:22:53,986
and you can update
the Badge again.


357
00:22:53,986 --> 00:22:56,676
When the user is ready
to go back to the app


358
00:22:56,676 --> 00:22:59,286
and see what they have is
new, they can open the app.


359
00:22:59,466 --> 00:23:02,286
And then we deliver that last
notification so you can go


360
00:23:02,286 --> 00:23:04,426
to your servers and get
maybe any new content


361
00:23:04,706 --> 00:23:05,296
that's available.


362
00:23:05,296 --> 00:23:09,326
In order to support
this you have


363
00:23:09,326 --> 00:23:11,346
to use the new user
notification framework.


364
00:23:12,066 --> 00:23:15,486
If you've implemented
notifications in iOS before,


365
00:23:15,706 --> 00:23:17,796
you might be used to
using the UIKit API's.


366
00:23:18,436 --> 00:23:20,846
Well, those have been
prohibited up until now on tvOS,


367
00:23:20,846 --> 00:23:22,176
and they're going to
remain prohibited.


368
00:23:22,176 --> 00:23:23,786
So in order to fully
support local


369
00:23:23,786 --> 00:23:25,606
and [inaudible] notifications,
you're going to need


370
00:23:25,606 --> 00:23:28,076
to use the new user
notification framework.


371
00:23:28,076 --> 00:23:30,766
We have a few sessions
coming up later this week


372
00:23:30,766 --> 00:23:34,586
on how you can learn to fully
implement those in your app.


373
00:23:35,176 --> 00:23:38,296
And finally today, we're going
it take a look at the new light


374
00:23:38,296 --> 00:23:39,676
and dark appearance on tvOS.


375
00:23:41,286 --> 00:23:44,486
We see that that this is a
system-wide setting to the user.


376
00:23:45,106 --> 00:23:47,736
The user will determine
when they want the change


377
00:23:47,736 --> 00:23:48,626
between light or dark.


378
00:23:48,816 --> 00:23:50,916
Now, something to consider is


379
00:23:50,916 --> 00:23:53,316
that users might have their
rooms in different environments.


380
00:23:53,316 --> 00:23:55,236
It could be in a movie
room, which is dark;


381
00:23:55,236 --> 00:23:57,516
it could be in a living room,
which has a lot of windows.


382
00:23:57,886 --> 00:24:00,436
Or the user may change
it based on time of day.


383
00:24:01,056 --> 00:24:03,676
So it's important in order
to respect your user's choice


384
00:24:03,676 --> 00:24:05,686
to offer them the
best user experience.


385
00:24:06,006 --> 00:24:09,896
In order to fully support
this we've added new API


386
00:24:09,896 --> 00:24:16,176
on the UITraitCollection,
and you must actually opt-in


387
00:24:16,176 --> 00:24:17,396
for the dark appearance.


388
00:24:19,636 --> 00:24:23,096
If you don't opt-in for the dark
appearance, your app will remain


389
00:24:23,096 --> 00:24:25,356
in the light just
like it did in tvOS 9.


390
00:24:25,516 --> 00:24:30,636
So let's take a look at
what it takes for your app


391
00:24:30,636 --> 00:24:33,176
to adopt the new light and
dark system appearance.


392
00:24:34,716 --> 00:24:38,146
The first step is to add a
new key to your Info.plist;


393
00:24:38,206 --> 00:24:40,766
we've added one called
UIUserInterfaceStyle.


394
00:24:40,866 --> 00:24:44,656
If you set a value of Light, it
will always resolve to light.


395
00:24:44,656 --> 00:24:47,726
If you set a value to Dark,
your app will always stay dark.


396
00:24:48,186 --> 00:24:52,026
Or if you use what we recommend,
Automatic, it respects the user


397
00:24:52,026 --> 00:24:54,946
and the system setting and will
propagate that through your app.


398
00:24:55,406 --> 00:24:59,966
If you create new projects
in Xcode 8 for tvOS,


399
00:25:00,026 --> 00:25:01,666
this will actually
default to Automatic.


400
00:25:03,066 --> 00:25:05,926
I mentioned that there is
new API and TraitCollection.


401
00:25:05,926 --> 00:25:08,536
We've added a new property
called .UserInterfaceStyle.


402
00:25:09,616 --> 00:25:11,346
This could have a
value of unspecified,


403
00:25:11,576 --> 00:25:14,026
which might the case if your
view has not been inserted


404
00:25:14,026 --> 00:25:17,836
in the view hierarchy yet, or if
could be light or dark depending


405
00:25:17,836 --> 00:25:20,516
on what the system setting is
and what your app supports.


406
00:25:21,056 --> 00:25:27,466
In order to support
developers adopting this,


407
00:25:27,466 --> 00:25:29,066
we've added developer
tool support


408
00:25:29,436 --> 00:25:31,516
to Interface Builder
and the simulator.


409
00:25:31,816 --> 00:25:34,456
If you use standard
UIKit controls,


410
00:25:34,456 --> 00:25:36,526
these will actually
automatically change for you.


411
00:25:36,956 --> 00:25:39,586
If you're used to using
the appearance proxy,


412
00:25:39,586 --> 00:25:41,166
with a little bit
of refactoring,


413
00:25:41,166 --> 00:25:44,226
you can then specify colors
depend on TraitCollection.


414
00:25:45,016 --> 00:25:46,476
And if you want the
most control,


415
00:25:46,776 --> 00:25:48,896
you can implement
TraitCollectionDidChange


416
00:25:48,896 --> 00:25:50,516
in your views or
view controllers.


417
00:25:53,386 --> 00:25:56,806
Now in Interface Builder
you can specify colors right


418
00:25:56,806 --> 00:26:00,726
in the inspector
for light and dark.


419
00:26:00,916 --> 00:26:03,606
We added a light and dark
preview to storyboards


420
00:26:03,606 --> 00:26:05,976
so you can rapidly develop
and design your app.


421
00:26:06,646 --> 00:26:09,256
We've also added a shortcut
to the simulator to be able


422
00:26:09,256 --> 00:26:11,666
to quick toggle between
these system appearances.


423
00:26:14,596 --> 00:26:18,756
I mentioned UIKit controls
will automatically update them.


424
00:26:19,176 --> 00:26:21,206
And we use these a lot
in our own system apps.


425
00:26:21,546 --> 00:26:24,806
We see that certain views like
this keyboard or text field


426
00:26:24,806 --> 00:26:27,186
or [inaudible] control
automatically update their style


427
00:26:27,186 --> 00:26:29,006
to look best against
the TV wallpaper.


428
00:26:29,216 --> 00:26:32,016
If you use a table view like
we do in our settings app,


429
00:26:32,016 --> 00:26:34,796
it will automatically adjust
its background colors,


430
00:26:35,006 --> 00:26:36,926
its text color, and
everything to look good.


431
00:26:36,926 --> 00:26:39,536
And if you're using the
system built-in keyboards,


432
00:26:40,046 --> 00:26:41,506
than those adapt as well.


433
00:26:43,436 --> 00:26:47,546
If you're looking to customize
your text, we've added support


434
00:26:47,546 --> 00:26:49,456
to UILabel and UITextView,


435
00:26:49,756 --> 00:26:51,876
so those will automatically
change their color as well.


436
00:26:53,036 --> 00:26:56,086
Text color will be set to
black for the light appearance;


437
00:26:56,086 --> 00:26:58,636
it will be set to white
for the dark appearance.


438
00:26:59,016 --> 00:27:01,466
But one caveat is if you
ever set the text color,


439
00:27:01,756 --> 00:27:03,696
then you're responsible
for updating that color


440
00:27:04,316 --> 00:27:06,346
for both those modes
on your own.


441
00:27:07,816 --> 00:27:11,126
We've also added two new
blur styles to the API.


442
00:27:12,436 --> 00:27:15,016
You can now use
UIBlurEffectStyleRegular


443
00:27:15,096 --> 00:27:17,096
or UIBlurEffectStyleProminent.


444
00:27:17,536 --> 00:27:19,706
And we call these
automatic styles.


445
00:27:19,706 --> 00:27:22,996
And they'll actually adjust
the effective blur effect style


446
00:27:23,116 --> 00:27:24,886
based on what the
system setting is.


447
00:27:24,886 --> 00:27:27,836
So if you use
UIBlurEffectStyleRegular


448
00:27:27,836 --> 00:27:29,006
and the system's in light,


449
00:27:29,006 --> 00:27:30,956
it will use
UIBlurEffectStyle.light.


450
00:27:30,956 --> 00:27:33,696
If you use regular and
dark, you'll use dark.


451
00:27:33,696 --> 00:27:37,326
If you use prominent, it will
use .extraLight and .extraDark.


452
00:27:38,386 --> 00:27:42,996
.extraDark will be
coming in a later seed.


453
00:27:44,366 --> 00:27:47,056
Now, you might customize your
app with the appearance proxy.


454
00:27:47,196 --> 00:27:49,836
So you might have code like this


455
00:27:50,266 --> 00:27:52,776
that sets the title
color of a button to red.


456
00:27:53,496 --> 00:27:54,796
With a little bit
of refactorring,


457
00:27:55,156 --> 00:27:57,316
we can vend a TraitCollection
for both light and dark.


458
00:27:57,646 --> 00:28:01,026
And using the appearance
proxy API's we can set a color


459
00:28:01,026 --> 00:28:02,736
for each of those
specific TraitCollections.


460
00:28:03,196 --> 00:28:06,686
Now in this case our button will
use red in the light appearance


461
00:28:07,026 --> 00:28:08,856
and blue in the dark appearance.


462
00:28:09,476 --> 00:28:13,396
And finally, if you want the
most control over these changes,


463
00:28:13,666 --> 00:28:15,146
you can respond to
them directly.


464
00:28:16,176 --> 00:28:18,406
You can do this using
TraitCollectionDidChange


465
00:28:18,406 --> 00:28:19,916
in your views or
view controllers.


466
00:28:20,166 --> 00:28:21,726
Let's take a look at
what an implementation


467
00:28:21,726 --> 00:28:22,436
of this would look like.


468
00:28:22,826 --> 00:28:25,586
First we override
TraitCollectionDidChange


469
00:28:25,586 --> 00:28:26,376
in our view controller.


470
00:28:27,936 --> 00:28:31,586
Then we check to make sure
that UITraitCollection responds


471
00:28:31,586 --> 00:28:33,186
to the new user interface
style property.


472
00:28:33,346 --> 00:28:36,486
This allows us to build this
feature for our users on tvOS 10


473
00:28:36,816 --> 00:28:39,126
but still support users
who might be on tvOS 9.


474
00:28:39,626 --> 00:28:43,966
Next we check to see that the
user interface style actually


475
00:28:43,966 --> 00:28:47,286
changed; otherwise we might be
doing more work than we need.


476
00:28:48,226 --> 00:28:51,666
And finally, we can check
the user interface style


477
00:28:51,666 --> 00:28:53,626
and update our controls
accordingly.


478
00:28:56,336 --> 00:28:59,246
Now, one more advanced use
of this is if you wanted


479
00:28:59,246 --> 00:29:00,776
to override TraitCollections.


480
00:29:00,776 --> 00:29:02,996
And this might be the case
that if you want your app


481
00:29:03,466 --> 00:29:06,366
to support the automatic style
but may have certain views


482
00:29:06,366 --> 00:29:08,316
or view controllers in
your app that you want


483
00:29:08,316 --> 00:29:10,366
to specify the style itself.


484
00:29:11,456 --> 00:29:16,406
We use this in our system apps,
our product pages and our movies


485
00:29:16,406 --> 00:29:19,516
and TV shows actually
use the artwork to base


486
00:29:19,516 --> 00:29:20,726
on what the elements look like.


487
00:29:21,166 --> 00:29:24,446
In this case we have light
artwork, so we use black text


488
00:29:24,446 --> 00:29:27,016
in button styles that
make the colors pop out.


489
00:29:27,716 --> 00:29:31,206
We also have dark pages where we
use white text on darker styles


490
00:29:31,206 --> 00:29:33,286
and the buttons also
update accordingly.


491
00:29:35,436 --> 00:29:37,706
In order to override
these TraitCollections,


492
00:29:37,706 --> 00:29:39,956
we use API that was
added in iOS 8.


493
00:29:39,956 --> 00:29:41,836
And this is
setOverrideTraitCollection


494
00:29:41,836 --> 00:29:42,826
for ChildViewController.


495
00:29:43,606 --> 00:29:46,396
In order to use this we can
use a small wrapper class.


496
00:29:47,236 --> 00:29:49,356
Let's see what an example
of this might look like.


497
00:29:50,546 --> 00:29:55,916
First we create a new class,
AppearanceViewController,


498
00:29:55,976 --> 00:29:57,736
and we inherit from
UIViewController.


499
00:29:58,936 --> 00:30:01,816
We can add a property that has
the style that we might want


500
00:30:01,816 --> 00:30:03,466
to set in our
ChildViewControllers.


501
00:30:03,596 --> 00:30:05,226
And then we can another property


502
00:30:05,226 --> 00:30:08,416
where we actually set the view
controller in which we want


503
00:30:08,416 --> 00:30:09,586
to set that style for.


504
00:30:13,576 --> 00:30:16,716
Then we use a
setOverrideTraitCollection


505
00:30:16,716 --> 00:30:19,516
for ChildViewController using
the style that we specified.


506
00:30:19,516 --> 00:30:23,226
And finally, we use standard
ChildViewController containment.


507
00:30:24,446 --> 00:30:26,506
Now, if you wanted
to use this class,


508
00:30:27,166 --> 00:30:29,516
we could vend our
AppearanceViewController,


509
00:30:30,206 --> 00:30:33,096
specify the style
that we want for based


510
00:30:33,096 --> 00:30:36,836
on whatever attributes we want,
we can set the ViewController,


511
00:30:36,836 --> 00:30:39,426
and then we can present
it to the user.


512
00:30:40,376 --> 00:30:44,866
Next, I'd like to invite Brandon
up to show you what it takes


513
00:30:44,866 --> 00:30:46,746
to update your app for tvOS 10.


514
00:30:48,516 --> 00:31:03,186
[ Applause ]


515
00:31:03,686 --> 00:31:04,266
>> Thanks, Marshall.


516
00:31:04,886 --> 00:31:05,606
Hi, everyone.


517
00:31:05,756 --> 00:31:07,466
My name's Brandon,
and I'm really excited


518
00:31:07,466 --> 00:31:09,706
to show you the tvOS app
that we've been working on.


519
00:31:10,326 --> 00:31:11,936
It's called Fireplaces
of the World.


520
00:31:12,296 --> 00:31:14,586
And fireplace enthusiasts
have been loving it so far.


521
00:31:15,276 --> 00:31:15,996
Let's take a look.


522
00:31:16,626 --> 00:31:21,256
This app allows to you
bring fireplace styles


523
00:31:21,256 --> 00:31:23,336
from around the world
straight to your living room.


524
00:31:23,966 --> 00:31:26,606
Let's see what a fireplace
from Vermont looks like.


525
00:31:27,756 --> 00:31:30,666
Ahh, doesn't it feel
cozy in here?


526
00:31:31,316 --> 00:31:34,796
I think this is great.


527
00:31:34,966 --> 00:31:37,586
Now, even though the simulator
appearance will set to dark,


528
00:31:37,666 --> 00:31:39,966
our app is using the light
appearance by default


529
00:31:39,966 --> 00:31:41,636
because we haven't
specified a preference.


530
00:31:42,356 --> 00:31:44,326
I'm excited to adopt
the new dark appearance,


531
00:31:44,426 --> 00:31:45,766
so let's go update our app now.


532
00:31:46,736 --> 00:31:52,306
The first thing we need to do is
add the new User Interface Style


533
00:31:52,306 --> 00:31:53,836
key to our Info.plist.


534
00:32:01,456 --> 00:32:06,166
We'll set the value to
automatic and rerun our app.


535
00:32:06,476 --> 00:32:08,796
We chose automatic because
we want our app's appearance


536
00:32:08,796 --> 00:32:10,426
to match the user's
appearance setting.


537
00:32:16,116 --> 00:32:18,476
Okay. This is looking
pretty good so far.


538
00:32:19,166 --> 00:32:21,486
So all of our standard
UIKit views have been


539
00:32:21,486 --> 00:32:22,656
updated automatically.


540
00:32:22,996 --> 00:32:24,526
So in this case the tab bar


541
00:32:24,526 --> 00:32:26,656
and the wallpaper now
have a dark appearance.


542
00:32:27,256 --> 00:32:29,296
For some of you this
might be all you need


543
00:32:29,296 --> 00:32:30,606
to do to update your apps.


544
00:32:30,896 --> 00:32:33,296
However, our designers
have decided


545
00:32:33,296 --> 00:32:36,286
that they want a different logo
color for the dark appearance.


546
00:32:36,956 --> 00:32:39,956
And the background color on the
collection view styles sticks


547
00:32:39,956 --> 00:32:40,976
out a little bit too much.


548
00:32:40,976 --> 00:32:42,646
So let's go make those changes.


549
00:32:42,736 --> 00:32:45,896
So let's go to our
main.storyboard.


550
00:32:47,696 --> 00:32:50,436
And the first thing
we need to do


551
00:32:50,436 --> 00:32:53,106
because this is an
existing project,


552
00:32:53,476 --> 00:32:57,606
we need to enable the trait
variations feature in Xcode 8.


553
00:32:58,176 --> 00:33:02,146
So to do that, we'll go to
the File Inspector and click


554
00:33:02,146 --> 00:33:04,096
on this Use Trait
Variations checkbox.


555
00:33:04,976 --> 00:33:06,716
When we do that, we're
going to get a warning


556
00:33:06,716 --> 00:33:09,036
that trait variations
is only compatible


557
00:33:09,386 --> 00:33:10,676
with Xcode 8 or later.


558
00:33:10,756 --> 00:33:12,036
And that's fine,
so we'll continue.


559
00:33:13,756 --> 00:33:16,926
So now we'll click on our logo,
go to the Attributes Inspector.


560
00:33:17,506 --> 00:33:19,096
And there's these
new plus buttons next


561
00:33:19,096 --> 00:33:20,006
to some of the properties.


562
00:33:20,326 --> 00:33:25,116
So we'll click on that and add a
darkinterface for our logo image


563
00:33:25,116 --> 00:33:26,326
and we'll specify yellow.


564
00:33:27,956 --> 00:33:31,036
Now, one cool feature of Xcode 8
is that you can actually switch


565
00:33:31,036 --> 00:33:33,036
between the light and
dark appearances directly


566
00:33:33,036 --> 00:33:34,156
within Interface Builder.


567
00:33:34,866 --> 00:33:37,306
To do that we'll go to the
bottom of our storyboard


568
00:33:37,306 --> 00:33:39,766
and click on this View As:
Apple TV (Light Style).


569
00:33:40,506 --> 00:33:41,796
And we have two options here.


570
00:33:42,286 --> 00:33:43,946
We have light and dark.


571
00:33:44,056 --> 00:33:48,786
When we click dark everything
updates automatically.


572
00:33:48,966 --> 00:33:52,116
So our logo changed color
and also the tab bar


573
00:33:52,476 --> 00:33:54,486
and wallpaper have
changed color as well.


574
00:33:55,276 --> 00:33:56,886
So that looks pretty good.


575
00:33:56,886 --> 00:33:58,616
So let's go update
our background colors.


576
00:33:59,276 --> 00:34:04,926
In our AppDelegate we're
setting the background color


577
00:34:04,926 --> 00:34:07,176
of our CollectionViewCell
using the appearance proxy.


578
00:34:08,016 --> 00:34:09,295
Now, we want the
background color


579
00:34:09,485 --> 00:34:11,406
to change based on
specific traits.


580
00:34:11,485 --> 00:34:13,916
So we need to use a
trait-specific appearance proxy.


581
00:34:14,606 --> 00:34:18,456
So first we'll start out by
creating a UITraitCollection.


582
00:34:18,616 --> 00:34:20,746
So let light equals
UITraitCollection


583
00:34:21,216 --> 00:34:24,726
with a UserInterfaceStyle
of light.


584
00:34:26,916 --> 00:34:29,335
Then we'll replace our
generic appearance proxy


585
00:34:29,746 --> 00:34:31,446
with a trait-specific
appearance proxy.


586
00:34:32,146 --> 00:34:34,235
So for TraitCollection,
and we'll pass


587
00:34:34,235 --> 00:34:35,786
in the TraitCollection
we just created.


588
00:34:36,206 --> 00:34:39,206
We'll do the same for dark


589
00:34:39,505 --> 00:34:41,116
and specify a different
background color.


590
00:34:42,396 --> 00:34:43,485
Now, because we can't view this


591
00:34:43,485 --> 00:34:45,356
in Interface Builder,
we'll rerun our app.


592
00:34:46,636 --> 00:34:49,166
We've added a keyboard
shortcut, so you can switch --


593
00:34:49,525 --> 00:34:50,936
quickly switch between the light


594
00:34:50,936 --> 00:34:53,416
and dark appearances
within the simulator.


595
00:34:54,735 --> 00:34:56,626
To do that, we'll
hit Command Shift D


596
00:34:57,236 --> 00:35:00,096
to switch the light appearance
and then Command Shift D


597
00:35:00,096 --> 00:35:01,636
to switch back to
the dark appearance.


598
00:35:02,856 --> 00:35:04,416
So that's looking
pretty good so far.


599
00:35:04,546 --> 00:35:08,456
But I've noticed that the
icon is hard to see now


600
00:35:08,456 --> 00:35:09,806
that we've changed
our background color.


601
00:35:10,356 --> 00:35:11,986
So let's go update that as well.


602
00:35:13,756 --> 00:35:16,396
So we'll go to our to custom
collection ViewCell subclass


603
00:35:17,286 --> 00:35:19,686
and before we were
setting the tint color


604
00:35:19,766 --> 00:35:21,036
in our awakeFromNib function.


605
00:35:21,946 --> 00:35:23,676
Since we want the
tint color to change


606
00:35:23,676 --> 00:35:25,226
when our TraitCollection change,


607
00:35:25,596 --> 00:35:27,946
we'll override the
TraitCollectionDidChange


608
00:35:28,046 --> 00:35:28,506
function.


609
00:35:30,536 --> 00:35:32,806
We'll use the same
color as before


610
00:35:32,806 --> 00:35:34,176
for our light interface style,


611
00:35:34,746 --> 00:35:37,306
and for our dark we'll
actually use a light gray.


612
00:35:38,746 --> 00:35:43,806
Now, TraitCollectionDidChange
is called each time your view is


613
00:35:43,806 --> 00:35:45,056
added to a view hierarchy.


614
00:35:45,356 --> 00:35:47,486
So we remove our
initialization code here.


615
00:35:47,936 --> 00:35:50,026
But for backwards
compatibility reasons,


616
00:35:50,026 --> 00:35:52,626
we'll just leave it in there.


617
00:35:52,836 --> 00:35:59,756
Let's run our app,
see how it looks now.


618
00:36:00,796 --> 00:36:03,726
Okay. That looks much better.


619
00:36:03,886 --> 00:36:06,056
So let's switch to
light appearance,


620
00:36:06,056 --> 00:36:07,326
make sure nothing has changed.


621
00:36:07,326 --> 00:36:08,586
And that still looks good.


622
00:36:09,116 --> 00:36:09,816
And we'll switch back


623
00:36:09,816 --> 00:36:11,716
to the dark appearance,
and that looks great.


624
00:36:12,536 --> 00:36:15,826
So we've just updated our app
to adopt a new dark appearance,


625
00:36:16,126 --> 00:36:18,366
and we're ready to
ship with tvOS 10.


626
00:36:18,886 --> 00:36:21,016
Now I'd like to invite
Hans back up on stage.


627
00:36:22,516 --> 00:36:27,076
[ Applause ]


628
00:36:27,576 --> 00:36:28,206
>> Thank you, Brandon.


629
00:36:28,206 --> 00:36:32,026
That was a very cool
demo and warm.


630
00:36:33,766 --> 00:36:36,986
So as you've seen,
adopting light


631
00:36:36,986 --> 00:36:38,706
and dark appearance
is really easy.


632
00:36:38,906 --> 00:36:43,496
So we hope all of you can adopt
it in your apps very soon.


633
00:36:44,066 --> 00:36:49,546
This afternoon we
have seen just a few


634
00:36:49,546 --> 00:36:51,286
of the many features in tvOS.


635
00:36:52,636 --> 00:36:56,686
tvOS offers the same tools,
services, and frameworks


636
00:36:57,146 --> 00:37:01,976
that you already know so it's
really easy to get started.


637
00:37:02,086 --> 00:37:05,166
And focus-based interaction,
layered images


638
00:37:05,166 --> 00:37:09,806
with parallax effect and Top
Shelf, they all work together


639
00:37:09,806 --> 00:37:13,436
to create a direct and
connected 10-foot experience.


640
00:37:13,546 --> 00:37:18,776
And with Universal
Purchase and Auto Download,


641
00:37:19,146 --> 00:37:22,536
your customers are ever-closer
to enjoying your apps.


642
00:37:23,636 --> 00:37:27,086
We're also shipping a brand
new Apple TV Remote app.


643
00:37:27,086 --> 00:37:29,706
And it's available as a
seed, so please download


644
00:37:30,066 --> 00:37:31,766
and test your app with it.


645
00:37:33,136 --> 00:37:37,156
And with ReplayKit and
SpriteKit support directly


646
00:37:37,156 --> 00:37:42,096
from Focus Engine, game
experiences are even better.


647
00:37:42,096 --> 00:37:48,196
And finally, users can set
their system appearance


648
00:37:48,386 --> 00:37:49,016
to their liking.


649
00:37:50,706 --> 00:37:53,296
We hope you're excited
by what you've seen


650
00:37:53,846 --> 00:37:57,026
and you can learn even more
throughout the great many


651
00:37:57,026 --> 00:37:58,246
sessions this week.


652
00:37:58,846 --> 00:38:03,526
And the Apple TV
Tech Talk videos


653
00:38:03,526 --> 00:38:06,316
from earlier this
year are very useful


654
00:38:06,316 --> 00:38:07,746
in guiding you through
the basics.


655
00:38:08,056 --> 00:38:12,116
And they're available at
developer.apple.com as well.


656
00:38:12,116 --> 00:38:15,736
And of course, all this
information is available


657
00:38:16,096 --> 00:38:16,876
on the session link.


658
00:38:18,276 --> 00:38:20,306
Finally, we can't wait


659
00:38:20,306 --> 00:38:23,256
to see the great things you
create for the future of TV.


660
00:38:24,426 --> 00:38:25,386
Thank you so much for coming,


661
00:38:25,386 --> 00:38:26,836
and enjoy the rest
of the conference.


662
00:38:27,508 --> 00:38:29,508
[ Applause ]

