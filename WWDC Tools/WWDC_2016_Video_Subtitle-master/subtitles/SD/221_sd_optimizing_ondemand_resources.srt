1
00:00:06,516 --> 00:00:17,516
[ Music ]


2
00:00:18,516 --> 00:00:25,366
[ Applause ]


3
00:00:25,866 --> 00:00:28,216
>> Welcome to Optimizing
On-Demand Resources.


4
00:00:28,306 --> 00:00:32,566
I'm Bill Bumgarner with
the tvOS Engineering Team.


5
00:00:32,776 --> 00:00:36,756
So in this session, well,
in the, in last year's WWDC


6
00:00:36,756 --> 00:00:39,496
and in the developer
kitchens throughout the year,


7
00:00:39,496 --> 00:00:42,706
we've covered really how
to use on-demand resources.


8
00:00:43,076 --> 00:00:44,676
In this session, we
really want to focus


9
00:00:44,676 --> 00:00:47,356
on how you optimize the use
of them, and in particular,


10
00:00:47,816 --> 00:00:50,456
how you polish the user
experience to really make


11
00:00:50,456 --> 00:00:52,406
for a fabulous user experience.


12
00:00:53,136 --> 00:00:55,076
So we're going to look
at a basic overview


13
00:00:55,076 --> 00:00:56,206
of some of the motivations.


14
00:00:56,276 --> 00:01:00,216
How you assign tags, the use of
the API's, and then we're going


15
00:01:00,216 --> 00:01:02,486
to get into how you
optimize that first launch


16
00:01:02,486 --> 00:01:06,356
and how you optimize the
ongoing user experience as well


17
00:01:06,356 --> 00:01:10,046
as we'll look at optimizing
app updates, and we will get


18
00:01:10,046 --> 00:01:13,756
into some of the
implementation details.


19
00:01:13,756 --> 00:01:17,936
So why? Why did we do
this on-demand resources?


20
00:01:17,986 --> 00:01:20,846
Well, if we look at a
traditional application,


21
00:01:20,986 --> 00:01:24,526
it's composed of an application
binary and a bunch of resources,


22
00:01:24,636 --> 00:01:26,796
and together these
make your app bundle.


23
00:01:26,856 --> 00:01:29,486
This is what gets mastered,
uploaded to the store,


24
00:01:29,856 --> 00:01:33,036
and this is what your
customers download and install,


25
00:01:33,036 --> 00:01:34,536
and over time, they'll download


26
00:01:34,536 --> 00:01:36,446
and install a bunch
of applications.


27
00:01:37,296 --> 00:01:39,996
But if we look at the use
patterns of these applications,


28
00:01:39,996 --> 00:01:45,236
what we notice is that only some
of the resources are used a lot.


29
00:01:45,876 --> 00:01:47,666
Some of the resources
may have been used once


30
00:01:47,666 --> 00:01:49,736
at the tutorial level
or something like that,


31
00:01:50,416 --> 00:01:53,366
and this ends up eating
up a lot of disk space.


32
00:01:53,976 --> 00:01:56,386
And it also means the
user has to kind of think


33
00:01:56,386 --> 00:01:58,426
about what they want to keep and
what they don't want to keep,


34
00:01:58,426 --> 00:01:59,996
and we don't really
want to make our users


35
00:01:59,996 --> 00:02:01,236
into system administrators.


36
00:02:02,756 --> 00:02:06,356
So with an on-demand resources
app, what we're really trying


37
00:02:06,356 --> 00:02:09,015
to optimize is optimize
that resource usage


38
00:02:09,015 --> 00:02:11,196
up around what is being used,


39
00:02:11,366 --> 00:02:14,946
and make sure it's available
before the user actually notices


40
00:02:14,946 --> 00:02:16,016
it needs to be downloaded.


41
00:02:17,186 --> 00:02:20,606
So we take your traditional app,
and we divide those resources


42
00:02:20,606 --> 00:02:24,796
up into the bundled resources
and the on-demand resources


43
00:02:24,796 --> 00:02:26,516
that are not actually
on the system


44
00:02:26,516 --> 00:02:28,276
when the app is installed
necessarily.


45
00:02:29,246 --> 00:02:33,386
Now, there was some
misconceptions in the last year


46
00:02:33,546 --> 00:02:35,946
about the size of
tvOS applications.


47
00:02:37,006 --> 00:02:38,606
There was a, this notion


48
00:02:38,606 --> 00:02:40,626
that they were limited
to 200 megabytes.


49
00:02:40,746 --> 00:02:41,866
That's not actually true.


50
00:02:42,556 --> 00:02:48,256
On tvOS, the main app bundle
is 200 megabytes, and iOS,


51
00:02:48,256 --> 00:02:51,236
it can be up to 4 gigabytes,
however, in both cases,


52
00:02:51,276 --> 00:02:54,096
they can have up to 20 gigabytes
of on-demand resources.


53
00:02:55,996 --> 00:02:58,156
So on-demand resources.


54
00:02:58,926 --> 00:03:02,356
They provide dynamically
loaded content that's available


55
00:03:02,356 --> 00:03:05,516
on demand or can be downloaded
when the app's installed.


56
00:03:06,816 --> 00:03:08,056
It's hosted on the App Store,


57
00:03:08,556 --> 00:03:10,576
including hosting
across versions.


58
00:03:10,806 --> 00:03:12,716
So upgrades aren't a problem.


59
00:03:12,866 --> 00:03:14,276
Obviously, if you have
a user that sticks


60
00:03:14,276 --> 00:03:15,816
on an old version,
it'll still work.


61
00:03:18,126 --> 00:03:20,656
These are downloadable during
application installation.


62
00:03:20,656 --> 00:03:23,916
They're also downloadable
during runtime by your request,


63
00:03:24,666 --> 00:03:27,546
and you can control the priority
with which they're downloaded,


64
00:03:27,546 --> 00:03:28,916
and you can shuffle
that priority


65
00:03:28,916 --> 00:03:32,026
around as the user may change
their mind and move around


66
00:03:32,026 --> 00:03:33,426
and do whatever they want to do.


67
00:03:34,326 --> 00:03:36,976
As well, all of this works
together with the system


68
00:03:36,976 --> 00:03:39,686
to provide intelligent
content caching as well


69
00:03:39,686 --> 00:03:40,756
as intelligent purging.


70
00:03:41,636 --> 00:03:43,626
Again, let's get the
user out of the game


71
00:03:43,626 --> 00:03:44,946
of administrating their systems.


72
00:03:44,946 --> 00:03:49,446
So the benefits to your app
are small or main app bundle,


73
00:03:50,186 --> 00:03:51,866
which means it's fast
or initial download.


74
00:03:52,166 --> 00:03:54,216
What it means it's a
faster period of time


75
00:03:54,216 --> 00:03:55,826
between which they
click that buy button


76
00:03:55,826 --> 00:03:57,146
and they're using your program.


77
00:03:57,696 --> 00:04:03,466
As well, you get a lot richer
app content, up to 20 gigs.


78
00:04:03,516 --> 00:04:07,066
I mean, that's a lot of space.


79
00:04:07,186 --> 00:04:10,196
And you can, there can be more
apps installed on the system.


80
00:04:10,276 --> 00:04:13,286
They're ready to run,
and it reduces the need


81
00:04:13,286 --> 00:04:14,356
to manage that storage.


82
00:04:14,546 --> 00:04:16,846
It also means that, you know,
they take a bunch of pictures,


83
00:04:16,846 --> 00:04:19,016
and some of the on-demand
might get flushed out,


84
00:04:19,156 --> 00:04:20,926
and that's all automatic.


85
00:04:22,055 --> 00:04:24,296
So how do we do this?


86
00:04:24,296 --> 00:04:25,176
How do we adopt this?


87
00:04:25,176 --> 00:04:28,156
Well, the first thing you have
to do is you have to assign tags


88
00:04:28,396 --> 00:04:31,696
to all those resources,
and you do that by looking


89
00:04:31,696 --> 00:04:34,176
within your application,
looking at all those resources,


90
00:04:34,176 --> 00:04:37,126
and figuring out the roles each
resource plays within your app,


91
00:04:37,556 --> 00:04:38,486
and when you need them.


92
00:04:39,016 --> 00:04:42,596
And then you go into
Xcode, and you assign tags.


93
00:04:42,596 --> 00:04:43,986
Now tags are nothing magical.


94
00:04:43,986 --> 00:04:44,966
They're just strings.


95
00:04:45,896 --> 00:04:49,986
Just any old string you
want, Level 1, whatever,


96
00:04:50,746 --> 00:04:52,846
and they can be applied
to a single asset


97
00:04:52,846 --> 00:04:55,286
or a single resource,
a sound file,


98
00:04:55,286 --> 00:04:58,686
a texture, an image, whatever.


99
00:04:58,756 --> 00:05:01,986
Pure data, or they can be
assigned to entire folders.


100
00:05:02,556 --> 00:05:05,346
As well, any given resource
can have multiple tags


101
00:05:05,346 --> 00:05:07,446
because it might
play multiple roles.


102
00:05:08,336 --> 00:05:11,506
So let's go back and let's look
at our GreatGame, and let's look


103
00:05:11,506 --> 00:05:13,666
at those resources,
and, specifically,


104
00:05:13,666 --> 00:05:15,806
let's break those
resources out by role.


105
00:05:16,516 --> 00:05:16,946
So in this,


106
00:05:16,946 --> 00:05:19,336
it's a straightforward
level-based application,


107
00:05:20,576 --> 00:05:23,356
and it has resources
that are required always.


108
00:05:23,526 --> 00:05:25,416
These are the ones that,
like, your launch screen,


109
00:05:25,416 --> 00:05:27,376
your splash screen,
maybe the setting screen.


110
00:05:27,376 --> 00:05:27,946
That kind of thing.


111
00:05:27,946 --> 00:05:31,596
And then it has resources that
are in the role of supplying


112
00:05:31,776 --> 00:05:35,406
for each level as well as maybe
something for a purchasable item


113
00:05:35,406 --> 00:05:36,486
or an in-app purchase.


114
00:05:38,136 --> 00:05:40,466
And to tag these, it's
pretty straightforward.


115
00:05:40,626 --> 00:05:42,366
Just give them the same
name as their role.


116
00:05:44,616 --> 00:05:47,766
So when we do these,
when we look at these,


117
00:05:47,766 --> 00:05:49,706
what's the strategy for
tagging these things?


118
00:05:50,036 --> 00:05:53,116
Well, only put in the
main bundle the resources


119
00:05:53,116 --> 00:05:54,576
that are absolutely
positively needed


120
00:05:54,576 --> 00:05:55,866
by the application all the time.


121
00:05:56,646 --> 00:05:57,806
Your loading screen.


122
00:05:57,806 --> 00:05:58,536
Your splash screen.


123
00:05:58,536 --> 00:06:00,696
That kind of thing.


124
00:06:00,886 --> 00:06:04,386
And then you apply tags to
everything else that's there.


125
00:06:05,406 --> 00:06:09,466
And each tag can be applied
to up to 512 megabyte


126
00:06:09,576 --> 00:06:11,196
of assets or resources.


127
00:06:11,636 --> 00:06:13,536
However, we really
recommend that you stick


128
00:06:13,536 --> 00:06:15,716
around that 64-megabyte
limit simply


129
00:06:15,716 --> 00:06:18,396
because that makes the
downloads that much faster


130
00:06:18,396 --> 00:06:19,966
and less perceptible
to the user.


131
00:06:20,926 --> 00:06:23,686
And, again, you can have more
than one tag per resource,


132
00:06:24,216 --> 00:06:27,426
and it, whenever you use one
of the tags, it will pull


133
00:06:27,426 --> 00:06:29,856
down all the resources
as appropriate.


134
00:06:30,266 --> 00:06:34,916
So now that we've got
everything organized and tagged,


135
00:06:35,136 --> 00:06:36,776
let's look at the runtime side.


136
00:06:37,456 --> 00:06:42,086
Within the runtime, we tried to
make the API very simple, and,


137
00:06:42,086 --> 00:06:43,706
in fact, it's only one class.


138
00:06:44,706 --> 00:06:47,066
There's the bundle
resource request class.


139
00:06:47,736 --> 00:06:51,986
Now you create an instance of
this to manage all the access


140
00:06:51,986 --> 00:06:53,346
to your on-demand resources.


141
00:06:53,996 --> 00:06:56,626
It's created with a
tag or a set of tags,


142
00:06:56,926 --> 00:06:59,366
and it has some other
options for managing it.


143
00:06:59,766 --> 00:07:03,096
You use it to begin and end
accessing to those resources.


144
00:07:03,176 --> 00:07:06,366
Begin accessing is what triggers
a download if necessary,


145
00:07:06,856 --> 00:07:09,426
and end accessing is what tells
the system, hey, I'm done.


146
00:07:10,416 --> 00:07:12,756
And on this object, you
can also set the priority.


147
00:07:12,966 --> 00:07:14,856
If you have a particularly
large download


148
00:07:14,856 --> 00:07:16,336
or a particularly
slow connection,


149
00:07:16,336 --> 00:07:19,416
you can track progress, and
there's also the possibility


150
00:07:19,416 --> 00:07:21,896
of an error, which we'll
talk about in a minute.


151
00:07:22,436 --> 00:07:23,366
One of the interesting things


152
00:07:23,366 --> 00:07:25,996
about this class is each
instance is one shot.


153
00:07:25,996 --> 00:07:28,356
They are very lightweight,
very cheap to create.


154
00:07:28,356 --> 00:07:30,106
So that means when
you create one,


155
00:07:30,606 --> 00:07:32,296
and you call begin
accessing on it


156
00:07:32,376 --> 00:07:34,976
after you've called end
accessing, that object's done.


157
00:07:35,476 --> 00:07:39,386
Create a new one.


158
00:07:39,386 --> 00:07:42,836
And one concept that we find
is very important to take


159
00:07:42,836 --> 00:07:47,636
to heart is that the request
is decoupled from access.


160
00:07:48,606 --> 00:07:52,506
So you decouple when
you make that request


161
00:07:52,506 --> 00:07:54,816
from when you're going to
use the resource, and we can,


162
00:07:54,816 --> 00:07:56,516
we'll cover this in
the predictive loading.


163
00:07:56,646 --> 00:07:58,446
So we can predict what
the user's going to do


164
00:07:58,446 --> 00:08:00,316
to make sure they never
see those loading screens.


165
00:08:00,316 --> 00:08:06,666
So looking at the actual code,
it's really straightforward


166
00:08:06,666 --> 00:08:08,946
to initialize a bundle
resource request.


167
00:08:08,946 --> 00:08:11,986
Just give it a set of tags,
and you have your request.


168
00:08:12,726 --> 00:08:14,806
If you want to begin the
accessing those tags,


169
00:08:15,166 --> 00:08:18,576
you call begin accessing, and
it has a completion handler,


170
00:08:18,576 --> 00:08:20,806
and that completion handler
will be called with an error


171
00:08:20,806 --> 00:08:22,846
if there is an error, or
it will be called no error,


172
00:08:23,176 --> 00:08:24,826
and you're resources
are available.


173
00:08:25,676 --> 00:08:28,336
To get at the resources,
you use the bundle API.


174
00:08:28,336 --> 00:08:31,206
So you grab the NS bundle
instance, I'm sorry,


175
00:08:31,466 --> 00:08:34,846
the bundle instance [inaudible]
renaming, from the request,


176
00:08:34,905 --> 00:08:38,216
and you just use the normal
resource request methods


177
00:08:38,216 --> 00:08:40,346
on bundle to get a hold of that.


178
00:08:40,626 --> 00:08:44,145
And once you're done, it's very
important to call end accessing.


179
00:08:44,496 --> 00:08:46,916
This tells the system that
you're done with that resource.


180
00:08:47,216 --> 00:08:48,176
Now it's very important to note


181
00:08:48,176 --> 00:08:50,156
that that doesn't mean the
system's actually going


182
00:08:50,156 --> 00:08:51,046
to delete the resource.


183
00:08:51,496 --> 00:08:53,376
Our systems are very lazy.


184
00:08:53,376 --> 00:08:54,836
They don't want to
do any extra work,


185
00:08:55,006 --> 00:08:57,896
and deleting stuff's extra work.


186
00:08:58,086 --> 00:09:00,676
So when you're loading
resources,


187
00:09:00,976 --> 00:09:02,306
you can control the priority.


188
00:09:02,526 --> 00:09:04,946
Like, say you're moving
through your, a game, and,


189
00:09:04,946 --> 00:09:06,326
and the users change their mind,


190
00:09:06,326 --> 00:09:07,946
and you were downloading
this level over here,


191
00:09:07,946 --> 00:09:09,416
now you need to download
Level 5.


192
00:09:10,276 --> 00:09:12,096
Well, you start at
the begin access.


193
00:09:12,096 --> 00:09:14,006
You can go, and you can
change the loading priority


194
00:09:14,006 --> 00:09:16,086
to bump the priority
on the Level 5 stuff


195
00:09:16,416 --> 00:09:18,286
and decrease the
priority on Level 3


196
00:09:18,286 --> 00:09:20,386
if you think they might go
back, or you can end it.


197
00:09:21,616 --> 00:09:23,386
It's just a value
from zero to one,


198
00:09:24,016 --> 00:09:26,456
but there is the
special urgent priority.


199
00:09:27,116 --> 00:09:30,906
There will be times when the
player has decided to go off


200
00:09:30,906 --> 00:09:33,016
in a direction that you couldn't
possibly have predicted,


201
00:09:33,486 --> 00:09:36,106
and you need to just
download everything right now.


202
00:09:36,586 --> 00:09:40,736
And in this case, this special
high urgency loading priority


203
00:09:40,866 --> 00:09:41,646
can be used.


204
00:09:42,006 --> 00:09:43,546
It suspends all other download,


205
00:09:44,266 --> 00:09:46,366
and it also maximizes
the throughput.


206
00:09:46,366 --> 00:09:47,606
So there's no network
throttling,


207
00:09:48,306 --> 00:09:51,636
and it also maximizes CPU usage
dedicated to that download.


208
00:09:54,716 --> 00:09:57,246
Finally, there's
conditional requests.


209
00:09:57,696 --> 00:10:00,546
Now a conditional request
can be used to check to see


210
00:10:00,546 --> 00:10:01,976
if the resources has
already been downloaded.


211
00:10:03,286 --> 00:10:06,436
So if you remember when I
said end accessing doesn't


212
00:10:06,436 --> 00:10:08,596
necessarily delete
resources, well,


213
00:10:09,496 --> 00:10:11,296
the player's been
playing a game.


214
00:10:11,296 --> 00:10:13,096
They've gone through
Level 1, 2, and 3.


215
00:10:13,326 --> 00:10:15,606
You've ended accessing
to Level 1, 2, and 3.


216
00:10:16,686 --> 00:10:17,696
They quit the game.


217
00:10:17,696 --> 00:10:18,816
They've gone off and
done something else.


218
00:10:18,816 --> 00:10:20,256
They come back, relaunch
the game,


219
00:10:20,936 --> 00:10:22,566
and they want to replay Level 1.


220
00:10:23,016 --> 00:10:26,046
Well, you can use conditionally
at, or say they want


221
00:10:26,046 --> 00:10:27,186
to select between levels.


222
00:10:27,506 --> 00:10:30,146
You can use conditionally
begin accessing


223
00:10:30,596 --> 00:10:32,226
to check what levels
are already downloaded,


224
00:10:32,226 --> 00:10:33,436
and give them indication


225
00:10:33,436 --> 00:10:34,766
of what's already
available to play.


226
00:10:35,366 --> 00:10:37,876
Or if they dive into a
level, and you've broken


227
00:10:37,876 --> 00:10:40,186
up your resources by
role within the level,


228
00:10:40,186 --> 00:10:42,306
maybe you optimize the
first part of the level


229
00:10:42,306 --> 00:10:45,686
to only showing the trees and
bushes and enemies that happen


230
00:10:45,686 --> 00:10:48,866
to be on disk at that time
while you download the rest


231
00:10:48,866 --> 00:10:49,706
of it in the background.


232
00:10:50,516 --> 00:10:52,526
So all of this is
about you being able


233
00:10:52,526 --> 00:10:54,396
to avoid loading screens
whenever possible.


234
00:10:54,846 --> 00:10:58,176
And if the items are
already downloaded,


235
00:10:58,176 --> 00:11:00,596
this works exactly
like begin accessing.


236
00:11:01,126 --> 00:11:04,876
And as well, as always,
call end accessing,


237
00:11:04,966 --> 00:11:08,776
even if you got the
callback, and it was false,


238
00:11:08,776 --> 00:11:11,256
and you decided you didn't
want to trigger it download,


239
00:11:11,446 --> 00:11:12,646
always call end accessing.


240
00:11:14,676 --> 00:11:17,816
So now you have a
working application,


241
00:11:22,476 --> 00:11:24,296
but let's look at
that first launch.


242
00:11:24,716 --> 00:11:30,436
And let's look at a timeline
in particular, and we're going


243
00:11:30,436 --> 00:11:34,156
to go with a timeline from
the moment the user buys the


244
00:11:34,426 --> 00:11:37,506
application in the store, it
gets downloaded, it's installed,


245
00:11:38,846 --> 00:11:41,496
and then the first launch
happens, and what do we do.


246
00:11:41,496 --> 00:11:44,286
The first thing we do, we
begin accessing Level 1,


247
00:11:44,846 --> 00:11:45,816
which triggers a download,


248
00:11:46,356 --> 00:11:48,846
and then the player can play
the game, and then they get


249
00:11:48,846 --> 00:11:51,936
to Level 2, and we
do begin accessing,


250
00:11:52,366 --> 00:11:53,806
and it downloads, and they wait.


251
00:11:54,156 --> 00:11:56,406
They play, and we
keep doing this.


252
00:11:56,576 --> 00:11:58,976
Level 3, download, wait, play.


253
00:12:00,046 --> 00:12:02,966
And even with the purchasable
items, in-app purchases.


254
00:12:03,496 --> 00:12:05,096
Download, wait, play.


255
00:12:06,816 --> 00:12:09,506
That's not a good
user experience.


256
00:12:10,156 --> 00:12:13,396
Making the user constantly
look at loading screens, no.


257
00:12:13,706 --> 00:12:14,526
We're not going to do that.


258
00:12:14,706 --> 00:12:16,766
So the first thing we're
going to do is we're going


259
00:12:16,766 --> 00:12:19,086
to take advantage of features
and on-demand resources


260
00:12:19,086 --> 00:12:22,646
that are built in to
optimize that first launch


261
00:12:22,646 --> 00:12:24,566
from the get go, and the
first thing we're going


262
00:12:24,566 --> 00:12:27,016
to use is initial install tags.


263
00:12:27,986 --> 00:12:33,296
And the next thing we'll
use are the pre-fetch tags.


264
00:12:33,296 --> 00:12:37,136
And with these in place, then
that Level 1 will be downloaded


265
00:12:37,136 --> 00:12:38,806
and installed when
the app is purchased,


266
00:12:39,316 --> 00:12:42,426
and Level 2 will be downloaded
and installed immediately after,


267
00:12:42,966 --> 00:12:45,546
and hopefully the user can
dive in and just start playing.


268
00:12:46,046 --> 00:12:48,886
And then we'll look at
predictive download,


269
00:12:48,886 --> 00:12:51,136
but first let's take
a step and look


270
00:12:51,136 --> 00:12:53,186
at how we can configure
the initial pre-fetch.


271
00:12:54,336 --> 00:12:57,386
So initial install tags.


272
00:12:57,386 --> 00:13:01,206
These are tags that are marked
up in Xcode to be downloaded


273
00:13:01,206 --> 00:13:03,386
as a part of your
application installation.


274
00:13:04,146 --> 00:13:05,616
You can have up to 2 gigabytes


275
00:13:05,616 --> 00:13:07,286
with these resources,
which is a lot.


276
00:13:08,566 --> 00:13:11,496
It's part of the size shown in
the App Store, and, in fact,


277
00:13:11,496 --> 00:13:14,126
when the little download
progress indicator goes,


278
00:13:14,126 --> 00:13:16,856
that reflects the initial
install tags as well.


279
00:13:17,186 --> 00:13:20,086
The pre-fetch tags, they're
a little bit different,


280
00:13:20,726 --> 00:13:23,546
but you can have as many
pre-fetch that's as you want


281
00:13:23,616 --> 00:13:27,216
up to 4 gigabytes minus the
size of the initial install.


282
00:13:28,326 --> 00:13:30,416
And it follows an order
specified in Xcode,


283
00:13:30,536 --> 00:13:33,686
and the pre-fetch tags
are downloaded immediately


284
00:13:33,686 --> 00:13:36,726
after the initial, and they
don't prevent app launch.


285
00:13:37,716 --> 00:13:40,036
So the user will be able
to dive into the game


286
00:13:40,036 --> 00:13:42,276
and start playing even though
the pre-fetch stuff's coming


287
00:13:42,276 --> 00:13:43,176
down in the background.


288
00:13:44,166 --> 00:13:48,996
And in Xcode, this user
interface looks like this.


289
00:13:48,996 --> 00:13:52,476
This is the resource
tags inspector inside


290
00:13:52,476 --> 00:13:54,486
of your target editor
for your application.


291
00:13:54,656 --> 00:13:57,716
It's got three sections:
The initial, the pre-fetch,


292
00:13:57,816 --> 00:13:59,566
and the download
only on demand tags.


293
00:14:00,276 --> 00:14:01,456
You move stuff in the initial.


294
00:14:01,456 --> 00:14:03,706
These are the ones that will
be bundled with your app


295
00:14:04,086 --> 00:14:05,576
and installed at the same time.


296
00:14:06,766 --> 00:14:08,376
The pre-fetch, these
will be downloaded


297
00:14:08,376 --> 00:14:11,806
after in the order you see on
the screen, and then, finally,


298
00:14:11,806 --> 00:14:14,226
the download only on
demand are the ones


299
00:14:14,226 --> 00:14:15,376
who will only be downloaded


300
00:14:15,376 --> 00:14:17,446
when you begin accessing
on those tags.


301
00:14:18,996 --> 00:14:21,156
So going back to our timeline.


302
00:14:21,156 --> 00:14:23,706
We talked about predictive
loading very briefly,


303
00:14:23,706 --> 00:14:25,056
but what does that really mean?


304
00:14:25,336 --> 00:14:26,926
Well, we got our initial.


305
00:14:27,366 --> 00:14:28,406
We got our pre-fetched,


306
00:14:28,406 --> 00:14:30,896
and we're still making
the user wait at Level 3.


307
00:14:31,566 --> 00:14:35,506
So, instead, if we simply begin
accessing the Level 3 tags


308
00:14:36,126 --> 00:14:39,396
somewhere in Level 1 or 2, it'll
probably be downloaded and ready


309
00:14:39,396 --> 00:14:41,796
to play by the time the
player gets to there.


310
00:14:42,336 --> 00:14:45,866
As well with purchasable items,
if you have a particular point


311
00:14:45,866 --> 00:14:50,916
in your app, game, or whatever,
that you think it's likely


312
00:14:50,916 --> 00:14:53,556
or you hope the player's going
to go and do an in-app purchase,


313
00:14:53,966 --> 00:14:55,366
go ahead and begin
accessing there.


314
00:14:55,926 --> 00:14:57,906
You don't give them access
until you got the receipt,


315
00:14:58,176 --> 00:15:00,276
but at least it'll be there,
and there'll be no waiting.


316
00:15:00,796 --> 00:15:04,146
Now we've got one big green
timeline and a very happy user.


317
00:15:05,936 --> 00:15:09,656
We've talked about
this level-based game,


318
00:15:10,066 --> 00:15:12,116
which is a very linear
access pattern.


319
00:15:12,806 --> 00:15:14,886
It's very convenient for
making beautiful slides.


320
00:15:14,966 --> 00:15:15,996
It's not the real world.


321
00:15:16,696 --> 00:15:20,026
In a linear access
pattern, the majority


322
00:15:20,026 --> 00:15:21,606
of the assets are
going to be used.


323
00:15:21,676 --> 00:15:23,366
They're very much going
to be used in order.


324
00:15:23,996 --> 00:15:26,206
Your tag size isn't
really that critical


325
00:15:26,576 --> 00:15:29,226
because you can always stay
well ahead of the user in terms


326
00:15:29,226 --> 00:15:35,006
of getting accessing, but
the issue is that, of course,


327
00:15:35,196 --> 00:15:36,416
nothing's ever linear.


328
00:15:37,296 --> 00:15:40,946
And in particular, a lot
of times we'll have an app


329
00:15:40,946 --> 00:15:42,946
that has a very random
access pattern,


330
00:15:43,976 --> 00:15:45,836
and the player may go
all over the place,


331
00:15:45,836 --> 00:15:48,226
or there may be things that are
shared amongst levels, or they,


332
00:15:48,276 --> 00:15:50,906
you know, they may select
certain configurations,


333
00:15:50,906 --> 00:15:54,266
or they may buy certain in-app
purchases, and in this case,


334
00:15:54,516 --> 00:15:58,126
the goal is really to try to
predict as much as possible


335
00:15:58,126 --> 00:16:00,166
to try to pull down stuff
before the user needs it,


336
00:16:00,166 --> 00:16:03,406
but in the case where you have
to pull it down really on demand


337
00:16:03,406 --> 00:16:06,876
at that moment, stick
to small tag groups,


338
00:16:07,916 --> 00:16:10,466
and that will make
very fast downloads.


339
00:16:11,166 --> 00:16:13,746
And you can download
sets of tags proactively.


340
00:16:13,746 --> 00:16:16,196
It's OK to go and kind of
just guess at what's going


341
00:16:16,196 --> 00:16:20,176
to be needed and let them
be, put down on disk because,


342
00:16:20,176 --> 00:16:22,356
of course, we have this
intelligent caching mechanism


343
00:16:22,356 --> 00:16:24,176
that's working in the
background to make sure


344
00:16:24,176 --> 00:16:25,826
that the right things
get deleted


345
00:16:25,916 --> 00:16:27,196
if there is disk pressure.


346
00:16:28,186 --> 00:16:30,746
And, again, end accessing
doesn't mean deletion.


347
00:16:30,886 --> 00:16:33,006
So if you go off, and you
predictively download a bunch


348
00:16:33,006 --> 00:16:34,946
of stuff, and then you don't
ever need it, well, that's OK.


349
00:16:34,946 --> 00:16:36,946
Just end accessing, and
it'll probably still be there


350
00:16:36,946 --> 00:16:39,596
when you do need it
whenever in the future.


351
00:16:41,056 --> 00:16:43,656
Now there's another pattern,
which is kind of in between,


352
00:16:44,646 --> 00:16:46,576
and that's your explorative
access pattern,


353
00:16:46,576 --> 00:16:49,596
and this is the one where it's,
you know, the, that you wonder


354
00:16:49,596 --> 00:16:52,726
from village to village on
quests and things like that.


355
00:16:52,726 --> 00:16:54,696
And in this case, there
is limited prediction.


356
00:16:55,346 --> 00:16:59,806
Many possibilities will not
be used, but you often are


357
00:16:59,806 --> 00:17:01,556
at a branch, and when
you're at the branch,


358
00:17:01,716 --> 00:17:03,746
you can load a subset
of your tags.


359
00:17:03,926 --> 00:17:05,566
Oh, the user make a
left, make a right.


360
00:17:05,566 --> 00:17:08,445
So I'll load the left tag and
the right tag, and then as soon


361
00:17:08,445 --> 00:17:11,566
as the user makes the
decision, expresses their intent


362
00:17:11,566 --> 00:17:14,915
to go right into accessing on
left, let that download stop,


363
00:17:15,396 --> 00:17:19,046
focus on the right, and start
predicting a one step ahead.


364
00:17:20,876 --> 00:17:23,996
So now we have this working app.


365
00:17:23,996 --> 00:17:27,336
We've got a great user
experience, and that's all well


366
00:17:27,336 --> 00:17:31,436
and good, but let's look at some
of the implementation details


367
00:17:31,436 --> 00:17:35,466
that are going on behind the
scenes that you can be aware


368
00:17:35,466 --> 00:17:37,886
of to optimize this
experience even further.


369
00:17:41,556 --> 00:17:46,386
And in particular, as I said,
the app bundles, they're limited


370
00:17:46,386 --> 00:17:50,186
to 4 gigs on iOS, 200 megabytes
on tvOS, but you can have


371
00:17:50,186 --> 00:17:54,046
up to 20 gigabytes of on-demand
resources, and of those,


372
00:17:54,046 --> 00:17:56,416
up to 2 gigs will be downloaded
and installed with the app,


373
00:17:56,416 --> 00:18:00,406
and up to 4 gigs will be
pre-fetched minus those 2 gigs


374
00:18:00,406 --> 00:18:01,846
or up to 2 gigs of install.


375
00:18:02,826 --> 00:18:04,946
There's some additional
numbers to keep in mind.


376
00:18:06,426 --> 00:18:07,816
You can have up to 2 gigabytes


377
00:18:07,816 --> 00:18:10,016
of resources active
at any one time.


378
00:18:10,356 --> 00:18:13,066
So you go and you begin
accessing on up to 2 gigabytes


379
00:18:13,066 --> 00:18:15,156
of tags, and those
will be downloaded,


380
00:18:15,156 --> 00:18:17,076
and they'll be made
available, and that's great.


381
00:18:17,746 --> 00:18:20,386
When you go over the 2
gigabytes, what happens is


382
00:18:20,386 --> 00:18:25,186
that the begin accessing method,
that callback gets an NS error


383
00:18:25,186 --> 00:18:28,576
that indicates that you are
out of tagged resource space.


384
00:18:28,976 --> 00:18:31,516
You need to go in to end
accessing on some current set


385
00:18:31,516 --> 00:18:35,336
of tags to free up some space
to allow more to be accessed.


386
00:18:35,816 --> 00:18:38,496
Now, reiterating this point
because there was another point


387
00:18:38,496 --> 00:18:42,956
of confusion, if you have 2 gigs
of tags that are pinned down,


388
00:18:43,566 --> 00:18:46,556
and you want to access more,
and you go into accessing on,


389
00:18:46,556 --> 00:18:51,226
on 500 meg of them, and pin
another 250, that 500 meg


390
00:18:51,226 --> 00:18:53,666
of resources are probably
not going to be deleted.


391
00:18:54,046 --> 00:18:57,036
They'll be around and available,
but it just lets the system know


392
00:18:57,036 --> 00:19:01,566
if things get dire, it
can go and clean them up.


393
00:19:01,826 --> 00:19:04,246
Any one tag, again,
up to 512 meg,


394
00:19:04,376 --> 00:19:06,156
try to stick to 64
megs or lower.


395
00:19:06,156 --> 00:19:11,916
And you can have up to
1,000 total asset packs.


396
00:19:13,176 --> 00:19:14,726
What the heck's an asset pack?


397
00:19:14,726 --> 00:19:16,966
Haven't mentioned
that word yet at all.


398
00:19:17,296 --> 00:19:22,196
Well, an asset pack is fallout
from the Xcode build system.


399
00:19:22,196 --> 00:19:24,256
It's the way your application
is built and mastered.


400
00:19:24,256 --> 00:19:26,986
It's the way the on-demand
resources are compiled together


401
00:19:27,306 --> 00:19:28,946
and managed by the store.


402
00:19:30,246 --> 00:19:32,876
If we look at our great
game, in this case,


403
00:19:32,876 --> 00:19:35,966
a role-playing game,
it doesn't matter.


404
00:19:35,966 --> 00:19:40,786
We have our tags, and as is
very typical, resources tend


405
00:19:40,786 --> 00:19:42,256
to be used more than once.


406
00:19:42,556 --> 00:19:44,676
Things get used from
Level 1 to Level 2.


407
00:19:45,036 --> 00:19:46,226
Enemies become friends.


408
00:19:46,226 --> 00:19:47,006
That kind of thing.


409
00:19:47,976 --> 00:19:51,516
So we have these
two resources here


410
00:19:51,856 --> 00:19:53,436
that then get used on Level 2.


411
00:19:54,026 --> 00:19:57,586
So they're tagged with Level
1 tags and Level 2 tags.


412
00:20:01,426 --> 00:20:03,266
So our tag set looks like this.


413
00:20:03,386 --> 00:20:06,736
We've got four resources with
one tag and two resources


414
00:20:06,736 --> 00:20:11,006
with two tags, and while
we only have four tags,


415
00:20:12,296 --> 00:20:13,996
this ends up with
six asset packs.


416
00:20:14,606 --> 00:20:18,496
Now if you think through
like a random access game,


417
00:20:19,156 --> 00:20:21,526
this could be a stumbling block.


418
00:20:21,526 --> 00:20:24,446
If you have a lot resources
that are shared across lots


419
00:20:24,446 --> 00:20:26,286
of different roles
such that many


420
00:20:26,286 --> 00:20:30,146
of those resources
have five, 10, 15 tags,


421
00:20:30,556 --> 00:20:34,036
then the cross product of all
those could end up exceeding


422
00:20:34,036 --> 00:20:36,916
that 1,000 tag or
1,000 asset pack limit,


423
00:20:36,916 --> 00:20:39,246
and that is something
to be aware of.


424
00:20:40,796 --> 00:20:46,246
So in the life cycle of any game
or any application, of course,


425
00:20:46,246 --> 00:20:47,786
you're going to have
application updates.


426
00:20:48,516 --> 00:20:50,176
You want to improve
that user experience,


427
00:20:50,176 --> 00:20:53,326
get the users coming back.


428
00:20:53,516 --> 00:20:57,076
And on-demand resources
have been optimized


429
00:20:57,076 --> 00:20:58,546
for application updates as well.


430
00:20:58,996 --> 00:21:01,666
A little bit, maybe
a little surprising,


431
00:21:02,846 --> 00:21:04,896
but if you think it
through, it makes sense.


432
00:21:04,896 --> 00:21:08,296
In particular, we start out
with our version 1.0 game,


433
00:21:08,296 --> 00:21:12,606
and we have a bunch of resources
in that game, bunch of tag ones


434
00:21:12,606 --> 00:21:16,476
and some main bundle ones, and
when we ship version 2, well,


435
00:21:16,476 --> 00:21:18,556
we've modified something
in the main bundle.


436
00:21:18,556 --> 00:21:20,876
We may have added some
resources to Level 1,


437
00:21:21,416 --> 00:21:23,346
modified a couple
things on Level 2.


438
00:21:23,346 --> 00:21:27,886
We added a whole new level,
and that's all well and good.


439
00:21:27,886 --> 00:21:30,036
So what happens across
the updates?


440
00:21:30,596 --> 00:21:36,476
So the first thing is
when you update resources,


441
00:21:36,476 --> 00:21:41,226
update tagged resources, nothing
is redownloaded automatically.


442
00:21:41,636 --> 00:21:43,896
It's redownloaded when
it's first accessed.


443
00:21:45,426 --> 00:21:48,316
We don't want to
redownload the tutorial level


444
00:21:48,666 --> 00:21:51,506
when the user's way beyond that.


445
00:21:52,576 --> 00:21:55,636
Any unchanged resources
will just stay on disk,


446
00:21:56,036 --> 00:21:58,916
and they can be accessed
without download.


447
00:22:00,316 --> 00:22:03,296
New resources, they'll be
downloaded when accessed.


448
00:22:03,706 --> 00:22:06,186
So, really, once again, it's
the system taking a very lazy


449
00:22:06,186 --> 00:22:06,896
approach to this.


450
00:22:06,896 --> 00:22:10,046
In this case, because we can't
predict what changes you've made


451
00:22:10,106 --> 00:22:11,996
to the app that are
going to be required


452
00:22:11,996 --> 00:22:14,766
by whatever state the player or
the user is left your app in,


453
00:22:15,436 --> 00:22:16,766
we're going to leave
it up to you


454
00:22:16,766 --> 00:22:20,976
to trigger the begin accessing
to trigger the updates


455
00:22:20,976 --> 00:22:22,166
and pull down the new stuff.


456
00:22:22,166 --> 00:22:24,596
And, in fact, on first
launch, you might want to go


457
00:22:24,596 --> 00:22:27,906
and begin accessing a couple of
your changed things to make sure


458
00:22:27,906 --> 00:22:30,996
that they are made available
before the user notices.


459
00:22:32,816 --> 00:22:38,056
So best practices for this.


460
00:22:38,466 --> 00:22:41,106
Just avoid making
unnecessary modifications


461
00:22:41,106 --> 00:22:44,436
to tagged resources, including
things, like, you know,


462
00:22:44,606 --> 00:22:47,666
we had a situation where
somebody made a spelling change


463
00:22:47,726 --> 00:22:48,696
and was surprised


464
00:22:48,696 --> 00:22:52,266
when everything got redownloaded
the first time they accessed it.


465
00:22:53,016 --> 00:22:57,206
If you change one
resource in an asset pack,


466
00:22:57,926 --> 00:22:59,226
it's going to trigger
the download


467
00:22:59,226 --> 00:23:01,516
of the whole asset
pack, and this is a,


468
00:23:01,766 --> 00:23:03,236
just an implementation detail.


469
00:23:03,586 --> 00:23:04,666
So keep that in mind.


470
00:23:04,666 --> 00:23:07,006
So what you can do instead
is, like, say, for example,


471
00:23:07,006 --> 00:23:09,866
in the case where we added
a couple of extra resources


472
00:23:09,866 --> 00:23:13,776
to Level 1, we can make
Level 1 update one tag,


473
00:23:14,146 --> 00:23:16,916
and then begin accessing on
both of those, pull them down,


474
00:23:16,916 --> 00:23:17,936
and when they're both available,


475
00:23:18,106 --> 00:23:19,886
then allow the user
to play Level 1.


476
00:23:20,426 --> 00:23:23,156
Keep those tags consistent,


477
00:23:23,696 --> 00:23:28,576
and from the beginning
you really want to design


478
00:23:28,866 --> 00:23:30,876
with a separation of
updateable content


479
00:23:30,876 --> 00:23:32,586
versus static content in mind.


480
00:23:33,096 --> 00:23:38,806
And all that means is, you
know, where you may have a tag


481
00:23:38,806 --> 00:23:41,876
for one single role in your
application, maybe you want


482
00:23:41,876 --> 00:23:45,096
to divide that tag into multiple
tags where it's something


483
00:23:45,096 --> 00:23:46,936
that you know will
probably never, ever change


484
00:23:47,316 --> 00:23:52,226
and a handful that will.


485
00:23:52,426 --> 00:23:54,366
Now how does all this contribute


486
00:23:54,366 --> 00:23:58,576
to the intelligent
content caching?


487
00:23:58,696 --> 00:24:02,636
So on tvOS, one of
the goals of the OS is


488
00:24:02,796 --> 00:24:07,286
to never have the user
be aware of this usage.


489
00:24:07,956 --> 00:24:10,006
Never have to go
and delete anything.


490
00:24:10,636 --> 00:24:12,766
Never even have to
think about it.


491
00:24:13,556 --> 00:24:16,596
And as a part of that, there's
this whole cache management


492
00:24:16,596 --> 00:24:18,226
system and automatic
purging system.


493
00:24:19,436 --> 00:24:22,706
And the system's going to
purge resources from the disk


494
00:24:22,886 --> 00:24:24,836
when there's a dire
need for disk space,


495
00:24:24,876 --> 00:24:27,286
and there's multiple
levels to it, and it starts


496
00:24:27,286 --> 00:24:29,406
out the lowest priority,
and we'll clean up caches


497
00:24:29,406 --> 00:24:30,406
and whatever, and
then it'll move


498
00:24:30,406 --> 00:24:31,816
up to higher and
higher priority.


499
00:24:32,366 --> 00:24:37,586
And so, again, pounding on
this point, it's important


500
00:24:37,586 --> 00:24:41,366
to ending access to a resource
when you're done with it,


501
00:24:41,536 --> 00:24:42,946
and that does not mean deletion.


502
00:24:46,456 --> 00:24:48,176
There's a number of variables


503
00:24:48,176 --> 00:24:50,106
that inform the system
about purge order.


504
00:24:50,646 --> 00:24:55,266
Obviously, least recently used
go away first, to a degree.


505
00:24:55,996 --> 00:24:59,816
You also have control over
the preservation priority.


506
00:25:00,436 --> 00:25:02,346
This preservation
priority can be a sign


507
00:25:02,346 --> 00:25:06,646
to the bundled resource request,
and it's a number from zero


508
00:25:06,646 --> 00:25:08,206
to one that just
determines when,


509
00:25:08,456 --> 00:25:10,846
what order the system
will delete stuff.


510
00:25:11,376 --> 00:25:13,336
It's isolated to
your application.


511
00:25:13,336 --> 00:25:14,156
So there's no cheating.


512
00:25:14,156 --> 00:25:17,006
It doesn't help you to
set everything to one.


513
00:25:17,006 --> 00:25:17,706
It just means we're going


514
00:25:17,706 --> 00:25:20,346
to blow everything away
if it gets that bad.


515
00:25:20,896 --> 00:25:23,106
And if your application's
running,


516
00:25:23,986 --> 00:25:26,206
it's going to be the
last one the system tries


517
00:25:26,206 --> 00:25:27,426
to purge resources from.


518
00:25:31,116 --> 00:25:33,476
And this is very important.


519
00:25:33,616 --> 00:25:35,606
Don't use temp or caches.


520
00:25:35,916 --> 00:25:37,686
I mean, obviously use them


521
00:25:37,686 --> 00:25:41,566
if you need some temporary stuff
or, you know, per session cache,


522
00:25:42,686 --> 00:25:45,856
but because we can't know
anything about the structure


523
00:25:45,856 --> 00:25:49,306
of the data in a temporary
cache, the system's going


524
00:25:49,306 --> 00:25:53,106
to treat those are purgable
at a pretty low priority.


525
00:25:53,686 --> 00:25:56,316
They're going to be purged
first, and when they're purged,


526
00:25:56,316 --> 00:26:00,246
they're purged in
their entirety.


527
00:26:00,246 --> 00:26:08,066
So, finally, in conclusion,
use on-demand resources.


528
00:26:08,286 --> 00:26:11,186
In particular on tvOS, the use


529
00:26:11,186 --> 00:26:14,166
of on-demand resources
really provides


530
00:26:14,166 --> 00:26:16,206
for a much more optimal
user experience.


531
00:26:16,206 --> 00:26:18,736
It leverages that always
on network connection.


532
00:26:19,376 --> 00:26:21,506
On iOS, things can be
a little bit trickier,


533
00:26:21,796 --> 00:26:22,956
but there's a number of ways


534
00:26:22,956 --> 00:26:24,396
that it can be used
very successfully.


535
00:26:24,996 --> 00:26:28,756
It will give you that
smaller app bundle,


536
00:26:29,286 --> 00:26:32,826
which gives you a much faster
customer acquirement time


537
00:26:33,516 --> 00:26:38,726
from store to your customer
playing your game using your


538
00:26:39,346 --> 00:26:42,046
program doing whatever
with your content.


539
00:26:42,616 --> 00:26:46,986
You get this richer app content.


540
00:26:46,986 --> 00:26:49,316
You now have 20 gigabytes
of space to play


541
00:26:49,316 --> 00:26:52,446
with to put together
whatever you want.


542
00:26:54,316 --> 00:26:57,016
And it also means for the user,


543
00:26:57,206 --> 00:26:58,336
they don't have to
think about it.


544
00:26:58,436 --> 00:27:00,796
They can just install as many
applications as they want.


545
00:27:00,826 --> 00:27:03,076
They don't have a barrier to
entry there, and they don't have


546
00:27:03,106 --> 00:27:04,286
to think about the storage.


547
00:27:05,996 --> 00:27:09,846
So that's on-demand
resources optimization.


548
00:27:10,316 --> 00:27:15,606
For more information, there's a
whole web page devoted to this.


549
00:27:16,156 --> 00:27:17,246
There was also a number


550
00:27:17,246 --> 00:27:19,366
of related sessions
earlier in the week.


551
00:27:19,836 --> 00:27:20,836
Encourage you to review them.


552
00:27:21,346 --> 00:27:21,686
Thank you.

