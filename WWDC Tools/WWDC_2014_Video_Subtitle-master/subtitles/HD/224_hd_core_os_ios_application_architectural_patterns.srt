1
00:00:12,066 --> 00:00:13,726
>> Welcome to Core
iOS Application


2
00:00:13,726 --> 00:00:14,826
Architectural Patterns.


3
00:00:15,196 --> 00:00:17,016
My name is Bill Dudney
and I work on UI kit.


4
00:00:17,016 --> 00:00:18,976
Thanks for being here.


5
00:00:19,516 --> 00:00:23,846
[ Applause ]


6
00:00:24,346 --> 00:00:25,426
>> So exciting!


7
00:00:25,426 --> 00:00:26,686
There's so much cool
stuff this year.


8
00:00:29,016 --> 00:00:31,456
Okay so by way of introduction,
what we're going to talk


9
00:00:31,456 --> 00:00:35,656
about today is sort of the list
of common patterns that we find


10
00:00:35,656 --> 00:00:39,656
across all of the frameworks
in iOS and Cocoa Touch.


11
00:00:40,606 --> 00:00:42,326
We are also going to
spend some time talking


12
00:00:42,326 --> 00:00:47,006
about how we can apply
these patterns to your code.


13
00:00:47,236 --> 00:00:48,766
How we can make our
applications better


14
00:00:48,766 --> 00:00:50,506
by understanding
these patterns, one,


15
00:00:50,556 --> 00:00:53,546
and then applying the concepts
defined in those patterns


16
00:00:53,896 --> 00:00:54,896
to the code that we write.


17
00:00:55,346 --> 00:00:59,056
All right, so common
patterns in UI kit and beyond.


18
00:00:59,546 --> 00:01:01,426
The great thing about
these common patterns is


19
00:01:01,426 --> 00:01:04,046
that once you understand
it in one context,


20
00:01:04,116 --> 00:01:07,256
the way that we use them
across all of Cocoa Touch ends


21
00:01:07,256 --> 00:01:08,846
up being very similar.


22
00:01:09,296 --> 00:01:12,296
So when you first look at
the list of documentation,


23
00:01:12,296 --> 00:01:13,576
we have all these frameworks.


24
00:01:13,576 --> 00:01:17,086
The core video, core audio,
core animation, foundation,


25
00:01:17,236 --> 00:01:18,446
core data, and so forth.


26
00:01:18,446 --> 00:01:19,826
It can be a little overwhelming.


27
00:01:19,826 --> 00:01:21,926
You look at that list
and say holy cow,


28
00:01:21,926 --> 00:01:24,966
that's a giant fire hose that
I have to ingest right now.


29
00:01:25,436 --> 00:01:27,426
Well the great thing,
though, is that, again,


30
00:01:27,426 --> 00:01:28,806
these patterns are used


31
00:01:28,806 --> 00:01:32,756
in a common way throughout
this whole stack of frameworks.


32
00:01:32,756 --> 00:01:35,496
So when you understand one
pattern in one framework,


33
00:01:35,906 --> 00:01:37,966
you can apply that knowledge
across the whole stack


34
00:01:37,966 --> 00:01:40,806
of frameworks, so it
really levels out the amount


35
00:01:40,806 --> 00:01:41,966
of learning that you have to do.


36
00:01:42,526 --> 00:01:44,466
So let's get started
with the first pattern.


37
00:01:44,466 --> 00:01:46,046
And that's target action.


38
00:01:46,466 --> 00:01:49,036
Now, target action
is a consistent way


39
00:01:49,276 --> 00:01:51,856
to connect controls
to custom logic.


40
00:01:52,136 --> 00:01:54,676
Things in your user interface
connected to the code


41
00:01:54,676 --> 00:01:57,086
that makes your application
what it is.


42
00:01:58,086 --> 00:01:59,756
So if you've ever
done this in X code,


43
00:02:00,086 --> 00:02:02,636
you have seen target
action in action.


44
00:02:02,856 --> 00:02:04,906
When you drag that
connection from the button


45
00:02:05,286 --> 00:02:07,246
to your view controller,
it's saying hey,


46
00:02:07,246 --> 00:02:10,576
whenever this button is
activated, kickoff this message.


47
00:02:11,826 --> 00:02:14,236
Here's an example from
one of our applications.


48
00:02:15,416 --> 00:02:17,006
This is the message application.


49
00:02:17,396 --> 00:02:19,556
And we have several
buttons on here.


50
00:02:19,896 --> 00:02:21,536
That top one, the cancel button.


51
00:02:21,536 --> 00:02:24,146
Of course when that's
tapped, that's going


52
00:02:24,146 --> 00:02:27,056
to send a cancel message, it's
going to delete the message


53
00:02:27,056 --> 00:02:30,016
and get rid of this
Presented View controller.


54
00:02:30,016 --> 00:02:34,676
When the user taps on send, it's
going to package up the message,


55
00:02:34,746 --> 00:02:36,596
push it off into the
interwebs, it's going to end


56
00:02:36,596 --> 00:02:39,486
up in whoever's device you're
having the conversation with.


57
00:02:40,766 --> 00:02:43,686
Now, the really cool
thing is these two classes


58
00:02:43,826 --> 00:02:46,516
that make these instances, the
classes for these instances,


59
00:02:46,586 --> 00:02:49,356
are from completely different
places in the class hierarchy.


60
00:02:49,846 --> 00:02:54,436
UI Bar Button item is a
subclass of NS Object.


61
00:02:54,936 --> 00:02:57,436
UI Button is a subclass
of UI Control.


62
00:02:57,436 --> 00:03:00,876
But both of them apply
this target action paradigm


63
00:03:01,176 --> 00:03:03,736
so that you don't really
have to think about the fact


64
00:03:03,736 --> 00:03:04,706
that they're different classes.


65
00:03:04,826 --> 00:03:08,296
They both apply this pattern
in a very consistent way.


66
00:03:08,606 --> 00:03:12,106
So once you understand it for
one, you understand it for both.


67
00:03:13,066 --> 00:03:15,816
Getting a little more abstract,
talking about target action,


68
00:03:16,186 --> 00:03:19,106
the idea is you have a
controller, an initiator,


69
00:03:19,106 --> 00:03:23,476
something that kicks
off the message send.


70
00:03:24,476 --> 00:03:27,326
That has a target object
that it sends the message to,


71
00:03:27,546 --> 00:03:28,996
and then the particular message


72
00:03:28,996 --> 00:03:31,706
that it sends is called
the action message.


73
00:03:32,796 --> 00:03:36,236
Once you understand this,
again, wherever we use this,


74
00:03:36,236 --> 00:03:38,906
it's used in such a consistent
way that if you understand it


75
00:03:38,906 --> 00:03:42,686
in one context, you understand
it in all the contexts.


76
00:03:42,966 --> 00:03:45,886
So with gesture recognizers,
same thing.


77
00:03:45,886 --> 00:03:48,826
A gesture recognizer has
a target and an action,


78
00:03:48,826 --> 00:03:51,736
and when you create that gesture
recognizer you specify that,


79
00:03:52,006 --> 00:03:55,156
so again, it's exactly the same
kind of concept as what we see


80
00:03:55,506 --> 00:03:56,876
with the control objects.


81
00:03:58,696 --> 00:03:59,866
So that's target action.


82
00:04:00,346 --> 00:04:03,426
A way to specify a
connection between two objects,


83
00:04:03,426 --> 00:04:05,426
and get those control objects


84
00:04:05,466 --> 00:04:07,746
to invoke custom code
in your application.


85
00:04:08,286 --> 00:04:11,406
Next up is the responder chain.


86
00:04:12,626 --> 00:04:16,046
The responder chain lets your
application handle events


87
00:04:16,226 --> 00:04:19,356
without knowledge of which
particular object is going


88
00:04:19,356 --> 00:04:20,906
to be used to handle that event.


89
00:04:22,065 --> 00:04:24,446
Responder chain kicks off
with some sort of initiator.


90
00:04:24,446 --> 00:04:26,336
It's just some object
in your application


91
00:04:26,646 --> 00:04:28,126
that kicks off the process.


92
00:04:28,126 --> 00:04:29,246
It could be user action,


93
00:04:29,246 --> 00:04:31,756
it could be a control,
or a controller.


94
00:04:32,956 --> 00:04:35,246
That sends an action
to the first responder.


95
00:04:35,246 --> 00:04:37,366
And that first responder
might respond to it.


96
00:04:37,366 --> 00:04:39,586
And if it does, then
the process is done.


97
00:04:39,656 --> 00:04:43,196
That responder has handled
that message and it's complete.


98
00:04:43,196 --> 00:04:46,816
But if it doesn't, it's going
to ask its next responder, hey,


99
00:04:46,816 --> 00:04:48,226
do you respond to this message?


100
00:04:48,306 --> 00:04:50,116
And if it does, then of
course it will handle it.


101
00:04:50,166 --> 00:04:53,016
But if it doesn't, it keeps
going up the responder chain


102
00:04:53,466 --> 00:04:55,606
until it finds some responder


103
00:04:55,606 --> 00:04:58,516
that actually implements the
message, whatever that was


104
00:04:58,546 --> 00:04:59,526
that was asked to be done.


105
00:04:59,656 --> 00:05:02,966
Change the color of a text
field, or copy the contents


106
00:05:02,966 --> 00:05:05,236
of a text field, or
whatever you happen to send


107
00:05:05,576 --> 00:05:06,726
up the responder chain.


108
00:05:06,896 --> 00:05:10,776
A particular place where we
use this is with motion events.


109
00:05:10,776 --> 00:05:12,296
So when the user
shakes the phone,


110
00:05:13,996 --> 00:05:17,396
we send this motion
began, motion ended,


111
00:05:17,396 --> 00:05:20,776
and motion canceled,
to the responder chain.


112
00:05:21,136 --> 00:05:23,436
And so that travels up
the responder chain,


113
00:05:23,436 --> 00:05:25,986
looking for the object that
responds to that message.


114
00:05:26,566 --> 00:05:29,566
And the great thing is you
can use the responder chain


115
00:05:29,566 --> 00:05:32,106
to respond to things like
that, like motion ended,


116
00:05:32,436 --> 00:05:34,516
by implementing it
wherever it makes sense


117
00:05:34,566 --> 00:05:35,636
in the responder chain.


118
00:05:35,636 --> 00:05:36,556
So here's a picture


119
00:05:36,556 --> 00:05:41,136
that diagrammatically expresses
what all applications have,


120
00:05:41,136 --> 00:05:42,146
which is their responder chain.


121
00:05:42,526 --> 00:05:44,076
It starts off in
the view hierarchy,


122
00:05:44,396 --> 00:05:45,616
it travels up the view hierarchy


123
00:05:45,616 --> 00:05:47,166
until it gets to
a view controller.


124
00:05:47,566 --> 00:05:50,236
The view controller, if it
doesn't implement, it passes it


125
00:05:50,236 --> 00:05:52,446
up to the window, the
window to the application,


126
00:05:52,446 --> 00:05:55,656
and then finally the application
to the application delegate.


127
00:05:56,196 --> 00:05:58,816
And that's the responder chain.


128
00:05:58,996 --> 00:06:01,496
It lets you build a group
of objects that are going


129
00:06:01,496 --> 00:06:03,476
to eventually find
out who is responsible


130
00:06:03,476 --> 00:06:06,036
for implementing a
particular message.


131
00:06:07,046 --> 00:06:08,996
Next up is Composite.


132
00:06:13,636 --> 00:06:16,876
Composite lets us
manipulate a group of objects


133
00:06:16,876 --> 00:06:20,276
as a single object, and
we use this extensively


134
00:06:20,276 --> 00:06:21,656
in the view hierarchy.


135
00:06:22,696 --> 00:06:26,116
So I start off with a single
view, created alloc init


136
00:06:26,116 --> 00:06:30,926
with frame, I create a new
view, and then call add subview.


137
00:06:31,626 --> 00:06:36,536
Now, these two objects, the
parent view in blue here,


138
00:06:36,946 --> 00:06:38,706
and the child view,
the one in green,


139
00:06:38,866 --> 00:06:40,646
are in this composite
relationship.


140
00:06:40,646 --> 00:06:42,866
So now I can treat
the whole hierarchy


141
00:06:42,866 --> 00:06:45,806
and I could have hundreds of
views beneath that blue view,


142
00:06:46,206 --> 00:06:50,206
but I get to treat all of
them as one Composite object,


143
00:06:50,206 --> 00:06:53,026
so I can do things like
move that parent view.


144
00:06:53,106 --> 00:06:56,196
And when I do, all of its
subviews move along with it.


145
00:06:56,856 --> 00:06:59,766
Same thing with other actions
that I tell that view to do.


146
00:06:59,796 --> 00:07:01,476
Move it back and
then I rotate it.


147
00:07:01,786 --> 00:07:05,216
All of the subviews in that
Composite are treated together


148
00:07:05,216 --> 00:07:06,306
as one object.


149
00:07:09,986 --> 00:07:14,106
We also use the view
hierarchy, as I said earlier,


150
00:07:14,106 --> 00:07:15,186
in the responder chain.


151
00:07:15,186 --> 00:07:20,206
So as you add child views
to a view, its superview,


152
00:07:20,406 --> 00:07:23,086
the new child view that was just
added, its superview becomes


153
00:07:23,086 --> 00:07:25,946
that view's next responder,
and so that's how it gets


154
00:07:25,946 --> 00:07:28,306
up to the point where it finds a
view that has a view controller.


155
00:07:28,346 --> 00:07:31,206
It travels up its
superview hierarchy.


156
00:07:32,196 --> 00:07:35,796
And again, we use this same
pattern in multiple places.


157
00:07:36,106 --> 00:07:39,256
If you've spent much time
using the UI Dynamics,


158
00:07:39,516 --> 00:07:43,896
a dynamic behavior is able to
have a child dynamic behavior,


159
00:07:44,066 --> 00:07:46,096
and if you group them
together in a composite


160
00:07:46,096 --> 00:07:48,076
by calling Add Child Behavior,


161
00:07:48,076 --> 00:07:52,706
then those two behaviors are
treated together as one thing


162
00:07:52,986 --> 00:07:55,466
by the physic simulation that's
running in the background.


163
00:07:56,106 --> 00:08:00,336
So that's Composite, allowing
us to build a group of objects


164
00:08:00,416 --> 00:08:04,346
into a tree that then we can
treat as one single object.


165
00:08:04,966 --> 00:08:08,966
Next up is delegation.


166
00:08:10,276 --> 00:08:14,546
That allows us to customize
behavior in our applications


167
00:08:14,886 --> 00:08:18,286
without subclassing the
object whose behavior we


168
00:08:18,286 --> 00:08:19,156
are customizing.


169
00:08:20,636 --> 00:08:24,556
So a great example that you see
in almost every introduction


170
00:08:24,556 --> 00:08:26,586
to doing iOS development
is talking


171
00:08:26,586 --> 00:08:28,616
about the application delegate.


172
00:08:29,906 --> 00:08:34,796
The application is delegating
to the application delegate


173
00:08:34,856 --> 00:08:36,916
to customize the way it behaves.


174
00:08:37,015 --> 00:08:38,006
So there is a set of methods


175
00:08:38,106 --> 00:08:40,746
that the application
delegate protocol specifies,


176
00:08:41,066 --> 00:08:43,035
application is going to
go into the background.


177
00:08:43,135 --> 00:08:45,166
Application is going to
come into the foreground.


178
00:08:45,626 --> 00:08:49,076
Application wants to open
this URL and so forth.


179
00:08:49,566 --> 00:08:51,386
All of those methods
that you implement


180
00:08:51,386 --> 00:08:55,486
in your delegate customize
the way UI Application acts,


181
00:08:56,206 --> 00:08:58,426
but you don't have
to know anything


182
00:08:58,426 --> 00:09:00,356
about the details
of UI Application.


183
00:09:00,826 --> 00:09:04,676
So this was a very particular
decision made by UIKit


184
00:09:05,036 --> 00:09:08,376
to use this form of delegation.


185
00:09:09,176 --> 00:09:11,976
We could have, on the other
hand, we could have asked you


186
00:09:11,976 --> 00:09:14,626
to subclass UI Application,
and that would've worked.


187
00:09:14,626 --> 00:09:16,716
There's actually GUI frameworks
out there that ask you


188
00:09:16,716 --> 00:09:19,176
to subclass the objects that
come out of the GUI framework.


189
00:09:19,956 --> 00:09:23,296
But if we asked you to subclass
UI Application, you would have


190
00:09:23,336 --> 00:09:26,446
to understand a lot of
detail about UI Application.


191
00:09:26,876 --> 00:09:28,556
Which methods are
safe to override?


192
00:09:28,916 --> 00:09:30,876
Which methods are
not safe to override.


193
00:09:31,326 --> 00:09:32,926
If I do override this method,


194
00:09:33,246 --> 00:09:35,506
do I have to call super,
or is that optional?


195
00:09:36,286 --> 00:09:38,566
We don't want to put that
cognitive load on you.


196
00:09:38,566 --> 00:09:40,586
We don't want you to have
to think about that stuff.


197
00:09:41,016 --> 00:09:46,156
So instead, using this idea of
delegation allows us to delegate


198
00:09:46,216 --> 00:09:49,276
to your code to say
what do you want custom?


199
00:09:49,376 --> 00:09:53,246
What do you want special to have
happen when the application goes


200
00:09:53,246 --> 00:09:55,736
into the background or when
it comes into the foreground?


201
00:09:56,286 --> 00:09:59,456
That allows you to customize
the way UI Application works


202
00:09:59,456 --> 00:10:02,346
without us having to force
you to understand all


203
00:10:02,346 --> 00:10:04,086
that detail about
UI Application.


204
00:10:04,446 --> 00:10:06,236
Now, of course, there's still
a lot of detail that you have


205
00:10:06,236 --> 00:10:09,036
to know, but that's what
makes you awesome developers.


206
00:10:09,546 --> 00:10:14,606
And again, we use this in many,
many frameworks throughout iOS.


207
00:10:15,176 --> 00:10:15,976
Here's just a few.


208
00:10:16,366 --> 00:10:19,136
AV Foundation makes
extensive use of delegates.


209
00:10:19,266 --> 00:10:22,486
Core animation has
delegates on their layers.


210
00:10:22,656 --> 00:10:24,586
Game Kit has a couple
of different classes,


211
00:10:24,586 --> 00:10:26,446
including GK session,
that have delegates.


212
00:10:26,886 --> 00:10:29,356
And in every case,
that delegate is


213
00:10:29,356 --> 00:10:33,716
about customizing the behavior
of those other classes,


214
00:10:33,716 --> 00:10:36,886
without you having to
subclass from them.


215
00:10:37,066 --> 00:10:38,616
Okay, so that's delegation.


216
00:10:39,376 --> 00:10:42,006
Next up is data source.


217
00:10:43,196 --> 00:10:47,526
That allows you to customize
data retrieval without having


218
00:10:47,526 --> 00:10:49,716
to subclass the object
that needs the data.


219
00:10:50,386 --> 00:10:53,056
A common example from UIKit,


220
00:10:53,146 --> 00:10:57,516
UITableView has a
UITableViewDataSource.


221
00:10:57,976 --> 00:11:01,406
That allows the table view to
know how many sections it has.


222
00:11:01,506 --> 00:11:03,416
How many rows are
in each section?


223
00:11:03,796 --> 00:11:06,526
What data belongs in each of the
rows that are in that section?


224
00:11:07,016 --> 00:11:11,616
So the table view asks its data
source all these questions.


225
00:11:11,876 --> 00:11:13,226
That gives you the chance


226
00:11:13,296 --> 00:11:16,516
to customize how the data is
retrieved, where it comes from,


227
00:11:16,516 --> 00:11:18,846
and so forth, and provide
it to the table view.


228
00:11:19,206 --> 00:11:21,016
But you don't have to
subclass table view.


229
00:11:21,246 --> 00:11:24,406
It would be the same situation
subclassing table view


230
00:11:24,406 --> 00:11:26,836
and require you to know all
sorts of detail about that,


231
00:11:27,216 --> 00:11:31,866
that we didn't want to have
to force you to think through.


232
00:11:32,396 --> 00:11:34,766
So here's some other
examples inside the UIKit.


233
00:11:34,896 --> 00:11:38,336
Same basic story, UIPickerView
says hey how many things belong


234
00:11:38,336 --> 00:11:39,166
in my picker view?


235
00:11:39,216 --> 00:11:40,406
PageView controller.


236
00:11:40,406 --> 00:11:42,366
Hey, how many things
show up in my page view?


237
00:11:42,696 --> 00:11:44,656
Give me the next thing that's
going to show up in here.


238
00:11:45,096 --> 00:11:48,886
So again, if you understand
data source in one context,


239
00:11:48,886 --> 00:11:51,096
when you see that
word data source,


240
00:11:51,186 --> 00:11:53,266
it means the same
thing throughout all


241
00:11:53,266 --> 00:11:54,026
of the frameworks.


242
00:11:54,376 --> 00:11:56,316
So again, you get to
leverage that learning


243
00:11:56,316 --> 00:11:57,886
across all different things.


244
00:11:57,886 --> 00:12:01,636
So back to the definition
here of data source.


245
00:12:02,076 --> 00:12:05,026
Customize data retrieval
without subclassing.


246
00:12:06,006 --> 00:12:06,996
That looks an awful lot


247
00:12:06,996 --> 00:12:09,666
like customize behavior
without subclassing.


248
00:12:10,016 --> 00:12:12,866
And in fact these two
ideas are really similar.


249
00:12:13,246 --> 00:12:16,206
It's the idea of
composing an object rather


250
00:12:16,206 --> 00:12:20,016
than extending a class, and so
you use a couple of objects,


251
00:12:20,016 --> 00:12:22,426
compose them together
to get custom behavior,


252
00:12:22,776 --> 00:12:24,226
rather than subclassing.


253
00:12:24,226 --> 00:12:26,526
It's a powerful idea
that we use, like I said,


254
00:12:26,526 --> 00:12:27,746
in many different places.


255
00:12:29,046 --> 00:12:30,066
So that's data source.


256
00:12:30,066 --> 00:12:34,386
It allows you to customize where
data comes from for an object


257
00:12:34,386 --> 00:12:37,046
that needs data without having
to subclass that object.


258
00:12:37,476 --> 00:12:42,276
All right, next up is
Model View Controller.


259
00:12:42,796 --> 00:12:45,656
Model View Controller is in lots
and lots of our documentation,


260
00:12:45,656 --> 00:12:48,356
lots of books have
lots of things to say


261
00:12:48,356 --> 00:12:49,456
about model view controller.


262
00:12:49,546 --> 00:12:53,236
There's probably a definition
for Model View Controller


263
00:12:53,496 --> 00:12:54,756
for every person in here.


264
00:12:55,316 --> 00:12:56,976
Or maybe more.


265
00:12:57,636 --> 00:13:00,636
The way I like to think about it
is Model View Controller gives


266
00:13:00,636 --> 00:13:05,196
us a way to organize, to build
an organizational structure


267
00:13:05,496 --> 00:13:08,866
around the responsibilities
that our application has.


268
00:13:11,316 --> 00:13:14,056
So let's start off
talking about the model.


269
00:13:14,686 --> 00:13:16,496
So I like to think of
the model, or the way I


270
00:13:16,496 --> 00:13:17,826
like to describe how to think


271
00:13:17,826 --> 00:13:20,236
about the model is it's
the data, it's the stuff


272
00:13:20,306 --> 00:13:21,546
that makes up your application.


273
00:13:21,546 --> 00:13:23,286
And this is typically something


274
00:13:23,286 --> 00:13:25,586
that people don't have
trouble getting their heads


275
00:13:25,586 --> 00:13:26,216
wrapped around.


276
00:13:26,216 --> 00:13:28,716
They typically can look at
what their application is doing


277
00:13:28,716 --> 00:13:31,086
and say "Oh, I see,
that's a model object."


278
00:13:32,996 --> 00:13:37,446
The view also ends up being a
pretty well understood piece


279
00:13:37,496 --> 00:13:39,536
of the MVC puzzle.


280
00:13:39,836 --> 00:13:42,866
It's the thing that displays
the information to the user,


281
00:13:43,316 --> 00:13:46,896
and takes user interaction,
taps and moves and so forth,


282
00:13:47,086 --> 00:13:49,536
and turns those into state
changes on the model--


283
00:13:49,536 --> 00:13:53,576
or sorry, and allows the user
to make those kind of gestures,


284
00:13:53,816 --> 00:13:56,976
and the controller is then
what's responsible for shuffling


285
00:13:56,976 --> 00:14:00,666
that back and forth, so it takes
information from the model,


286
00:14:00,666 --> 00:14:03,636
and shuffles it so that it
can show up in the view,


287
00:14:03,686 --> 00:14:05,826
and then takes the user's
interaction in the view


288
00:14:06,006 --> 00:14:09,626
and shuffles that back into
state updates on the model side.


289
00:14:10,386 --> 00:14:12,966
So that's model view controller.


290
00:14:13,186 --> 00:14:15,426
An organizational structure
for how we can think


291
00:14:15,426 --> 00:14:18,116
about the objects and
their responsibilities


292
00:14:18,246 --> 00:14:19,316
in our applications.


293
00:14:20,536 --> 00:14:23,466
So now let's take these
ideas, these set of patterns


294
00:14:23,506 --> 00:14:24,766
that we've discussed, and talk


295
00:14:24,766 --> 00:14:28,916
about how they apply
in our applications.


296
00:14:28,916 --> 00:14:29,816
How they're used.


297
00:14:30,866 --> 00:14:32,856
To do that, we're
going to sort of think


298
00:14:32,856 --> 00:14:34,846
through a sample application.


299
00:14:36,106 --> 00:14:39,566
And when you build an
application, I hope that all


300
00:14:39,566 --> 00:14:42,686
of you have downloaded the HIG,
the Human Interface Guidelines.


301
00:14:43,076 --> 00:14:44,396
It's in iBooks as well.


302
00:14:44,396 --> 00:14:45,876
It's very near the Swift book.


303
00:14:45,876 --> 00:14:48,106
If you go look at the
Swift book and then you tap


304
00:14:48,106 --> 00:14:50,756
on related books, you should
see the HIG book in there.


305
00:14:51,256 --> 00:14:52,486
In there, there's
a whole section


306
00:14:52,486 --> 00:14:53,786
where we spend time talking


307
00:14:53,786 --> 00:14:55,286
about something called
an application


308
00:14:55,286 --> 00:14:56,326
definition statement.


309
00:14:56,836 --> 00:15:00,146
Many people who have unfocused
applications aren't able


310
00:15:00,146 --> 00:15:01,006
to come up with this.


311
00:15:01,036 --> 00:15:04,996
Their architecture ends up being
very disbursed or whatever,


312
00:15:04,996 --> 00:15:06,066
not well thought-through.


313
00:15:06,806 --> 00:15:09,696
So I like to tell people to
really spend some time thinking


314
00:15:09,696 --> 00:15:11,756
about this 30 second
elevator pitch


315
00:15:11,756 --> 00:15:14,456
of what your application
is and who it's for.


316
00:15:14,986 --> 00:15:17,246
So our application is
going to allow people


317
00:15:17,246 --> 00:15:19,566
to share simple short updates


318
00:15:19,626 --> 00:15:21,396
about what's happening
in their lives.


319
00:15:22,056 --> 00:15:24,536
So this simple phrase
here has a bunch


320
00:15:24,536 --> 00:15:25,956
of architectural implications


321
00:15:25,956 --> 00:15:27,656
for what our application
needs to look like.


322
00:15:28,186 --> 00:15:30,346
And some requirements
that the application has.


323
00:15:31,346 --> 00:15:33,866
So the application
needs to share.


324
00:15:34,416 --> 00:15:36,656
So if I'm going to share
some information with you


325
00:15:36,656 --> 00:15:38,416
and we happen to be
in different places,


326
00:15:38,506 --> 00:15:41,056
we need to have a network, so
I can take that information,


327
00:15:41,106 --> 00:15:42,166
push it out to the Internet,


328
00:15:42,166 --> 00:15:44,076
and then you're able
to pull it down.


329
00:15:44,736 --> 00:15:47,556
It's going to be short updates.


330
00:15:47,626 --> 00:15:49,416
That sort of implies
there's going to be a lot,


331
00:15:49,536 --> 00:15:51,996
so we have a scrolling
list of information.


332
00:15:52,656 --> 00:15:54,216
And then finally,
what's happening,


333
00:15:54,496 --> 00:15:58,326
and since it's what's happening
now, it needs to be fast.


334
00:15:59,016 --> 00:16:03,086
So we'll call our application
Qwinkle, and here's a few ideas


335
00:16:03,116 --> 00:16:06,936
of things that this
application needs to do,


336
00:16:06,936 --> 00:16:08,156
or we might want it to do.


337
00:16:08,866 --> 00:16:11,416
Mark items, edit
post, add photos.


338
00:16:12,266 --> 00:16:14,006
So in the process
of sort of thinking


339
00:16:14,006 --> 00:16:15,846
through what our
application does


340
00:16:15,846 --> 00:16:17,986
and then what the architecture
of it is going to be,


341
00:16:18,266 --> 00:16:19,666
this is sort of the process I go


342
00:16:19,666 --> 00:16:21,016
through whenever
I'm building an app.


343
00:16:21,596 --> 00:16:23,406
What's the application
definition statement?


344
00:16:23,756 --> 00:16:26,876
From that, I get a list of
features that I think might fit


345
00:16:26,876 --> 00:16:29,906
in that, and then, the
all-important step of figuring


346
00:16:29,906 --> 00:16:31,256
out what to say no to.


347
00:16:31,566 --> 00:16:35,376
So you have this long list, then
you run it through the filter,


348
00:16:35,376 --> 00:16:37,016
of what is my application about?


349
00:16:37,016 --> 00:16:39,376
What's the first thing
that I need to focus on?


350
00:16:39,376 --> 00:16:41,676
What's the most important
thing that I want to focus on?


351
00:16:42,146 --> 00:16:43,116
And so that's going to allow us


352
00:16:43,116 --> 00:16:45,216
to drop these last three
entries, and we're just going


353
00:16:45,216 --> 00:16:46,926
to focus on these
first four things


354
00:16:47,026 --> 00:16:49,086
for how our application
is going to work.


355
00:16:50,196 --> 00:16:52,906
So now let's go through and
talk in a little more detail


356
00:16:52,906 --> 00:16:54,146
about the application, now


357
00:16:54,146 --> 00:16:55,906
that we have a sort
of a picture of it.


358
00:16:56,156 --> 00:16:58,336
So here's a wire frame
of the application.


359
00:16:58,756 --> 00:17:00,716
We have a list of
updates from our friends.


360
00:17:01,456 --> 00:17:05,306
They have avatars, and then
we have this plus button


361
00:17:05,306 --> 00:17:07,656
on the top, where we
can add a new entry.


362
00:17:08,286 --> 00:17:10,796
So the first thing to do is sort


363
00:17:10,796 --> 00:17:13,205
of spend some time
conceptualizing what does our


364
00:17:13,205 --> 00:17:16,006
application look
like through the lens


365
00:17:16,066 --> 00:17:18,195
of the Model View
Controller design paradigm.


366
00:17:18,506 --> 00:17:21,126
And the first thing I like to
do is talk about the model.


367
00:17:22,496 --> 00:17:27,116
And a really good sort of first
cut approach at how to come


368
00:17:27,116 --> 00:17:29,246
up with what does the
model look like, I think,


369
00:17:29,356 --> 00:17:32,226
is to write down
some user stories,


370
00:17:32,226 --> 00:17:35,246
or maybe if you've ever used CRC
cards, like the titles of those,


371
00:17:35,616 --> 00:17:38,916
the list of things that you know
that the application is going


372
00:17:38,916 --> 00:17:41,116
to have to do, and then
pull the nouns out.


373
00:17:41,186 --> 00:17:44,006
So here we have a statement
a user can specify an avatar,


374
00:17:44,936 --> 00:17:48,586
well that tells us user and
avatar, these other statements--


375
00:17:48,586 --> 00:17:51,706
a user can have an entry,
a user can follow a friend,


376
00:17:52,136 --> 00:17:54,566
so there's relationships
between these users.


377
00:17:54,996 --> 00:17:56,796
All of these items,
all the nouns


378
00:17:56,796 --> 00:18:00,396
out of this list tell us
what the model objects are,


379
00:18:01,406 --> 00:18:03,756
and so from that, we come
up with this simple model


380
00:18:03,756 --> 00:18:06,446
where we have Qwinkers have
friends, they have avatars,


381
00:18:06,446 --> 00:18:10,286
and then they have a list of
Qwinks, so that's the model.


382
00:18:11,116 --> 00:18:12,316
Next up is the view.


383
00:18:12,756 --> 00:18:15,466
So how we're going to display
this, since we're using UI Kit,


384
00:18:15,466 --> 00:18:17,236
we're on top of iOS,
and we're going


385
00:18:17,236 --> 00:18:18,596
to make a beautiful application.


386
00:18:18,596 --> 00:18:21,846
We're going to use a table view.


387
00:18:22,776 --> 00:18:25,216
That table view is
arranged in a composite.


388
00:18:25,216 --> 00:18:27,436
Of course you have the
table view at the top.


389
00:18:27,636 --> 00:18:29,456
It has a list of
table view cells.


390
00:18:29,506 --> 00:18:32,986
Those table view cells have a
text view and an image view.


391
00:18:34,076 --> 00:18:35,886
Since they are arranged
in a composite,


392
00:18:35,886 --> 00:18:39,346
whenever this table view
scrolls, and I move its bounds,


393
00:18:39,896 --> 00:18:41,706
I only have to move
the table view.


394
00:18:41,956 --> 00:18:43,646
Aren't you glad you
don't have to iterate


395
00:18:43,646 --> 00:18:46,816
through all the table view cells
in your table view and move them


396
00:18:46,816 --> 00:18:47,936
by the appropriate amount?


397
00:18:48,806 --> 00:18:51,496
I do enough math without
having to do that.


398
00:18:52,276 --> 00:18:53,526
All right, so that's the view.


399
00:18:53,736 --> 00:18:56,896
Next up is the controller.


400
00:18:57,716 --> 00:19:00,476
Now, remember the controller's
role in our application is


401
00:19:00,476 --> 00:19:02,926
to shuffle the data between
the model and the view,


402
00:19:02,926 --> 00:19:06,546
and then take updates, and
apply that back to the model.


403
00:19:07,746 --> 00:19:10,616
So our view controller
is going to act


404
00:19:10,916 --> 00:19:14,126
as the data source
for our table view.


405
00:19:14,416 --> 00:19:15,926
So we have our UITableView.


406
00:19:15,926 --> 00:19:18,816
It has this dotted line
or weak relationship


407
00:19:18,816 --> 00:19:22,756
to its view controller, and that
view controller implements the


408
00:19:22,756 --> 00:19:23,916
data source protocol.


409
00:19:24,296 --> 00:19:26,716
So our view controller is
going to tell the table view,


410
00:19:26,716 --> 00:19:29,236
here's the number of sections
and here's the number of rows,


411
00:19:29,696 --> 00:19:31,776
based on interacting
with the model.


412
00:19:37,386 --> 00:19:41,806
Our view controller will also
be activated, will be told


413
00:19:41,806 --> 00:19:44,056
to do things by the
user interface,


414
00:19:44,196 --> 00:19:46,836
and will use target action, of
course, to make that connection.


415
00:19:46,836 --> 00:19:48,216
So when you tap on
the plus button,


416
00:19:48,656 --> 00:19:49,766
it says "what's my target?"


417
00:19:49,766 --> 00:19:52,006
Oh, my target is this
object here, which happens


418
00:19:52,006 --> 00:19:53,276
to be the Qwinks
view controller,


419
00:19:53,606 --> 00:19:54,776
what message should I send?


420
00:19:54,886 --> 00:19:57,326
Oh, that's the add
a new entry message.


421
00:19:57,856 --> 00:20:02,376
Our view controller is also
responsible for dealing


422
00:20:02,376 --> 00:20:03,606
with the networking stuff.


423
00:20:03,716 --> 00:20:06,286
So the view controller has
to manage the networking.


424
00:20:06,806 --> 00:20:08,926
It has to be able to get
the data from the internet,


425
00:20:09,356 --> 00:20:10,976
turn it into objects that we
can display on the screen.


426
00:20:11,066 --> 00:20:14,416
We'll talk in more
detail about that shortly.


427
00:20:14,836 --> 00:20:21,416
So that is the model
view and controller


428
00:20:21,416 --> 00:20:24,626
for this initial scene
in our application.


429
00:20:25,176 --> 00:20:28,046
We have our Public
Timeline View Controller,


430
00:20:28,216 --> 00:20:31,296
which acts as the data
source for the table view,


431
00:20:31,656 --> 00:20:36,266
and is able to get information
from the model and shuffle


432
00:20:36,266 --> 00:20:38,666
that into the view
by implementing


433
00:20:38,666 --> 00:20:41,156
that table view data
source protocol method.


434
00:20:41,826 --> 00:20:44,786
The entry view-- sorry, the
table view, is a composite.


435
00:20:44,786 --> 00:20:47,826
When we scroll it, everything
moves together as one.


436
00:20:47,826 --> 00:20:51,306
The next piece that
we had talked


437
00:20:51,306 --> 00:20:54,726
about was adding a new entry.


438
00:20:55,566 --> 00:20:58,266
So when the user is
adding a new entry,


439
00:20:58,266 --> 00:21:01,406
we're going to have a new view
controller, and a new view,


440
00:21:01,406 --> 00:21:03,236
because we have a different
way to present stuff.


441
00:21:03,666 --> 00:21:06,486
But the model class, the
set of model classes,


442
00:21:06,486 --> 00:21:07,666
is going to be reused.


443
00:21:07,666 --> 00:21:10,596
We're going to use the same
classes to represent that data.


444
00:21:11,096 --> 00:21:12,606
So it's a different
amount of shuffling,


445
00:21:12,606 --> 00:21:14,116
or a different kind
of shuffling, right?


446
00:21:14,146 --> 00:21:17,116
Because we're shuffling
data for a particular entry


447
00:21:17,116 --> 00:21:18,806
into the view, and
of course the view,


448
00:21:18,806 --> 00:21:21,666
what the view does is different,
so there's different stuff


449
00:21:21,666 --> 00:21:22,786
for the controller to do.


450
00:21:23,176 --> 00:21:24,876
The model class ends
up being the same.


451
00:21:24,876 --> 00:21:27,166
So we're able to reuse that.


452
00:21:28,756 --> 00:21:33,926
So the user taps on the button,
that sends the action message


453
00:21:33,966 --> 00:21:36,446
to its target, which is the
Public Timeline View Controller.


454
00:21:36,956 --> 00:21:41,536
We present the add a new
entry, and then these cancel


455
00:21:41,536 --> 00:21:44,536
and done buttons would be
connected via target action


456
00:21:44,996 --> 00:21:46,476
to the new entry
view controller.


457
00:21:50,396 --> 00:21:52,966
Now this view controller
also has


458
00:21:52,966 --> 00:21:54,076
to interface with the network.


459
00:21:55,016 --> 00:21:57,556
When the user finishes
entering this new entry


460
00:21:57,556 --> 00:21:59,876
and they tap the done
button, we need to package


461
00:21:59,876 --> 00:22:01,876
up this information, push
it out to the internet,


462
00:22:01,876 --> 00:22:03,726
it's going to live on
some server somewhere.


463
00:22:04,606 --> 00:22:06,666
There's a potential
smell going on there,


464
00:22:06,836 --> 00:22:09,616
because now we have two
controllers that have


465
00:22:09,676 --> 00:22:11,786
to manage the same
kind of stuff,


466
00:22:12,206 --> 00:22:13,776
and that's probably not good.


467
00:22:14,236 --> 00:22:15,726
We'll talk more about
it shortly.


468
00:22:16,356 --> 00:22:20,236
The last piece of taking
our common set of patterns


469
00:22:20,236 --> 00:22:22,286
and looking at the way they
work in this application,


470
00:22:23,696 --> 00:22:24,936
the UI Application
is, of course,


471
00:22:24,936 --> 00:22:26,926
going to have an app
delegate for application,


472
00:22:26,926 --> 00:22:29,476
and that's going to handle
things like state restoration,


473
00:22:29,726 --> 00:22:32,526
it's going to handle
background downloading,


474
00:22:32,526 --> 00:22:34,546
and the application
becoming active and going


475
00:22:34,546 --> 00:22:35,666
into the background
and so forth,


476
00:22:35,716 --> 00:22:39,096
that whole stack of stuff.


477
00:22:39,316 --> 00:22:42,236
So now we have this
built, and change happens.


478
00:22:44,526 --> 00:22:46,926
Our users come up with new
things that they want to do.


479
00:22:47,076 --> 00:22:49,496
Our designers come to us and
say hey, can you change this,


480
00:22:49,496 --> 00:22:50,956
and make this thing
do this other thing?


481
00:22:50,956 --> 00:22:51,606
And so forth.


482
00:22:52,626 --> 00:22:54,826
So we have our initial
table view controller,


483
00:22:55,346 --> 00:22:58,836
and our next set of requirements
that we want to address is


484
00:22:58,876 --> 00:23:01,356
to be able to send
private messages.


485
00:23:02,176 --> 00:23:06,246
So now we have our
initial view controller,


486
00:23:06,536 --> 00:23:08,876
which has this networking
code in it.


487
00:23:09,236 --> 00:23:12,386
What are we going to do about
this new view controller?


488
00:23:12,686 --> 00:23:17,246
It also needs to have
networking code in it.


489
00:23:18,046 --> 00:23:21,006
This is really starting to be
some pretty smelly code, right?


490
00:23:21,096 --> 00:23:23,476
We don't want to
copy and paste this.


491
00:23:23,476 --> 00:23:26,436
If we took the understanding
of how to download information


492
00:23:26,436 --> 00:23:28,816
from that initial view
controller, we could, of course,


493
00:23:28,996 --> 00:23:31,636
copy and paste it into
our new view controller,


494
00:23:32,046 --> 00:23:34,916
but then what happens over
time if something changes,


495
00:23:34,916 --> 00:23:36,386
a URL changes, or
who knows what else?


496
00:23:36,416 --> 00:23:38,016
The interface to
that thing changes,


497
00:23:38,566 --> 00:23:40,546
and we have copy
and pasted code.


498
00:23:40,546 --> 00:23:42,296
Now when we fix it in
one place, it's not going


499
00:23:42,296 --> 00:23:43,296
to get updated in the others.


500
00:23:43,296 --> 00:23:45,246
So bad idea.


501
00:23:46,296 --> 00:23:49,306
So instead, what we will do is
let's re-factor this and pull


502
00:23:49,306 --> 00:23:53,036
that URL code out of the
view controllers and put it


503
00:23:53,036 --> 00:23:54,946
into a download service.


504
00:23:57,376 --> 00:23:59,536
When we do that re-factoring,
we'll start off


505
00:23:59,536 --> 00:24:00,996
with our Public Timeline
View Controller,


506
00:24:00,996 --> 00:24:04,036
which probably had
the networking code


507
00:24:04,036 --> 00:24:04,846
in it to start with.


508
00:24:05,506 --> 00:24:08,306
We'll pull all of that
from the view controller


509
00:24:08,466 --> 00:24:10,226
into the download service.


510
00:24:10,786 --> 00:24:18,776
So we'll call download on that
object, and when it's done,


511
00:24:19,536 --> 00:24:21,386
it's going to send
back a response.


512
00:24:21,936 --> 00:24:24,746
Now, I put a solid line in here
specifically because I want


513
00:24:24,746 --> 00:24:28,186
to talk through the idea of
making a hard relationship


514
00:24:28,186 --> 00:24:29,306
between these two things.


515
00:24:30,086 --> 00:24:32,116
The Public Timeline
View Controller has


516
00:24:32,116 --> 00:24:33,736
to know the download
service, because it's going


517
00:24:33,736 --> 00:24:35,486
to be responsible
for creating it,


518
00:24:35,906 --> 00:24:37,236
but it's the download service,


519
00:24:37,376 --> 00:24:39,446
also has the hard
relationship back


520
00:24:39,516 --> 00:24:41,766
to the Public Timeline View
Controller, then we're going


521
00:24:41,766 --> 00:24:43,946
to have to add a property
to that download service,


522
00:24:43,946 --> 00:24:45,606
and it's going to have
to have a relationship


523
00:24:45,606 --> 00:24:47,156
to this Public Timeline
View Controller.


524
00:24:48,176 --> 00:24:49,796
When we add a new
view controller,


525
00:24:50,176 --> 00:24:51,376
do we add a new property?


526
00:24:51,376 --> 00:24:52,836
Like, we don't want
to go down that path.


527
00:24:53,346 --> 00:24:55,256
So instead let's make


528
00:24:55,256 --> 00:24:58,916
that a weak relationship,
and use delegation.


529
00:25:00,306 --> 00:25:03,386
So notice how we took the idea
of delegation that we have


530
00:25:03,956 --> 00:25:06,266
in UIKit, and now we're applying


531
00:25:06,266 --> 00:25:08,336
that to the code
in our application.


532
00:25:08,936 --> 00:25:11,336
We're going to define
a delegate protocol


533
00:25:11,646 --> 00:25:14,686
for this download service
to call back to our code,


534
00:25:14,686 --> 00:25:16,946
so that we can customize
what happens


535
00:25:16,946 --> 00:25:18,876
when that download
service does things,


536
00:25:19,246 --> 00:25:21,126
like when it finishes
downloading code,


537
00:25:21,126 --> 00:25:24,586
or downloading a JSON
file and so forth.


538
00:25:26,116 --> 00:25:29,816
Now, when we need to use
this again, to interface


539
00:25:29,816 --> 00:25:32,926
with the private message view
controller, it implements


540
00:25:32,926 --> 00:25:34,466
that download service delegate,


541
00:25:34,896 --> 00:25:37,566
and the download service
doesn't have to know anything


542
00:25:37,566 --> 00:25:40,106
about either of those
types other than the fact


543
00:25:40,296 --> 00:25:42,986
that they implement
that protocol.


544
00:25:42,986 --> 00:25:47,006
All right, and with that,
let's go take a look


545
00:25:47,006 --> 00:25:47,516
at the demo [beep sound].


546
00:25:49,846 --> 00:25:51,356
All right, when I
started writing the demo,


547
00:25:51,356 --> 00:25:52,596
I sort of went off the deep end,


548
00:25:52,596 --> 00:25:54,566
and I tried to build
this whole application,


549
00:25:54,566 --> 00:25:58,506
I was building a service, and I
realized this is just too much


550
00:25:58,506 --> 00:26:01,646
for us to cover in the last 15
minutes or so that we have left,


551
00:26:01,646 --> 00:26:05,266
so instead, what I've done is
I've made a vastly simplified


552
00:26:05,786 --> 00:26:07,326
idea of this application.


553
00:26:07,326 --> 00:26:16,556
Let me run it for you, and
I'll talk through what it does.


554
00:26:16,806 --> 00:26:22,116
So I started with the master
detail template out of X code,


555
00:26:22,576 --> 00:26:25,206
which creates for you a table
view, and then that table view,


556
00:26:25,206 --> 00:26:27,026
when you tap on items
in there, it navigates


557
00:26:27,026 --> 00:26:28,176
to a detailed view controller.


558
00:26:28,496 --> 00:26:30,196
I took out the detailed
view controller just


559
00:26:30,196 --> 00:26:32,256
so we would have focus on
this one view controller.


560
00:26:33,006 --> 00:26:36,526
I added a refresh control,
so that when you pull down,


561
00:26:36,936 --> 00:26:40,536
it kicks off the refresh, it
downloads some information,


562
00:26:40,536 --> 00:26:42,726
and then it logs in the
background to let us know


563
00:26:42,726 --> 00:26:45,026
that it was successful in
downloading that information.


564
00:26:45,286 --> 00:26:47,806
So in a real application,
of course, you're going


565
00:26:47,806 --> 00:26:50,456
to be processing the JSON that
comes back from that download,


566
00:26:50,456 --> 00:26:51,946
and doing all sorts
of fancy stuff.


567
00:26:51,946 --> 00:26:54,206
But for our demo, we're
going to be simple,


568
00:26:54,206 --> 00:26:56,306
and just have this
download happen.


569
00:26:56,626 --> 00:27:00,916
So let's look at the way the
code works over here, briefly.


570
00:27:02,106 --> 00:27:04,076
So here's our view controller,


571
00:27:04,076 --> 00:27:07,386
and notice it's implementing
all these delegate protocols


572
00:27:07,386 --> 00:27:09,166
for the NS URL stuff.


573
00:27:10,026 --> 00:27:13,506
We want to move that
from our view controller,


574
00:27:13,506 --> 00:27:15,816
over to this new object,
the download service


575
00:27:15,856 --> 00:27:16,716
that we're going to implement.


576
00:27:17,076 --> 00:27:21,296
We don't want our table view
controller to understand all


577
00:27:21,296 --> 00:27:23,836
of this detail about
how networking works.


578
00:27:23,836 --> 00:27:26,306
We want to capture that in
one place so we can reuse it.


579
00:27:27,626 --> 00:27:31,286
So we're going to go
through all this code here


580
00:27:31,286 --> 00:27:32,986
that does all that,
and just move it.


581
00:27:33,246 --> 00:27:34,406
Now, I'm not going
to make you sit


582
00:27:34,886 --> 00:27:37,506
and watch me type all this stuff
in and copy and paste it in,


583
00:27:37,506 --> 00:27:39,406
and have me mess it up
and have it not work.


584
00:27:39,996 --> 00:27:43,306
So instead, I have
a bunch of get tags


585
00:27:43,616 --> 00:27:43,936
in here [tapping sounds].


586
00:27:45,246 --> 00:27:59,736
Awesome! Okay, so our view
controller now no longer has


587
00:27:59,836 --> 00:28:03,326
this knowledge about the URL
session and how it works.


588
00:28:03,326 --> 00:28:05,516
We removed all those,
and moved them


589
00:28:05,516 --> 00:28:08,376
over to our download service.


590
00:28:08,476 --> 00:28:12,036
We also took all that code from
in here that was interfacing


591
00:28:12,036 --> 00:28:16,576
with the network, and moved that
over to our download service.


592
00:28:22,116 --> 00:28:26,366
And that's the URL that we're
using to download and so forth.


593
00:28:27,246 --> 00:28:31,346
So our view controller did
have all this knowledge,


594
00:28:31,716 --> 00:28:35,636
and we've moved it over
into our download service.


595
00:28:35,636 --> 00:28:37,926
Now the download service
has all that information.


596
00:28:38,546 --> 00:28:43,886
Our download service, though,
doesn't have any API on it yet.


597
00:28:44,076 --> 00:28:46,706
So we haven't made it so that we
can actually interface with it.


598
00:28:47,006 --> 00:28:51,496
Our view controller still has to
manage making the network call.


599
00:28:51,496 --> 00:28:53,986
Right? We don't want the
download service just going


600
00:28:53,986 --> 00:28:56,056
rogue and downloading stuff
whenever it feels like it.


601
00:28:56,416 --> 00:29:00,056
The view controller, being in
control of how things happen


602
00:29:00,056 --> 00:29:03,216
with the user, taking the
user's input from the screen


603
00:29:03,216 --> 00:29:06,466
and turning that into stuff
that happens on the back end,


604
00:29:06,756 --> 00:29:09,106
we want the view
controller to be in charge


605
00:29:09,106 --> 00:29:10,046
of making that happen.


606
00:29:10,426 --> 00:29:13,326
So we need to add a couple of
methods to our download service


607
00:29:13,666 --> 00:29:16,016
to allow it to first
do the connection,


608
00:29:16,356 --> 00:29:19,436
create the NS URL session,
all the configuration stuff


609
00:29:19,596 --> 00:29:22,186
that goes along with that,
and then we also want a method


610
00:29:22,266 --> 00:29:27,136
to start that, to kick it off.


611
00:29:27,816 --> 00:29:30,326
So we'll do another magic
switcho-change-o [assumed


612
00:29:31,206 --> 00:29:36,956
spelling], and our download
service now has these two


613
00:29:36,956 --> 00:29:39,866
methods connect and start.


614
00:29:40,836 --> 00:29:44,336
In the connect method,


615
00:29:44,336 --> 00:29:48,486
we're creating NS URL
session configuration stuff,


616
00:29:48,486 --> 00:29:50,776
and then in the start method,
we create the download task


617
00:29:50,776 --> 00:29:51,846
and tell that to start.


618
00:29:53,236 --> 00:29:54,966
From our master view controller,


619
00:29:55,736 --> 00:30:00,626
we are still kicking
off the download


620
00:30:01,076 --> 00:30:04,126
from our refresh
control, and of course,


621
00:30:04,126 --> 00:30:07,446
that refresh control uses
target action in order


622
00:30:07,446 --> 00:30:11,506
to make the connection between
the control and our custom code.


623
00:30:11,576 --> 00:30:14,456
But we've greatly
simplified what's happening


624
00:30:14,456 --> 00:30:15,346
in our view controller.


625
00:30:15,346 --> 00:30:18,076
Instead of it having any
knowledge about this networking,


626
00:30:18,376 --> 00:30:21,346
it only has knowledge
about kicking it off.


627
00:30:21,346 --> 00:30:22,216
About starting it.


628
00:30:22,216 --> 00:30:26,336
About making it happen.


629
00:30:26,736 --> 00:30:32,376
All right, so now we can
run the application again.


630
00:30:32,886 --> 00:30:43,736
Now when we pull down, notice
here it's telling us in the log


631
00:30:43,776 --> 00:30:48,466
that it finished, but our
refresh item hasn't stopped.


632
00:30:49,446 --> 00:30:51,576
So the issue, what's going on,


633
00:30:51,826 --> 00:30:55,186
is our downloader now has all
the knowledge about what's going


634
00:30:55,186 --> 00:30:59,276
on with the download, but no
one is informing the controller


635
00:30:59,276 --> 00:31:00,826
that that happened,
that it's finished.


636
00:31:01,276 --> 00:31:05,196
And so it finishes just fine,
but our refresh isn't able


637
00:31:05,196 --> 00:31:08,056
to stop, because our view
controller doesn't know


638
00:31:08,056 --> 00:31:09,356
that the download is finished.


639
00:31:09,846 --> 00:31:11,246
If only we knew a way


640
00:31:11,566 --> 00:31:15,346
to customize the behavior
of a reusable class.


641
00:31:16,296 --> 00:31:17,466
Of course, we do, right?


642
00:31:17,466 --> 00:31:19,336
We use delegation
to make that happen.


643
00:31:19,786 --> 00:31:23,506
So now, what we need to do is
create a delegate protocol.


644
00:31:24,096 --> 00:31:27,096
We need to create a
property on our downloader


645
00:31:27,506 --> 00:31:30,596
to have a delegate
property and make


646
00:31:30,636 --> 00:31:33,776
that delegate property
implement that protocol.


647
00:31:34,516 --> 00:31:51,556
[ Background Sounds ]


648
00:31:52,056 --> 00:31:56,236
>> So our download service
has this method spelled


649
00:31:56,236 --> 00:32:00,346
out in the delegate
that says, hey,


650
00:32:00,346 --> 00:32:04,716
the download service did
finish downloading this URL,


651
00:32:04,956 --> 00:32:09,046
which is the original URL that
was asked for, it downloaded it


652
00:32:09,196 --> 00:32:13,236
to a particular URL, and then
that last R unit is an error,


653
00:32:13,236 --> 00:32:18,486
saying everything is fine if
we pass nil there, or hey,


654
00:32:18,486 --> 00:32:20,536
something went wrong, and
this is what happened.


655
00:32:20,606 --> 00:32:25,106
Now, if we were going to build
a more sophisticated networking


656
00:32:25,106 --> 00:32:26,306
stack here, what we'd want


657
00:32:26,306 --> 00:32:29,476
to do is provide many
more delegation points.


658
00:32:29,476 --> 00:32:31,286
Many more places
for customization.


659
00:32:31,576 --> 00:32:34,896
Things like, hey, I need some
authentication information.


660
00:32:35,306 --> 00:32:36,416
Other things like that.


661
00:32:36,416 --> 00:32:40,136
Or, I have finished downloading
10 bytes out of the 100 bytes


662
00:32:40,136 --> 00:32:41,026
that I'm going to download,


663
00:32:41,026 --> 00:32:43,676
so you could update the
spinner appropriately


664
00:32:43,846 --> 00:32:45,046
from the view controller.


665
00:32:45,626 --> 00:32:48,406
But we'll just leave it
at this for right now.


666
00:32:49,106 --> 00:32:58,466
And then in our download
service, really important piece


667
00:32:58,466 --> 00:33:03,786
of the puzzle is when the URL
session finishes downloading,


668
00:33:04,006 --> 00:33:07,846
when the, you know, we
kick off the download,


669
00:33:07,846 --> 00:33:09,606
and when it finishes, it's going


670
00:33:09,606 --> 00:33:13,066
to call back the NS URL download
task is going to call back


671
00:33:13,066 --> 00:33:16,316
and say hey, I'm finished,
we need to make sure


672
00:33:16,316 --> 00:33:20,796
and tell our delegate
that that happened.


673
00:33:21,356 --> 00:33:25,036
That callback goes from
our download session


674
00:33:25,436 --> 00:33:29,196
to the view controller, which is
then going to use that knowledge


675
00:33:29,246 --> 00:33:37,626
that the download has
finished to end refreshing.


676
00:33:39,776 --> 00:33:44,266
We also put the responsibility
of what to do with that document


677
00:33:45,386 --> 00:33:46,556
into the view controller.


678
00:33:47,466 --> 00:33:50,306
So if you notice up
here, further up,


679
00:33:50,306 --> 00:33:52,686
we're doing some file moving
around, taking the file


680
00:33:52,686 --> 00:33:53,606
and moving it and so forth,


681
00:33:54,086 --> 00:33:55,966
in a real application
this is another place


682
00:33:56,026 --> 00:33:58,236
where I would create
another service.


683
00:33:58,636 --> 00:34:02,066
Probably something like a
JSON parser, and I would take


684
00:34:02,066 --> 00:34:04,726
that JSON parser and say,
hey, here's the stuff


685
00:34:04,766 --> 00:34:07,546
that just got downloaded,
would you please take care


686
00:34:07,546 --> 00:34:10,735
of parsing it and turning
it into real objects,


687
00:34:11,315 --> 00:34:14,216
create another delegate
protocol for the JSON parser,


688
00:34:14,826 --> 00:34:17,096
and the JSON parser would
call me back and say, hey,


689
00:34:17,096 --> 00:34:18,326
everything has finished parsing.


690
00:34:18,326 --> 00:34:21,146
And then that's when I
would actually have all the


691
00:34:21,146 --> 00:34:26,735
information I need to change the
way the user interface looks.


692
00:34:28,766 --> 00:34:31,366
One other thing that
I always like to talk


693
00:34:31,366 --> 00:34:37,016
through with developers is we
have stepped over the boundary


694
00:34:37,016 --> 00:34:41,426
where we understand and can
start thinking about how UIKit


695
00:34:41,426 --> 00:34:43,056
and Foundation are implemented.


696
00:34:43,706 --> 00:34:46,025
So let's take a step
back and take a look


697
00:34:46,025 --> 00:34:47,166
at our download service.


698
00:34:48,525 --> 00:34:53,275
So the download service
specifies


699
00:34:53,275 --> 00:34:55,596
that it implements
this set of protocols.


700
00:34:56,996 --> 00:35:01,006
Every one of those protocols'
names ends in delegate.


701
00:35:02,246 --> 00:35:04,916
The responsibility of
anything that is a delegate is


702
00:35:04,916 --> 00:35:07,796
to customize the
behavior of the object


703
00:35:07,936 --> 00:35:09,986
for which it is the
delegate, right?


704
00:35:10,416 --> 00:35:12,636
So what we are doing
is specifying


705
00:35:12,636 --> 00:35:14,706
that we are able to
fulfill that role.


706
00:35:15,076 --> 00:35:17,016
Now, in the code, I don't want
to have to go show it to you


707
00:35:17,016 --> 00:35:19,166
because there's so much
code there, but in the code,


708
00:35:19,236 --> 00:35:22,326
I am making this download
service the delegate


709
00:35:22,476 --> 00:35:25,826
of the download task
NS URL session.


710
00:35:26,486 --> 00:35:29,296
So imagine with me, if you
will, what the code looks


711
00:35:29,296 --> 00:35:34,146
like in NS URL session
or in NS download task.


712
00:35:35,956 --> 00:35:38,546
There's got to be a chunk
of code in there somewhere


713
00:35:38,956 --> 00:35:41,196
that does something
very similar to this.


714
00:35:41,196 --> 00:35:44,946
I hope that helps
you think through,


715
00:35:44,946 --> 00:35:47,126
like how does the
puzzle fit together?


716
00:35:47,126 --> 00:35:48,086
How does all this work?


717
00:35:48,576 --> 00:35:51,466
We do the same things
that I'm asking you to do.


718
00:35:51,946 --> 00:35:55,896
We define a protocol that says
here's the customization path,


719
00:35:55,896 --> 00:35:58,396
here's the customization
points that you have


720
00:35:58,396 --> 00:35:59,696
for this reusable object.


721
00:36:00,236 --> 00:36:02,506
If you implement this method,


722
00:36:02,896 --> 00:36:05,146
I will call it, at
a particular time.


723
00:36:05,736 --> 00:36:08,036
Now you're building that
for your own application.


724
00:36:08,426 --> 00:36:11,006
You're defining this download
service delegate protocol.


725
00:36:11,006 --> 00:36:14,596
And it has a single method in
it right now that says, hey,


726
00:36:14,596 --> 00:36:17,476
I finished downloading this
stuff to this particular URL.


727
00:36:17,476 --> 00:36:20,586
That would be a perfect place
for us, as I said earlier,


728
00:36:20,656 --> 00:36:24,286
to take that URL, pass
it off to a JSON parser,


729
00:36:24,676 --> 00:36:26,876
let the JSON parser crunch
on it for a little while,


730
00:36:26,936 --> 00:36:30,036
perhaps put the data through
core data into a database,


731
00:36:30,466 --> 00:36:33,526
message us back and say yes, all
that information has been parsed


732
00:36:33,866 --> 00:36:35,876
and all that information is
sitting in your database,


733
00:36:35,876 --> 00:36:37,456
and you're ready to
update your table view.


734
00:36:38,206 --> 00:36:44,826
Okay, so one last piece
of stuff in the demo here


735
00:36:44,826 --> 00:36:47,436
that I'm not particularly
happy with.


736
00:36:48,236 --> 00:36:52,366
Well, let me go ahead and
run it again just for fun,


737
00:36:52,366 --> 00:36:53,366
so we can see it stopping.


738
00:36:54,536 --> 00:36:58,816
So now we're back
to the functionality


739
00:36:58,816 --> 00:37:00,956
that we had before we
started hacking and slashing


740
00:37:00,956 --> 00:37:02,706
and doing surgery
on our application.


741
00:37:03,496 --> 00:37:03,786
All right.


742
00:37:03,786 --> 00:37:06,916
So one last, like I said, one
last piece of stuff in here


743
00:37:06,916 --> 00:37:08,506
that I'm not particularly
happy with.


744
00:37:08,506 --> 00:37:11,186
If we go up here in the
download service, and I glanced


745
00:37:11,186 --> 00:37:14,206
over this earlier, because
I didn't want to confuse


746
00:37:14,206 --> 00:37:15,086
where we were in the talk.


747
00:37:15,636 --> 00:37:17,776
If we go in the download
service, we see this thing


748
00:37:17,776 --> 00:37:21,436
where we're calling out to UI
application, shared application,


749
00:37:21,696 --> 00:37:22,536
give me your delegate.


750
00:37:22,536 --> 00:37:25,766
And then we're casting that
to a class that we know about,


751
00:37:25,766 --> 00:37:27,486
and we had to import
that header file.


752
00:37:27,986 --> 00:37:31,406
So now we've made our
download service dependent


753
00:37:31,766 --> 00:37:33,146
on our application delegate.


754
00:37:34,376 --> 00:37:36,056
That is, that's smelly code.


755
00:37:36,246 --> 00:37:37,076
You don't want to do that.


756
00:37:37,546 --> 00:37:38,676
Because your app delegate,


757
00:37:39,066 --> 00:37:42,606
its responsibility is
not providing information


758
00:37:42,606 --> 00:37:43,836
to download services.


759
00:37:44,326 --> 00:37:46,406
The application delegate
is supposed to be


760
00:37:46,406 --> 00:37:48,636
about maintaining
the relationship


761
00:37:48,716 --> 00:37:51,966
between your application
and the rest of the OS.


762
00:37:52,406 --> 00:37:55,486
The methods on there are
things like I'm about to go


763
00:37:55,486 --> 00:37:58,046
in the background, I came
back from the background.


764
00:37:58,346 --> 00:38:00,216
That's the stuff
that you should focus


765
00:38:00,216 --> 00:38:01,806
on for your application
delegate.


766
00:38:02,196 --> 00:38:05,156
I see this pattern repeated
in many people's code,


767
00:38:05,396 --> 00:38:06,976
and it's a really bad idea.


768
00:38:07,086 --> 00:38:09,596
If you're casting
shared application,


769
00:38:09,596 --> 00:38:11,566
application delegate
to your class,


770
00:38:11,596 --> 00:38:14,246
and then you're sending it
messages, that's a bad idea.


771
00:38:14,786 --> 00:38:18,976
So let's do a little bit
more clean up to fix that up.


772
00:38:19,516 --> 00:38:26,836
[ Background Sounds ]


773
00:38:27,336 --> 00:38:29,626
>> So a couple things
that we did.


774
00:38:30,776 --> 00:38:35,096
The first part is adding
an additional call-back


775
00:38:35,096 --> 00:38:36,596
into our delegate protocol.


776
00:38:37,076 --> 00:38:38,096
So we added a new method,


777
00:38:38,166 --> 00:38:41,256
download service did
finish with identifier.


778
00:38:41,726 --> 00:38:45,146
So that's going to let the
download services delegate know


779
00:38:45,696 --> 00:38:49,496
that this download has
finished that's related


780
00:38:49,496 --> 00:38:51,766
to this particular identifier.


781
00:38:51,766 --> 00:38:55,886
And we're going to call
that in the same place


782
00:38:55,916 --> 00:39:00,366
where we were calling out to
the UI Application delegate.


783
00:39:04,356 --> 00:39:08,876
Then, in our view controller,
in the implementation


784
00:39:08,956 --> 00:39:12,276
of that additional delegate
method, we're going to invoke


785
00:39:12,846 --> 00:39:14,706
that background session
completion handler.


786
00:39:15,466 --> 00:39:18,006
And not to go too far into
the details around there,


787
00:39:18,006 --> 00:39:20,706
because it's not germane to
talking about delegation,


788
00:39:20,706 --> 00:39:23,286
but that's just a call-back
that we tell the OS.


789
00:39:23,576 --> 00:39:25,476
Hey, we're finished
processing this download


790
00:39:25,476 --> 00:39:27,546
and you can take a new
snapshot of the application.


791
00:39:28,056 --> 00:39:31,346
I have a link to the talk on
NS URL session from last year,


792
00:39:31,626 --> 00:39:34,066
and there was also one this
year that has a lot more detail


793
00:39:34,066 --> 00:39:35,036
about how all that works.


794
00:39:36,056 --> 00:39:38,076
Now we have gotten
rid of the dependence


795
00:39:38,076 --> 00:39:41,416
from our download service
to our application delegate.


796
00:39:41,756 --> 00:39:45,196
So we no longer have this sort
of marrying of these ideas


797
00:39:45,526 --> 00:39:47,666
or placing too much
responsibility


798
00:39:47,666 --> 00:39:48,976
on the application delegate.


799
00:39:49,406 --> 00:39:51,986
The application delegate is
responsible for one thing.


800
00:39:52,406 --> 00:39:53,936
Keep it focused on
that one thing,


801
00:39:53,936 --> 00:39:55,126
and don't start spreading it


802
00:39:55,126 --> 00:39:57,846
out throughout your whole
application and using it


803
00:39:57,846 --> 00:39:58,946
for many different things


804
00:39:58,946 --> 00:40:02,016
that do not include its
set of responsibilities.


805
00:40:04,306 --> 00:40:08,956
So in summary, there are
lots of frameworks in iOS.


806
00:40:09,756 --> 00:40:13,356
But the cool thing is that once
you understand these common


807
00:40:13,356 --> 00:40:15,416
patterns that are used
throughout all these frameworks,


808
00:40:15,496 --> 00:40:19,206
delegation, data source,
target action, responder chain.


809
00:40:19,206 --> 00:40:22,256
Once you understand that in
one place, you understand


810
00:40:22,256 --> 00:40:24,756
across the whole
stack of frameworks.


811
00:40:24,836 --> 00:40:26,406
So you get to leverage
your learning,


812
00:40:26,786 --> 00:40:30,366
understanding these patterns
gives you power to use all


813
00:40:30,366 --> 00:40:31,936
of these frameworks
in your application.


814
00:40:33,066 --> 00:40:34,496
And the next thing
I want to say,


815
00:40:34,526 --> 00:40:38,586
in terms of summary,
is just go for it.


816
00:40:38,586 --> 00:40:41,756
There-- I have talked to many
other developers who spend time


817
00:40:41,846 --> 00:40:44,236
like fretting about, "is
this thing a controller?


818
00:40:44,236 --> 00:40:45,346
Is this thing a model?


819
00:40:45,346 --> 00:40:46,116
Is this thing a view?"


820
00:40:46,596 --> 00:40:47,536
Just go for it.


821
00:40:47,886 --> 00:40:48,556
Build stuff.


822
00:40:48,646 --> 00:40:51,836
Go out there and make amazing
stuff you can always re-factor


823
00:40:51,836 --> 00:40:55,286
it like we did here, not quite
live on stage, but pretty close.


824
00:40:55,396 --> 00:40:56,606
You can always do that.


825
00:40:56,606 --> 00:41:00,136
So just make stuff and you will
learn so much from doing that.


826
00:41:00,586 --> 00:41:02,916
All right, so for
more information,


827
00:41:02,916 --> 00:41:04,126
you can talk to my buddy, Jake.


828
00:41:04,656 --> 00:41:06,336
There's also the DEV
[assumed spelling] forums.


829
00:41:07,326 --> 00:41:09,366
Here's a link to those
related sessions I was telling


830
00:41:09,366 --> 00:41:09,766
you about.


831
00:41:09,766 --> 00:41:11,006
The talk this afternoon


832
00:41:11,476 --> 00:41:13,646
on Advanced iOS Application
Architecture


833
00:41:13,646 --> 00:41:16,326
and Patterns has tons of
fantastic stuff in it,


834
00:41:16,326 --> 00:41:19,946
and it's got a little bit of
information about Swift and some


835
00:41:19,946 --> 00:41:21,556
of the new patterns that
we're going to see emerge


836
00:41:21,606 --> 00:41:24,356
because of the new language,
which I'm really excited about.


837
00:41:24,596 --> 00:41:27,456
And then here are two other
talks from previous years


838
00:41:27,456 --> 00:41:28,496
that have more information.


839
00:41:28,756 --> 00:41:30,296
Thank you very much
for being here,


840
00:41:30,296 --> 00:41:35,626
and I hope you have a great
rest of your WWDC [applause].


841
00:41:36,016 --> 00:41:38,000
[ Silence ]

