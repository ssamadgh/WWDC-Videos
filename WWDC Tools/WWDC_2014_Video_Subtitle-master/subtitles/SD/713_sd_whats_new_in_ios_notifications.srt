1
00:00:11,211 --> 00:00:13,211
[ Applause ]


2
00:00:13,406 --> 00:00:14,346
>> Good afternoon, everybody.


3
00:00:16,946 --> 00:00:18,536
So, my name is Dan Kurtz.


4
00:00:18,736 --> 00:00:21,506
Today, my colleague, Rhett
Dickson, and I will be talking


5
00:00:21,506 --> 00:00:24,616
to you about What's New in
iOS Notifications and iOS 8.


6
00:00:25,576 --> 00:00:28,226
So, before we get into all the
great new features of iOS 8,


7
00:00:28,546 --> 00:00:31,466
let's lay down some foundation
about what notifications are


8
00:00:31,466 --> 00:00:36,176
and how you have been
using them in iOS 7 today.


9
00:00:36,236 --> 00:00:38,826
So, when I mention
notifications,


10
00:00:38,826 --> 00:00:40,546
I'm actually talking
about two different types


11
00:00:40,546 --> 00:00:41,656
of notifications, really.


12
00:00:42,126 --> 00:00:45,436
We've got user notifications and
we've got silent notifications.


13
00:00:46,236 --> 00:00:48,036
So let's start off with
user notifications.


14
00:00:48,236 --> 00:00:49,646
What are these?


15
00:00:50,976 --> 00:00:53,536
So, user notifications
are really just things


16
00:00:53,536 --> 00:00:58,116
that the user can interact with,
see or hear on their device.


17
00:00:58,366 --> 00:01:00,696
And they're coming
directly from your app.


18
00:01:01,056 --> 00:01:03,466
So, for instance, with
the messages icon up here


19
00:01:03,466 --> 00:01:05,286
on the top left-hand
corner of the screen,


20
00:01:05,756 --> 00:01:07,986
let's say that the user happened
to receive a message from one


21
00:01:07,986 --> 00:01:10,666
of their friends when the app is
currently not in the foreground.


22
00:01:11,266 --> 00:01:14,366
Well, we've got three different
options for user notifications


23
00:01:14,366 --> 00:01:16,066
that we could use
to let them know


24
00:01:16,066 --> 00:01:17,186
that there's new information.


25
00:01:18,256 --> 00:01:21,316
First one that we could
do is badge the app icon.


26
00:01:21,796 --> 00:01:23,816
Having that little red
circle with the number 1


27
00:01:23,816 --> 00:01:26,686
in there informs the user that
they've got one new message.


28
00:01:28,016 --> 00:01:30,706
Now, for times that the user
happens to have that device


29
00:01:30,706 --> 00:01:33,856
in their pocket and they might
not be able to see the screen,


30
00:01:34,336 --> 00:01:38,806
we could instead play a sound
[sound plays] informing the user


31
00:01:38,806 --> 00:01:40,056
that they've got a new message.


32
00:01:41,166 --> 00:01:46,416
And lastly, we have alerts,
which tick down as that banner


33
00:01:46,416 --> 00:01:49,556
from the top of the screen with
a little preview message of what


34
00:01:49,556 --> 00:01:51,086
that message actually contains


35
00:01:51,656 --> 00:01:54,726
so that the user doesn't even
have to tap on the messages icon


36
00:01:54,726 --> 00:01:55,836
to check out what's there.


37
00:01:56,806 --> 00:01:59,606
So we have badges, we have
sounds, we have alerts.


38
00:02:00,596 --> 00:02:03,426
And for alerts, they
can actually appear


39
00:02:03,526 --> 00:02:06,066
in different forms and in
different places as well.


40
00:02:06,956 --> 00:02:10,066
Depending on how the user
happened to set their settings


41
00:02:10,066 --> 00:02:12,596
for your app in the
notification center settings,


42
00:02:12,796 --> 00:02:15,686
these alerts-instead of being
those banners that tick down


43
00:02:15,686 --> 00:02:18,656
and then go away
automatically-they could appear


44
00:02:18,656 --> 00:02:19,706
as modal alerts.


45
00:02:19,866 --> 00:02:22,136
They'll stay up there on the
screen until the user happens


46
00:02:22,136 --> 00:02:24,316
to interact with them.


47
00:02:24,316 --> 00:02:27,226
And then we also have alerts
that they can be displayed


48
00:02:27,226 --> 00:02:31,246
in the notification center drag
down as well as for the time


49
00:02:31,246 --> 00:02:33,336
that the user happened to have
the device in their pocket


50
00:02:33,336 --> 00:02:36,316
and the screen was off when they
happened to receive an alert.


51
00:02:36,736 --> 00:02:38,996
Next time they turn it on,
it's waiting right there


52
00:02:38,996 --> 00:02:40,336
for them in the lock screen.


53
00:02:42,276 --> 00:02:44,366
So, where do these
notifications come from?


54
00:02:45,606 --> 00:02:47,286
Well, for user notifications
they can come


55
00:02:47,316 --> 00:02:48,586
from two different places.


56
00:02:48,826 --> 00:02:51,576
First off, they can be coming
directly from your app.


57
00:02:51,716 --> 00:02:55,096
That is, your app uses
UILocalNotification API


58
00:02:55,596 --> 00:02:57,916
to present a notification
to the user.


59
00:02:59,486 --> 00:03:02,896
Alternatively, you could
also have user notifications


60
00:03:03,166 --> 00:03:06,206
that are triggered in response
to remote push payloads.


61
00:03:06,736 --> 00:03:09,126
You've got an APNs server, the
app out there on the Internet.


62
00:03:09,466 --> 00:03:11,376
In coordination with
the Apple Push Services,


63
00:03:12,346 --> 00:03:16,736
you send a push payload
that defines, in this case,


64
00:03:16,736 --> 00:03:22,166
an alert in it-oh,
sorry,-that results in an alert


65
00:03:22,166 --> 00:03:24,516
that will appear
up on the screen.


66
00:03:25,096 --> 00:03:26,816
Now, I go a little
bit over eager there.


67
00:03:27,056 --> 00:03:29,346
We've also got another
type of notification.


68
00:03:29,726 --> 00:03:31,446
I mentioned we have
user notifications


69
00:03:31,446 --> 00:03:32,686
and silent notifications.


70
00:03:33,276 --> 00:03:37,216
Silent notifications, they are
just push payloads that are sent


71
00:03:37,216 --> 00:03:39,066
from your APNs server that,


72
00:03:39,066 --> 00:03:43,166
instead of presenting a user
notification like an alert


73
00:03:43,166 --> 00:03:48,186
or a sound or a badge on the
screen, iOS, when it receives


74
00:03:48,186 --> 00:03:50,776
that push, will instead wake
up your app in the background


75
00:03:50,776 --> 00:03:55,846
so that your app can do some
background image processing


76
00:03:55,976 --> 00:03:57,156
or information processing.


77
00:03:57,236 --> 00:04:00,936
In this case, your app is
fetching content from a server


78
00:04:01,476 --> 00:04:04,476
so that the next time the user
happens to tap on your app icon


79
00:04:04,536 --> 00:04:07,496
and bring it to the foreground,
that information is there


80
00:04:07,496 --> 00:04:10,456
and ready so nobody has to
wait for a loading spinner


81
00:04:10,456 --> 00:04:12,066
to complete and all
that other stuff.


82
00:04:12,666 --> 00:04:15,276
So that's notifications
in iOS 7.


83
00:04:15,386 --> 00:04:17,766
We've got user types,
we've got silent types.


84
00:04:18,156 --> 00:04:22,166
User notifications can come
from locally on the app.


85
00:04:22,726 --> 00:04:25,636
Remote notifications,
they can only be coming


86
00:04:25,636 --> 00:04:27,016
from push payloads.


87
00:04:27,996 --> 00:04:32,346
So let's talk about the new
features of iOS 8 notifications.


88
00:04:33,406 --> 00:04:36,746
We're going to be talking about
four great new topics today.


89
00:04:36,746 --> 00:04:39,096
First, I'm going to be talking
about user notifications,


90
00:04:39,406 --> 00:04:41,326
what's changed about
them in iOS 8,


91
00:04:41,326 --> 00:04:42,846
specifically with registration.


92
00:04:44,146 --> 00:04:46,066
Then Rhett is going to come
up and he's going to talk


93
00:04:46,066 --> 00:04:48,416
about a great new feature,
notification actions.


94
00:04:48,756 --> 00:04:50,786
These are those interactive
notifications


95
00:04:51,126 --> 00:04:53,926
to make your app interactive
even without it being there,


96
00:04:54,156 --> 00:04:55,146
foreground on the screen.


97
00:04:56,556 --> 00:04:57,826
Then we're going to
pass the baton again.


98
00:04:57,826 --> 00:05:00,936
I'm going to come back to talk
about remote notifications,


99
00:05:00,936 --> 00:05:03,646
some changes that we have
there for registering.


100
00:05:03,776 --> 00:05:07,446
And then finally, we're going to
talk about one last new feature,


101
00:05:07,676 --> 00:05:09,406
location-based notifications.


102
00:05:09,866 --> 00:05:12,376
User notifications that
are triggered in response


103
00:05:12,376 --> 00:05:14,706
to the user changing
their location.


104
00:05:15,916 --> 00:05:20,536
So let's get on to the very
first topic, user notifications.


105
00:05:22,356 --> 00:05:26,016
So, in iOS 8, regardless of
whether your app is going


106
00:05:26,016 --> 00:05:28,066
to display remote
user notifications


107
00:05:28,536 --> 00:05:32,906
or local user notifications,
your app must first register


108
00:05:33,376 --> 00:05:35,016
to use those notifications.


109
00:05:35,936 --> 00:05:39,096
And this is going to result
in an alert that is going


110
00:05:39,096 --> 00:05:41,706
to be presented to the
user, asking them if it's OK


111
00:05:41,706 --> 00:05:44,056
for your app to present
notifications to them.


112
00:05:45,226 --> 00:05:46,466
So, what does this
code look like?


113
00:05:46,466 --> 00:05:49,346
How do we register your app
in order to take advantage


114
00:05:49,346 --> 00:05:50,386
of user notifications?


115
00:05:50,886 --> 00:05:53,976
Well, the code is actually
pretty straightforward.


116
00:05:54,746 --> 00:05:57,146
The very first thing you need
to do is declare the types


117
00:05:57,146 --> 00:05:59,046
of user notifications
that you wish


118
00:05:59,046 --> 00:06:00,556
to present from within your app.


119
00:06:01,016 --> 00:06:02,966
In this case, this
app is actually going


120
00:06:02,966 --> 00:06:04,036
to present all the
different types


121
00:06:04,036 --> 00:06:05,636
of notifications
it possibly can.


122
00:06:06,126 --> 00:06:08,426
It's going to be showing
badges on the icon.


123
00:06:08,766 --> 00:06:12,426
It'll also be playing sounds
as well as displaying alerts.


124
00:06:13,386 --> 00:06:15,776
Now, once we've decided the
types that we're actually going


125
00:06:15,776 --> 00:06:17,836
to be presenting, we're going


126
00:06:17,896 --> 00:06:20,166
to create a
UIUserNotificationSettings


127
00:06:20,166 --> 00:06:23,896
object passing these types to
settingsForTypes categories.


128
00:06:24,966 --> 00:06:27,256
Now, that second parameter,
the categories parameter,


129
00:06:27,256 --> 00:06:28,436
you'll notice that
it's nil here.


130
00:06:28,556 --> 00:06:29,356
Don't worry about it.


131
00:06:29,766 --> 00:06:31,856
That has something to do
with notification actions.


132
00:06:32,166 --> 00:06:33,606
Rhett's going to talk
about those later.


133
00:06:35,096 --> 00:06:37,016
Finally, once we've
created the settings object,


134
00:06:37,326 --> 00:06:39,946
we're just going to pass it to
the shared application instance


135
00:06:40,366 --> 00:06:42,216
in registerUser
NotificationSettings.


136
00:06:42,736 --> 00:06:47,386
And at that point, assuming this
is the very first time your app


137
00:06:47,386 --> 00:06:50,496
has called this method,
the user is going


138
00:06:50,496 --> 00:06:54,576
to be displayed an alert asking
them if it's OK for your app


139
00:06:54,576 --> 00:06:56,286
to present user notifications
to them.


140
00:06:57,306 --> 00:07:00,456
Now, they're either going
to say OK or maybe not now.


141
00:07:01,166 --> 00:07:04,636
But no matter what they do, they
could always, at a later time,


142
00:07:04,636 --> 00:07:07,126
background your app and change
their preferences and settings.


143
00:07:07,766 --> 00:07:11,146
So this isn't the last time
that you have a chance in order


144
00:07:11,146 --> 00:07:12,796
to present notifications
to the user.


145
00:07:14,676 --> 00:07:17,676
So, once they've actually
replied to that alert,


146
00:07:17,886 --> 00:07:19,956
your app delegate is
going to get a callback,


147
00:07:20,426 --> 00:07:23,636
application didregisterUser
NotificationSettings.


148
00:07:24,106 --> 00:07:26,426
That notification settings
object that we pass back


149
00:07:26,426 --> 00:07:29,246
to you represents the
user's up-to-date,


150
00:07:29,246 --> 00:07:32,896
most current preferences for
displaying notifications.


151
00:07:33,526 --> 00:07:36,976
And at that point, all you
need to do is check what types


152
00:07:36,976 --> 00:07:41,166
of notifications you're
allowed to present to the user.


153
00:07:41,296 --> 00:07:45,366
So, again, like I mentioned
before, there is the possibility


154
00:07:45,366 --> 00:07:47,346
that the user could
always background your app,


155
00:07:47,506 --> 00:07:49,556
go into settings and
change their preferences.


156
00:07:49,656 --> 00:07:51,126
And you need to stay
on top of this.


157
00:07:51,376 --> 00:07:54,646
You don't want to be doing any
unnecessary processing for, say,


158
00:07:54,646 --> 00:07:57,596
preparing a alert-type
notification


159
00:07:57,596 --> 00:07:58,696
when you don't really need to.


160
00:07:59,706 --> 00:08:02,616
So, we have API in UI
application as well.


161
00:08:03,896 --> 00:08:07,146
This
currentUserNotificationSettings


162
00:08:07,146 --> 00:08:08,996
method that is available


163
00:08:08,996 --> 00:08:11,856
in the UI application
instance will give you the most


164
00:08:11,856 --> 00:08:14,606
up-to-date user notification
preferences.


165
00:08:15,006 --> 00:08:16,436
And from there you can make sure


166
00:08:16,706 --> 00:08:20,026
that you're not doing any
unnecessary work to prepare


167
00:08:20,026 --> 00:08:21,546
for notifications
that aren't going


168
00:08:21,546 --> 00:08:22,856
to be displayed to
the user anyway.


169
00:08:26,126 --> 00:08:27,466
So, that's user notifications.


170
00:08:28,036 --> 00:08:30,796
Really, it's just a
registration method to state


171
00:08:30,796 --> 00:08:33,596
that your app wishes to
use user notifications.


172
00:08:34,316 --> 00:08:36,066
And to do this, you just need


173
00:08:36,066 --> 00:08:38,086
to call registerUser
NotificationSettings


174
00:08:38,086 --> 00:08:40,066
on the UIApplication
shared instance.


175
00:08:41,066 --> 00:08:44,006
Any time you need to get the
most current user preferences,


176
00:08:44,145 --> 00:08:46,226
you just have to call
currentNotificationSettings


177
00:08:46,226 --> 00:08:47,226
on UIApplication.


178
00:08:47,686 --> 00:08:50,626
And in order to create these
settings objects at the time


179
00:08:50,626 --> 00:08:54,116
of registering, you just call
settingsForTypes: categories.


180
00:08:55,206 --> 00:08:57,726
And recall, I said
the categories was nil


181
00:08:57,726 --> 00:08:59,126
in the previous sample slide.


182
00:08:59,436 --> 00:09:01,696
And that has something to do
with notification actions.


183
00:09:02,496 --> 00:09:04,146
So, Rhett's going to
come up on stage and talk


184
00:09:04,146 --> 00:09:07,056
about notification actions,
a great new feature in iOS 8


185
00:09:07,056 --> 00:09:08,906
that I can't wait to see
you guys take advantage of.


186
00:09:09,506 --> 00:09:09,716
Thanks.


187
00:09:10,516 --> 00:09:13,276
[ Applause ]


188
00:09:13,776 --> 00:09:14,166
>> Thanks, Dan.


189
00:09:14,546 --> 00:09:16,356
So, my name is Rhett Dickson.


190
00:09:16,516 --> 00:09:18,326
And I'm going to talk
about notification actions,


191
00:09:18,376 --> 00:09:22,026
a great new feature in iOS 8
that we're really excited about.


192
00:09:23,226 --> 00:09:26,346
First, let's talk about
notification actions in iOS 7.


193
00:09:26,876 --> 00:09:32,936
Whether on the lock screen,
notification center, banners


194
00:09:33,706 --> 00:09:38,046
or modal alerts, you get one
default action when you swipe


195
00:09:38,046 --> 00:09:39,326
or tap on the notification


196
00:09:39,456 --> 00:09:41,306
that launches the
application in the foreground.


197
00:09:41,976 --> 00:09:47,846
In iOS 8, in addition to that
default action, when you swipe


198
00:09:47,846 --> 00:09:51,056
to the left on the lock
screen, you get two new actions.


199
00:09:51,986 --> 00:09:54,326
Likewise, in notification
center, when you swipe


200
00:09:54,326 --> 00:09:56,326
to the left, two new actions.


201
00:09:57,056 --> 00:10:02,076
In banners, when you pull
down, two more actions.


202
00:10:02,276 --> 00:10:06,226
And in modal alerts, when you
tap on the Options button,


203
00:10:07,296 --> 00:10:08,776
you get up to four more actions.


204
00:10:10,196 --> 00:10:13,206
So, to use notification
actions in your application,


205
00:10:13,206 --> 00:10:14,586
you need to follow three steps.


206
00:10:15,296 --> 00:10:17,006
You need to, first,
register your actions.


207
00:10:17,726 --> 00:10:19,586
You need to, second, send a push


208
00:10:19,646 --> 00:10:21,236
or schedule a local
notification.


209
00:10:21,916 --> 00:10:24,366
And finally, once the user has
seen these actions and tapped


210
00:10:24,366 --> 00:10:26,136
on one, you need to
handle the action.


211
00:10:27,756 --> 00:10:29,586
To illustrate these steps,


212
00:10:29,586 --> 00:10:31,456
I'm going to use the
calendar invite example


213
00:10:31,716 --> 00:10:34,796
with three actions:
Accept, Maybe and Decline.


214
00:10:39,036 --> 00:10:41,546
So let's first look at
registering actions.


215
00:10:42,176 --> 00:10:45,166
You start off by
creating your action.


216
00:10:45,166 --> 00:10:48,986
You then set the
identifier on your action.


217
00:10:49,456 --> 00:10:51,496
The same identifier will
be passed back to you


218
00:10:51,496 --> 00:10:52,496
when you handle the action.


219
00:10:54,396 --> 00:10:55,596
You then set a title.


220
00:10:55,736 --> 00:10:58,186
This is a localized string
that'll be shown to the user.


221
00:11:00,346 --> 00:11:01,816
You then set the
activation mode.


222
00:11:02,536 --> 00:11:04,646
This will determine if your
application is launched


223
00:11:04,646 --> 00:11:06,556
in the foreground
or the background.


224
00:11:07,096 --> 00:11:09,326
If you need to show UI, you
should choose foreground.


225
00:11:09,646 --> 00:11:10,956
If you don't need to
interrupt the user,


226
00:11:11,046 --> 00:11:12,476
you should instead
choose background.


227
00:11:13,286 --> 00:11:15,696
If you do run in the background,
you'll have on the order


228
00:11:15,696 --> 00:11:17,466
of seconds, not minutes, to run.


229
00:11:17,996 --> 00:11:21,806
You then set whether the
action is destructive.


230
00:11:22,306 --> 00:11:25,196
If this is Yes, the
action will be shown as red


231
00:11:25,196 --> 00:11:29,136
on the lock screen and
in notification center.


232
00:11:29,296 --> 00:11:31,416
Finally, you set whether
authentication is required.


233
00:11:32,106 --> 00:11:35,756
If this is Yes, and the device
is locked, the user will have


234
00:11:35,756 --> 00:11:38,106
to enter in their passcode
when they tap on the action.


235
00:11:38,906 --> 00:11:42,316
If your action is a background
action, it's important to note


236
00:11:42,316 --> 00:11:44,256
that the device does
not actually unlock.


237
00:11:44,686 --> 00:11:47,226
So, if your application
accesses any files on disk,


238
00:11:47,516 --> 00:11:48,786
you need to be sure
that they belong


239
00:11:48,786 --> 00:11:50,286
in the correct data
protection class.


240
00:11:51,106 --> 00:11:52,776
For more information
on data protection,


241
00:11:53,116 --> 00:11:54,986
we'll point you toward
some more resources


242
00:11:54,986 --> 00:11:55,876
at the end of this session.


243
00:11:56,486 --> 00:12:00,886
So here's an example of
the accept invite action.


244
00:12:01,846 --> 00:12:05,136
It doesn't need to show any UI,
so it can run in the background.


245
00:12:06,106 --> 00:12:08,736
It's not destructive,
so it's shown in blue


246
00:12:08,876 --> 00:12:10,676
in notification center
and on the lock screen.


247
00:12:11,336 --> 00:12:14,066
And because accepting an
invite is relatively harmless,


248
00:12:14,576 --> 00:12:15,926
you don't need to
require authentication.


249
00:12:16,516 --> 00:12:19,816
On the other hand, if you
had a Trash Mail action,


250
00:12:20,596 --> 00:12:23,446
it also doesn't need to show UI,
so it can run in the background.


251
00:12:24,116 --> 00:12:27,696
It is destructive, so it will be
shown in red on the lock screen


252
00:12:27,696 --> 00:12:28,766
and notification center.


253
00:12:29,756 --> 00:12:31,276
And because you don't want
someone to be able to pick


254
00:12:31,276 --> 00:12:32,746
up your phone and
delete all your email,


255
00:12:32,936 --> 00:12:34,096
authentication is required.


256
00:12:36,036 --> 00:12:38,266
Finally, we have a Reply action.


257
00:12:39,126 --> 00:12:41,666
This does need to show
UI, so it will need


258
00:12:41,666 --> 00:12:42,556
to run in the foreground.


259
00:12:43,136 --> 00:12:45,466
Again, it's not destructive,
so it'll be shown as blue.


260
00:12:46,506 --> 00:12:49,626
And because it's a foreground
action, if the device is locked,


261
00:12:49,626 --> 00:12:51,656
the user will have to
enter in their passcode.


262
00:12:52,036 --> 00:12:52,856
So, in this case,


263
00:12:52,896 --> 00:12:55,286
the authentication required
property has no effect.


264
00:12:57,636 --> 00:13:00,016
So, now that you've
defined your actions,


265
00:13:00,246 --> 00:13:01,776
you need to group
them into a category.


266
00:13:02,526 --> 00:13:04,606
A category is simply
a type of notification


267
00:13:04,686 --> 00:13:05,976
with associated actions.


268
00:13:06,856 --> 00:13:09,706
For example, you can have the
invite category, with Accept,


269
00:13:09,706 --> 00:13:10,916
Maybe and Decline actions.


270
00:13:11,386 --> 00:13:14,156
You could also have a New Mail
category with Mark as Read


271
00:13:14,156 --> 00:13:18,386
and Trash, or a tagged category
of Like, Comment and Untag.


272
00:13:19,016 --> 00:13:23,406
To start using the categories,
you first create one.


273
00:13:23,946 --> 00:13:27,536
You then set the identifier.


274
00:13:28,086 --> 00:13:30,556
You'll include this
identifier in your push payload


275
00:13:30,556 --> 00:13:31,606
and your local notification.


276
00:13:32,156 --> 00:13:37,106
You then set the actions on the
category for an action context.


277
00:13:37,706 --> 00:13:39,326
There are two action contexts.


278
00:13:39,646 --> 00:13:42,326
The first, the default
action context supports


279
00:13:42,326 --> 00:13:43,446
up to four actions.


280
00:13:44,006 --> 00:13:46,076
The second, the minimal
action context,


281
00:13:46,536 --> 00:13:48,906
is used when there's only
room for two actions.


282
00:13:49,796 --> 00:13:52,916
So, for example, if you set
these three actions, Accept,


283
00:13:52,916 --> 00:13:55,796
Maybe and Decline, for the
default action context,


284
00:13:56,166 --> 00:13:58,066
and if this notification
was then presented


285
00:13:58,066 --> 00:14:02,066
on the lock screen, you would
see the first two actions,


286
00:14:02,066 --> 00:14:02,896
Accept and Maybe.


287
00:14:03,746 --> 00:14:06,416
If you wanted a different set
of actions, such as Accept


288
00:14:06,416 --> 00:14:11,126
and Decline, you could set those
on the minimal action context.


289
00:14:11,836 --> 00:14:14,436
Then when this notification is
presented on the lock screen,


290
00:14:15,956 --> 00:14:17,646
you would see Accept
and Decline.


291
00:14:18,516 --> 00:14:21,796
When this same notification
is presented as a modal alert,


292
00:14:22,176 --> 00:14:24,386
because this is the
default action context,


293
00:14:24,976 --> 00:14:26,456
you would see the
full three actions,


294
00:14:26,456 --> 00:14:27,746
Accept, Maybe and Decline.


295
00:14:30,096 --> 00:14:32,096
So, once you've defined
your categories,


296
00:14:32,096 --> 00:14:33,226
you now need to register them.


297
00:14:34,226 --> 00:14:38,476
You do this by first grouping
them together in a set,


298
00:14:38,726 --> 00:14:41,546
providing them to your user
notification settings-this is


299
00:14:41,546 --> 00:14:46,276
where Dan left us off-and then
registering those settings


300
00:14:46,366 --> 00:14:47,836
with your shared
application instance.


301
00:14:49,976 --> 00:14:51,896
So now we've registered
our actions.


302
00:14:52,296 --> 00:14:54,636
The next thing to do is to
send a push notification


303
00:14:54,946 --> 00:14:57,376
or schedule a local notification
to show those actions.


304
00:14:58,336 --> 00:15:00,026
In the remote notification case,


305
00:15:00,476 --> 00:15:03,326
you need to include the category
identifier in your push payload.


306
00:15:04,146 --> 00:15:06,156
We'll use this to determine
what actions to show


307
00:15:06,156 --> 00:15:07,466
when we present your
notification.


308
00:15:08,506 --> 00:15:10,246
We're also very excited
to announce


309
00:15:10,246 --> 00:15:13,116
that the previous size
limit of 256 bytes


310
00:15:13,116 --> 00:15:18,096
for a push payload has now
been increased to 2 kilobytes.


311
00:15:19,516 --> 00:15:25,976
[ Applause ]


312
00:15:26,476 --> 00:15:28,496
So, in the local
notification case,


313
00:15:29,186 --> 00:15:30,596
you create your notification
as normal.


314
00:15:33,866 --> 00:15:36,026
You then set the category of
the actions you'd like shown.


315
00:15:37,916 --> 00:15:39,986
Finally, you schedule the
notification as normal.


316
00:15:42,976 --> 00:15:45,056
So, once you've sent
a push notification


317
00:15:45,056 --> 00:15:46,826
or scheduled a local
notification


318
00:15:46,826 --> 00:15:49,526
and the user has seen this
and tapped on an action,


319
00:15:49,846 --> 00:15:51,096
you then need to
handle that action.


320
00:15:54,076 --> 00:15:57,416
To handle the default action
when a user just swipes or taps


321
00:15:57,416 --> 00:16:01,266
on the notification, launch your
application in the foreground


322
00:16:01,996 --> 00:16:04,476
and call application:
didFinishLaunching WithOptions,


323
00:16:04,696 --> 00:16:06,486
where we'll pass in
the local notification


324
00:16:06,716 --> 00:16:07,876
or the remote notification.


325
00:16:08,806 --> 00:16:12,626
In the remote notification case,
we'll also call application:


326
00:16:12,626 --> 00:16:15,306
didReceiveRemote Notification:
fetchCompletionHandler.


327
00:16:15,876 --> 00:16:20,176
If your application is
already in the foreground,


328
00:16:20,756 --> 00:16:22,466
we won't actually
show the notification.


329
00:16:24,076 --> 00:16:26,356
Instead, we'll either
call application:


330
00:16:26,356 --> 00:16:29,036
didReceiveLocal Notification
or application:


331
00:16:29,036 --> 00:16:32,006
didReceiveRemote Notification
with fetchCompletionHandler


332
00:16:32,356 --> 00:16:33,716
if you've implemented that.


333
00:16:33,796 --> 00:16:35,556
Otherwise, we'll
call the version


334
00:16:35,556 --> 00:16:36,666
without the completion handler.


335
00:16:37,576 --> 00:16:40,896
Finally, to handle the new
additional actions in iOS 8,


336
00:16:41,136 --> 00:16:45,206
you need to implement at
least one of two new methods


337
00:16:45,206 --> 00:16:46,306
on your application delegate.


338
00:16:46,836 --> 00:16:52,336
In either case, we'll pass
you the action identifier.


339
00:16:52,816 --> 00:16:55,196
You can use this to determine
what action was tapped on.


340
00:16:58,296 --> 00:17:00,996
We'll also pass you either
the remote notification


341
00:17:01,896 --> 00:17:03,276
or the local notification.


342
00:17:04,476 --> 00:17:07,486
And you can use this to retrieve
any information you need


343
00:17:07,486 --> 00:17:08,455
to handle that action.


344
00:17:11,955 --> 00:17:14,546
Finally, we'll pass you
the completion handler,


345
00:17:15,516 --> 00:17:17,705
which you must call when you
finish handling the action.


346
00:17:18,306 --> 00:17:23,576
So, to summarize, to
use notification actions


347
00:17:23,576 --> 00:17:27,556
in your application, you first
need to register your actions.


348
00:17:27,945 --> 00:17:30,796
This involves defining
your actions, grouping them


349
00:17:30,796 --> 00:17:33,626
into a category and then
registering those categories


350
00:17:33,626 --> 00:17:35,126
with your user notification
settings.


351
00:17:35,486 --> 00:17:39,206
You then need to send
a push notification


352
00:17:39,306 --> 00:17:40,866
or schedule a local
notification,


353
00:17:41,056 --> 00:17:42,666
including the category
identifier


354
00:17:42,666 --> 00:17:43,956
of the actions you'd like shown.


355
00:17:44,516 --> 00:17:48,676
You then need to handle the
action once the user has tapped


356
00:17:48,676 --> 00:17:50,866
on it by implementing
one of the new methods


357
00:17:50,866 --> 00:17:51,956
on your application delegate.


358
00:17:53,276 --> 00:17:55,806
Notification actions are a great
new feature and we can't wait


359
00:17:55,806 --> 00:17:56,806
to see what you're
going to do with them.


360
00:17:57,496 --> 00:17:59,456
I'm now going to pass
it back to Dan to talk


361
00:17:59,456 --> 00:18:00,646
about remote notifications.


362
00:18:01,046 --> 00:18:03,046
[ Applause ]


363
00:18:03,076 --> 00:18:06,486
>> Hey. So, let's
talk about what's new


364
00:18:06,646 --> 00:18:09,526
with remote notifications
in iOS 8.


365
00:18:11,266 --> 00:18:13,326
So, recall we've got
two different types


366
00:18:13,326 --> 00:18:14,606
of remote notifications.


367
00:18:14,986 --> 00:18:17,496
We have user type
remote notifications.


368
00:18:17,856 --> 00:18:21,416
That's when your APNs server
sends a push notification


369
00:18:21,416 --> 00:18:24,186
to the device wherein the
payload we've got, in this case,


370
00:18:24,186 --> 00:18:27,786
an alert, that results in a user
notification being presented


371
00:18:27,786 --> 00:18:31,126
to the user as if it was coming
from the app that's running


372
00:18:31,126 --> 00:18:34,576
or installed right
there on the device.


373
00:18:34,746 --> 00:18:37,876
We've also got silent types
of remote notifications.


374
00:18:38,736 --> 00:18:42,496
This is when your APNs server
is sending a push notification


375
00:18:42,496 --> 00:18:44,806
with a content available
flag contained in it.


376
00:18:45,596 --> 00:18:48,516
And then instead of us
presenting a user notification


377
00:18:48,826 --> 00:18:54,206
on the device, instead iOS 8 is
going to come in, wake your app


378
00:18:54,206 --> 00:18:55,946
up in the background,
then it can go


379
00:18:55,946 --> 00:18:57,766
and fetch whatever
content it needs to


380
00:18:57,766 --> 00:19:01,106
or do whatever info
processing is necessary so that


381
00:19:01,106 --> 00:19:02,916
when the user next
launches the app,


382
00:19:03,706 --> 00:19:07,266
all that info is right there
ready for them to ingest.


383
00:19:09,506 --> 00:19:12,496
So, for user notifications
that are sourced


384
00:19:12,496 --> 00:19:17,186
from remote payloads, just
like for local notifications,


385
00:19:17,676 --> 00:19:21,206
you must make sure that your app
calls registerUserNotification


386
00:19:21,206 --> 00:19:24,436
Settings before any
alerts or badges


387
00:19:24,626 --> 00:19:27,486
or sounds are actually
going to be presented.


388
00:19:27,486 --> 00:19:30,216
You will need to also
register for remote pushes.


389
00:19:30,216 --> 00:19:31,806
And we'll show how to
get into that later.


390
00:19:33,316 --> 00:19:37,086
Now, for silent notifications,
just like in iOS 7 and before,


391
00:19:37,536 --> 00:19:40,606
you need to define in
your info.plist file a


392
00:19:40,606 --> 00:19:41,876
UIBackgroundModes array.


393
00:19:41,876 --> 00:19:45,036
And that array must
contain an entry


394
00:19:45,066 --> 00:19:46,876
of remote notification in it.


395
00:19:48,066 --> 00:19:50,696
So, user notifications,
silent notifications,


396
00:19:50,696 --> 00:19:52,186
these are not mutually
exclusive.


397
00:19:52,676 --> 00:19:54,166
Your app actually can use both.


398
00:19:54,766 --> 00:19:57,236
Mix and match them to
whatever makes most sense


399
00:19:57,236 --> 00:20:02,056
for your users and for your app.


400
00:20:02,346 --> 00:20:05,216
So, for remote notifications,
you must make sure


401
00:20:05,506 --> 00:20:08,376
that you are registering before
you can receive any pushes


402
00:20:08,376 --> 00:20:09,516
from your APNs server.


403
00:20:10,986 --> 00:20:14,896
Now, in iOS 7, when
you would register


404
00:20:14,896 --> 00:20:16,106
for remote notifications,


405
00:20:16,156 --> 00:20:17,836
we would ask the
user for permission.


406
00:20:18,996 --> 00:20:21,876
But now, since we have separated
the concept of registering


407
00:20:21,876 --> 00:20:24,736
for user notifications, which
does require permission,


408
00:20:25,246 --> 00:20:27,616
from remote notifications
that could be user type


409
00:20:27,706 --> 00:20:32,136
or silent type, we actually are
opting your apps into being able


410
00:20:32,136 --> 00:20:35,586
to receive remote notifications
of any payload type by default.


411
00:20:36,836 --> 00:20:39,416
However, keep in
mind-ah, OK, cool.


412
00:20:40,516 --> 00:20:42,726
[ Applause ]


413
00:20:43,226 --> 00:20:46,266
Thanks! Keep in mind,
however, that the user could


414
00:20:46,266 --> 00:20:48,086
at any time go into
the settings app


415
00:20:48,086 --> 00:20:49,426
and change their preferences.


416
00:20:51,856 --> 00:20:54,786
So, how do we actually register
for remote notifications?


417
00:20:56,126 --> 00:20:58,586
In iOS 7 and before,
we asked you


418
00:20:58,586 --> 00:21:01,406
to call this method
here registerForRemote


419
00:21:01,406 --> 00:21:02,716
NotificationTypes.


420
00:21:03,236 --> 00:21:04,476
That's now deprecated.


421
00:21:04,826 --> 00:21:08,056
Because we've change the way
we define user notifications


422
00:21:08,056 --> 00:21:11,356
and remote notifications,
all you need to do is call


423
00:21:11,356 --> 00:21:14,556
on UIApplication, register
for remote notifications.


424
00:21:15,266 --> 00:21:20,966
Now again, this will allow your
app to receive remote payloads


425
00:21:21,066 --> 00:21:22,796
that are coming from
your APNs server.


426
00:21:23,556 --> 00:21:26,086
But if you want user
notifications to be presented


427
00:21:26,086 --> 00:21:28,496
in response to those
payloads, if you've got, say,


428
00:21:28,496 --> 00:21:30,836
an alert defined
in those payloads,


429
00:21:31,266 --> 00:21:34,976
you also must make sure that you
call registerUserNotification


430
00:21:34,976 --> 00:21:39,146
Settings, as I explained
earlier in the talk.


431
00:21:39,416 --> 00:21:42,126
So, once you've called
registerForRemoteNotifications


432
00:21:42,616 --> 00:21:45,486
as well as optionally
registerUserNotification


433
00:21:45,486 --> 00:21:48,736
Settings, your app
delegate needs


434
00:21:48,856 --> 00:21:51,356
to implement
applicationDidRegisterForRemote


435
00:21:51,356 --> 00:21:53,426
NotificationsWithDeviceToken.


436
00:21:53,936 --> 00:21:55,426
This actually isn't new API.


437
00:21:55,936 --> 00:21:58,746
This is something that has
existed in iOS 7 and previously.


438
00:21:59,116 --> 00:22:01,886
Just letting you know that you
still need to implement this


439
00:22:02,046 --> 00:22:03,646
for handling remote
notifications.


440
00:22:04,186 --> 00:22:07,686
And what this callback does
is it provides your app


441
00:22:07,836 --> 00:22:11,956
with a device token, where once
you receive that token you need


442
00:22:11,956 --> 00:22:14,336
to go and pass it off
to your APNs server.


443
00:22:14,906 --> 00:22:17,696
Now recall, you need
to make sure


444
00:22:17,696 --> 00:22:20,456
that you've always got the
most up-to-date device token


445
00:22:20,666 --> 00:22:22,526
registered with your
APNs server.


446
00:22:22,916 --> 00:22:26,006
Otherwise, pushes may not make
their way to the user's device.


447
00:22:26,506 --> 00:22:29,596
So, in the case that the user
happened to disable your app


448
00:22:29,706 --> 00:22:33,226
from using remote notifications,
or for any other failure case,


449
00:22:34,316 --> 00:22:36,536
recall that the app
delegate also needs


450
00:22:36,536 --> 00:22:39,086
to implement
applicationDidFailToRegister


451
00:22:39,086 --> 00:22:40,576
ForvRemote
NotificationsWithError.


452
00:22:41,966 --> 00:22:45,296
And at this point, all you need
to do is take that error object,


453
00:22:45,336 --> 00:22:49,076
process it appropriately and
make sure you disable any logic


454
00:22:49,076 --> 00:22:50,866
within your application
that's hinged off


455
00:22:50,866 --> 00:22:52,646
of receiving remote
notifications.


456
00:22:53,186 --> 00:22:55,886
You don't want to be doing
any unnecessary processing


457
00:22:55,886 --> 00:22:57,786
within your app for
notifications


458
00:22:57,786 --> 00:22:59,026
that aren't going
to be coming in.


459
00:22:59,546 --> 00:23:01,016
Just gracefully degrade.


460
00:23:01,586 --> 00:23:06,556
So, that's what's new with
remote notifications in iOS 8.


461
00:23:07,156 --> 00:23:10,166
Again, just like before,
you do have to register


462
00:23:10,166 --> 00:23:12,846
for remote notifications before
you can actually receive them.


463
00:23:14,276 --> 00:23:18,756
However, now in iOS 8,
the user will be opted


464
00:23:18,756 --> 00:23:22,046
into receiving remote
notifications.


465
00:23:22,746 --> 00:23:25,456
And they could go into
settings later and disable this.


466
00:23:26,356 --> 00:23:27,746
However, it does
still require you


467
00:23:27,746 --> 00:23:29,336
to call this registration API.


468
00:23:29,336 --> 00:23:32,606
As well as this API has changed.


469
00:23:32,606 --> 00:23:35,036
We've simplified it,
and have named it


470
00:23:35,036 --> 00:23:36,726
registerForRemoteNotifications.


471
00:23:37,056 --> 00:23:39,726
You can call that on the
UIApplication shared instance.


472
00:23:40,256 --> 00:23:43,556
Cool. So, let's get into
the last topic of today,


473
00:23:43,896 --> 00:23:45,516
location-based notifications,


474
00:23:46,336 --> 00:23:47,866
something we're very
excited about.


475
00:23:47,866 --> 00:23:50,276
We've been working with the Core
Location Team for this feature.


476
00:23:50,676 --> 00:23:51,956
Very happy to talk
about it today.


477
00:23:53,446 --> 00:23:56,256
So, let's say that
you've got an app.


478
00:23:57,166 --> 00:24:00,666
And you want to notify the
user when they happen to arrive


479
00:24:00,666 --> 00:24:02,626
at some certain geographic
location.


480
00:24:03,686 --> 00:24:06,316
So, the user is on their
device and they happen


481
00:24:06,316 --> 00:24:07,416
to wander into that area.


482
00:24:07,416 --> 00:24:09,266
And you want to show,
say, an alert.


483
00:24:10,816 --> 00:24:13,466
Well you could do this
in iOS 7 and before,


484
00:24:13,466 --> 00:24:15,386
but it required a lot
of hoops to jump through


485
00:24:16,716 --> 00:24:17,726
and also could make


486
00:24:17,726 --> 00:24:20,076
for a somewhat confusing
user experience.


487
00:24:21,306 --> 00:24:24,196
In iOS 8, however, we
have streamlined this API.


488
00:24:25,606 --> 00:24:28,256
All it is is simple
additions on top


489
00:24:28,256 --> 00:24:32,046
of the UILocalNotification
API class.


490
00:24:32,046 --> 00:24:36,696
And what you can do is define
core location region objects


491
00:24:37,826 --> 00:24:39,956
and attach them to
this notification


492
00:24:39,956 --> 00:24:42,576
so that the notification will
fire when the user happens


493
00:24:42,606 --> 00:24:45,166
to come near, enter
or exit a region.


494
00:24:46,246 --> 00:24:49,606
Now, you can make it so
that these notifications are


495
00:24:49,606 --> 00:24:51,416
presented only the
very first time


496
00:24:51,416 --> 00:24:53,186
that the user happens
to enter this region.


497
00:24:53,686 --> 00:24:55,346
Or you could have it fire always


498
00:24:55,346 --> 00:24:57,746
if that makes sense
for your app.


499
00:24:58,566 --> 00:25:01,216
And, again, since this feature
is so tightly integrated


500
00:25:01,296 --> 00:25:04,066
with core location, it
does require a little bit


501
00:25:04,066 --> 00:25:06,156
of core location
registration on your part.


502
00:25:06,776 --> 00:25:08,216
So, let's take a look at what


503
00:25:08,216 --> 00:25:10,526
that registration
code is before we get


504
00:25:10,526 --> 00:25:13,326
into how we can actually
schedule these notifications.


505
00:25:13,886 --> 00:25:15,826
So, here we are.


506
00:25:16,306 --> 00:25:21,166
What we need to do is create
a CLLocationManager instance.


507
00:25:23,416 --> 00:25:26,156
Then we just need to set the
delegate on this manager.


508
00:25:26,506 --> 00:25:30,456
The delegate is going to receive
callbacks notifying whether your


509
00:25:30,456 --> 00:25:33,536
app is allowed to or not allowed
to track the user's location.


510
00:25:34,136 --> 00:25:37,886
And then finally, in order


511
00:25:37,886 --> 00:25:40,186
to enable these location-based
notifications,


512
00:25:40,986 --> 00:25:43,236
on the location manager
instance you need


513
00:25:43,236 --> 00:25:45,556
to call
requestWhenInUseAuthorization.


514
00:25:46,806 --> 00:25:47,656
So, what does this mean?


515
00:25:48,756 --> 00:25:51,046
WhenInUseAuthorization
-essentially,


516
00:25:51,076 --> 00:25:53,776
if the user says OK,
will allow your app


517
00:25:53,776 --> 00:25:56,826
to track the user's location or
know about the user's location


518
00:25:57,156 --> 00:25:58,966
when your app is running
in the foreground.


519
00:26:00,676 --> 00:26:03,216
However, recall these
notifications are going


520
00:26:03,216 --> 00:26:06,476
to be appearing on the user's
device even if your app is


521
00:26:06,476 --> 00:26:08,006
in the background or suspended.


522
00:26:08,006 --> 00:26:10,726
And they might be able
to see these alerts.


523
00:26:11,446 --> 00:26:14,306
Well, that's OK because even
if your app has been disabled


524
00:26:14,306 --> 00:26:17,646
for core location, and even if
the user is seeing those alerts,


525
00:26:17,936 --> 00:26:19,986
your app won't be
receiving any callbacks


526
00:26:20,176 --> 00:26:22,146
until the user actually
interacts with that alert


527
00:26:22,386 --> 00:26:25,196
and your app is still allowed
to track the user's location.


528
00:26:25,756 --> 00:26:28,036
So we're requesting our
WhenInUseAuthorization


529
00:26:28,036 --> 00:26:31,666
from CLLocationManager, assuming
this is the very first time


530
00:26:31,666 --> 00:26:34,806
that your app has called
this code, the user is going


531
00:26:34,806 --> 00:26:36,496
to be presented with
a permission alert,


532
00:26:37,616 --> 00:26:39,696
just basically saying
is it OK for this app


533
00:26:39,866 --> 00:26:42,206
to track your location when
it's running in the foreground.


534
00:26:42,506 --> 00:26:45,956
Notice, however, in that alert,
we've got that usage text


535
00:26:45,956 --> 00:26:47,366
down below in the smaller font.


536
00:26:48,316 --> 00:26:51,386
This is actually something that
our app has defined on its own.


537
00:26:52,076 --> 00:26:53,006
And you need to make sure


538
00:26:53,006 --> 00:26:55,556
that your app defines
this usage text as well.


539
00:26:56,996 --> 00:27:01,076
So to do that, in
your info.plist file,


540
00:27:01,996 --> 00:27:03,226
hopefully this makes
it easier to read,


541
00:27:03,226 --> 00:27:07,416
we've got NSLocationWhenvI
nUseUsageDescription.


542
00:27:07,416 --> 00:27:09,146
You've just got to
define this key.


543
00:27:09,526 --> 00:27:10,846
The value is going
to be a string.


544
00:27:11,346 --> 00:27:13,586
And this is the actual
usage text that's going


545
00:27:13,616 --> 00:27:16,946
to appear in that alert.


546
00:27:16,946 --> 00:27:19,066
Recall, however, that
if your app is running


547
00:27:19,066 --> 00:27:21,026
in different locales
in different languages,


548
00:27:21,306 --> 00:27:23,666
you need to make sure that
this string is localized


549
00:27:23,666 --> 00:27:25,746
appropriately for all
those other languages.


550
00:27:26,386 --> 00:27:29,956
So, make sure that you
define values for this key


551
00:27:30,326 --> 00:27:32,236
in your info.plist
strings file as well.


552
00:27:32,606 --> 00:27:35,676
So, now we've asked the
user if it's OK for your app


553
00:27:35,676 --> 00:27:37,966
to track their location when
it's running in the foreground.


554
00:27:38,686 --> 00:27:40,946
Now we actually need
to handle the callback


555
00:27:40,946 --> 00:27:42,336
from CLLocationManager.


556
00:27:43,006 --> 00:27:47,326
And to do this, your
manager's delegate is going


557
00:27:47,326 --> 00:27:51,016
to receive this callback
LocationManagerDid


558
00:27:51,096 --> 00:27:52,736
hangeAuthorizationStatus.


559
00:27:52,736 --> 00:27:53,936
At that point, all you need


560
00:27:53,936 --> 00:27:58,186
to do is just make sure the
status is the When in Use status


561
00:27:58,566 --> 00:27:59,646
if you are authorized


562
00:27:59,646 --> 00:28:02,046
for tracking the user's
location when in use.


563
00:28:02,996 --> 00:28:05,736
Then at that point you
can start scheduling these


564
00:28:05,736 --> 00:28:07,336
location-based notifications.


565
00:28:08,016 --> 00:28:09,986
So, how do we actually
schedule these


566
00:28:10,046 --> 00:28:11,416
location-based notifications?


567
00:28:11,926 --> 00:28:15,186
Let's take a look
at some sample code


568
00:28:15,186 --> 00:28:18,436
of how we could schedule a
notification that triggers


569
00:28:18,436 --> 00:28:20,266
in response to the
user entering a region.


570
00:28:21,756 --> 00:28:23,176
Very first thing you need to do,


571
00:28:23,176 --> 00:28:25,686
just like any other
UI local notification


572
00:28:25,686 --> 00:28:28,616
that would otherwise be
triggered by a date or a time,


573
00:28:29,176 --> 00:28:31,906
you've first got to create an
instance of UILocalNotification


574
00:28:32,436 --> 00:28:33,636
and define what type


575
00:28:33,636 --> 00:28:35,536
of notification this
is going to be.


576
00:28:36,496 --> 00:28:38,986
In this case, we're just saying
this is going to be an alert.


577
00:28:38,986 --> 00:28:41,126
When the user happens
to enter that region,


578
00:28:41,316 --> 00:28:43,546
assuming the app isn't running
in the foreground, they're going


579
00:28:43,546 --> 00:28:45,796
to get a little popup
saying: Hey, you have arrived.


580
00:28:47,916 --> 00:28:51,856
Then, specific to region
type, core location type,


581
00:28:52,126 --> 00:28:56,816
user UI local notifications,
we're stating here


582
00:28:57,136 --> 00:28:59,476
that we only want
this notification


583
00:28:59,476 --> 00:29:02,126
to trigger the very first
time the user happens


584
00:29:02,126 --> 00:29:03,366
to enter or exit this region.


585
00:29:04,266 --> 00:29:05,886
Now this is actually
the default behavior.


586
00:29:05,886 --> 00:29:08,036
So, it's a little
bit superfluous here.


587
00:29:08,856 --> 00:29:12,156
However, you could set this
to No if that makes sense


588
00:29:12,406 --> 00:29:14,806
for your users and for your app.


589
00:29:17,236 --> 00:29:21,506
Next, you just need to create
a CL region instance and set it


590
00:29:21,506 --> 00:29:23,926
on the region property of
the UI local notification.


591
00:29:24,536 --> 00:29:27,526
So, in this case, we're defining
a CLCircularRegion here,


592
00:29:27,726 --> 00:29:29,916
and we're just giving it
some arbitrary coordinate


593
00:29:29,916 --> 00:29:32,406
with some radius so that when
the user enters this circle,


594
00:29:32,406 --> 00:29:35,696
this notification is
going to be triggered.


595
00:29:36,396 --> 00:29:39,146
However, I did say that this
is a CL region property.


596
00:29:39,306 --> 00:29:42,206
So, you could also use CL
beacon regions or any other type


597
00:29:42,206 --> 00:29:43,716
of CL region subclass.


598
00:29:43,716 --> 00:29:45,876
And if you want to find out more


599
00:29:46,176 --> 00:29:48,396
about how you can
use Core Location,


600
00:29:48,786 --> 00:29:51,906
especially in combination
with UILocalNotification,


601
00:29:52,386 --> 00:29:54,346
I've got some resources
to point you towards


602
00:29:54,346 --> 00:29:59,146
at the end of this talk.


603
00:29:59,326 --> 00:30:02,196
Finally, on your UIApplication
shared instance, you just need


604
00:30:02,196 --> 00:30:03,946
to call
scheduleLocalNotification,


605
00:30:04,306 --> 00:30:05,936
passing this notification just


606
00:30:05,936 --> 00:30:09,206
like you would any other
user-type local notification.


607
00:30:11,496 --> 00:30:14,676
So, cool. Now we've actually
got this notification scheduled.


608
00:30:15,096 --> 00:30:17,836
Assuming that your app is
running in the background


609
00:30:17,836 --> 00:30:20,546
or suspended, rather, and
the user happens to enter


610
00:30:20,546 --> 00:30:22,826
into that region, they're
going to be presented


611
00:30:22,826 --> 00:30:24,516
with an alert saying: Hey,


612
00:30:24,516 --> 00:30:25,776
you've arrived at
your destination.


613
00:30:26,516 --> 00:30:28,936
And your app can handle
that local notification


614
00:30:29,276 --> 00:30:31,586
in the applicationDidFinish
LaunchingWithOptions.


615
00:30:32,446 --> 00:30:35,566
Alternatively, if your app
is running in the foreground


616
00:30:35,566 --> 00:30:37,736
when the user happens to
enter into that region,


617
00:30:38,786 --> 00:30:40,746
your app delegate is
going to be called back


618
00:30:40,796 --> 00:30:43,336
with applicationDidReceive
LocalNotification.


619
00:30:44,726 --> 00:30:46,566
So, the two different
methods here,


620
00:30:46,566 --> 00:30:48,046
applicationDid FInishLaunching


621
00:30:48,326 --> 00:30:50,866
versus applicationDidReceive
LocalNotification,


622
00:30:50,866 --> 00:30:52,736
the logic is very, very similar.


623
00:30:53,136 --> 00:30:56,086
So let's just take a look at the
latter step, or the latter part.


624
00:30:57,256 --> 00:31:01,046
So, we've been informed that the
user has entered into a region,


625
00:31:01,616 --> 00:31:04,796
or rather that the user has
received a local notification,


626
00:31:05,106 --> 00:31:07,486
and we want to check
whether this is actually


627
00:31:07,486 --> 00:31:08,746
region-based notification.


628
00:31:09,596 --> 00:31:13,336
Well, UILocalNotification has
a region property now to see


629
00:31:13,336 --> 00:31:15,976
if that region happens
to not be nil.


630
00:31:16,566 --> 00:31:20,746
And if it isn't, we've got a
location-based notification.


631
00:31:20,746 --> 00:31:22,546
And we can do whatever
makes sense.


632
00:31:22,646 --> 00:31:24,466
Tell all the user's friends
where they've arrived.


633
00:31:26,826 --> 00:31:28,866
So, that's location-based
notifications.


634
00:31:29,306 --> 00:31:31,826
It's very, very simple
API that's added


635
00:31:31,826 --> 00:31:33,366
onto UI LocalNotification.


636
00:31:33,366 --> 00:31:36,616
And it's so simple because
we've integrated directly


637
00:31:36,616 --> 00:31:37,576
with core location.


638
00:31:38,646 --> 00:31:40,566
However, because
we've integrated this


639
00:31:40,566 --> 00:31:41,896
with Core Location,


640
00:31:42,706 --> 00:31:45,766
we do require some Core
Location registration logic.


641
00:31:46,056 --> 00:31:50,046
Now, again, this is all as well


642
00:31:50,046 --> 00:31:53,206
about keeping the user's
privacy first place in mind.


643
00:31:53,826 --> 00:31:56,526
So, if the user happens to
have ever disabled your app


644
00:31:56,526 --> 00:31:59,726
from being able to track their
location, even when your app is


645
00:31:59,726 --> 00:32:02,886
in the foreground, you're not
going to be receiving callbacks


646
00:32:02,886 --> 00:32:05,176
like applicationDidReceive
LocalNotification


647
00:32:05,486 --> 00:32:07,476
for location-based
notifications.


648
00:32:07,606 --> 00:32:11,446
The user might launch your
app in response to an alert


649
00:32:11,446 --> 00:32:14,546
that was presented as a
location-based notification.


650
00:32:14,926 --> 00:32:16,966
But still, your app
isn't going to know that.


651
00:32:17,316 --> 00:32:20,936
And that was a lot of stuff
that we talked about today.


652
00:32:21,476 --> 00:32:22,856
Biggest thing, we've
been talking


653
00:32:22,856 --> 00:32:24,566
about notification actions.


654
00:32:24,566 --> 00:32:25,586
Rhett came up here, talked


655
00:32:25,586 --> 00:32:27,676
about this great new
feature for iOS 8.


656
00:32:27,986 --> 00:32:29,756
So psyched to see
you guys use it,


657
00:32:29,756 --> 00:32:33,016
making your apps interactive,
even when they're not running


658
00:32:33,016 --> 00:32:35,886
in the foreground, in really
new and powerful ways.


659
00:32:36,906 --> 00:32:39,736
Some simple changes behind user


660
00:32:39,736 --> 00:32:41,896
and remote notification
registration.


661
00:32:42,496 --> 00:32:45,646
Again, we've separated the
concept of having to register


662
00:32:45,646 --> 00:32:47,796
for different remote
notification types


663
00:32:48,376 --> 00:32:52,026
and instead ask you to register
for the user notification types


664
00:32:52,336 --> 00:32:53,556
that your app is going to use.


665
00:32:54,556 --> 00:32:57,056
And then we had location-based
notifications,


666
00:32:57,376 --> 00:32:59,376
integrating tightly
with Core Location


667
00:32:59,746 --> 00:33:03,486
to schedule user
notifications in response


668
00:33:03,486 --> 00:33:05,346
to the user entering
or exiting regions.


669
00:33:06,106 --> 00:33:08,896
So, that was a lot of stuff.


670
00:33:08,896 --> 00:33:11,386
And we've got great resources
for you guys to check out.


671
00:33:11,936 --> 00:33:14,916
Paul Danbold, he's our Core
OS Technologies Evangelist.


672
00:33:15,106 --> 00:33:16,076
He is a great guy.


673
00:33:16,076 --> 00:33:20,496
And you can send him
letters at danbold@apple.com.


674
00:33:20,496 --> 00:33:23,706
We've also got documentation
at developer@apple.com


675
00:33:23,756 --> 00:33:24,926
as well the dev forums.


676
00:33:24,926 --> 00:33:26,306
Talk to like-minded developers.


677
00:33:26,726 --> 00:33:29,746
Find out how other people are
using these great new features.


678
00:33:30,006 --> 00:33:30,836
Ask your questions.


679
00:33:30,836 --> 00:33:31,526
Get them answered.


680
00:33:31,806 --> 00:33:35,356
But, but, but-this is WWDC.


681
00:33:35,896 --> 00:33:37,746
And we've also got
other sessions.


682
00:33:37,746 --> 00:33:39,226
Now, these sessions
happened previously.


683
00:33:39,506 --> 00:33:41,196
What's New in Core
Location as well


684
00:33:41,196 --> 00:33:43,466
as Taking Core Location
Indoors happened yesterday,


685
00:33:43,806 --> 00:33:46,496
but these are available
online as well


686
00:33:46,496 --> 00:33:47,876
as Protecting the User's Data.


687
00:33:48,076 --> 00:33:50,286
Rhett hinted at that
data class protection.


688
00:33:50,776 --> 00:33:53,336
Well, in 2012 we had a
session on these as well.


689
00:33:53,336 --> 00:33:55,956
And you can check out
these videos online, too.


690
00:33:56,866 --> 00:33:57,996
So, you guys have been great.


691
00:33:58,266 --> 00:34:00,146
Thank you so much
for coming to WWDC.


692
00:34:00,146 --> 00:34:01,976
Hope you have a great
rest of your week.


693
00:34:02,516 --> 00:34:13,219
[ Applause ]

