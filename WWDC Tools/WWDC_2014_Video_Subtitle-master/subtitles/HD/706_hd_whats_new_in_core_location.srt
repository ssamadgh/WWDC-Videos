1
00:00:11,456 --> 00:00:12,976
>> Hello and good afternoon.


2
00:00:13,516 --> 00:00:18,886
[ Applause ]


3
00:00:19,386 --> 00:00:22,256
Welcome to our session on
"What's New in Core Location".


4
00:00:22,836 --> 00:00:24,696
My name is Stephen
Rhee and I work


5
00:00:24,696 --> 00:00:25,936
on the Core Location framework.


6
00:00:26,686 --> 00:00:31,506
So Core Location is available
on both iOS and OS X,


7
00:00:32,206 --> 00:00:34,296
but today the new features
that we're going to be talking


8
00:00:34,296 --> 00:00:36,536
about today are specifically
for iOS.


9
00:00:37,586 --> 00:00:40,226
Now some of you may be
new to Core Location


10
00:00:40,626 --> 00:00:41,966
or even iOS in general.


11
00:00:43,056 --> 00:00:44,336
This will not be a review


12
00:00:44,606 --> 00:00:46,466
of existing Core
Location functionality.


13
00:00:47,046 --> 00:00:48,656
For that, we recommend
that you go


14
00:00:48,656 --> 00:00:53,146
to our past WWDC
presentations online or check


15
00:00:53,146 --> 00:00:55,826
out our great documentation
also available online.


16
00:00:56,376 --> 00:00:59,056
Also, we'll be having a
lab session this Thursday,


17
00:00:59,396 --> 00:01:01,316
so I recommend you all
come out and join us there


18
00:01:01,316 --> 00:01:04,436
with any questions that
you have for us; however,


19
00:01:04,436 --> 00:01:07,336
I think that today will
still be equally applicable


20
00:01:07,336 --> 00:01:10,146
and interesting to those
of you who are new to iOS


21
00:01:10,146 --> 00:01:12,236
and Core Location, to those


22
00:01:12,236 --> 00:01:14,276
who are seasoned app
developers familiar


23
00:01:14,276 --> 00:01:16,246
with both iOS and Core Location.


24
00:01:17,356 --> 00:01:20,186
So what's new in Core
Location and iOS 8?


25
00:01:20,716 --> 00:01:24,936
Today we're going to be talking
about location authorization,


26
00:01:25,456 --> 00:01:30,886
visit monitoring, and
finally what's new is indoor


27
00:01:30,886 --> 00:01:34,066
positioning; however, we won't
have time to talk about that


28
00:01:34,066 --> 00:01:37,176
in this session but directly
following this session here


29
00:01:37,176 --> 00:01:39,606
in Marina, there'll
be a dedicated session


30
00:01:39,606 --> 00:01:40,666
to indoor positioning,


31
00:01:40,966 --> 00:01:44,826
so I recommend you all
stick around for that.


32
00:01:45,006 --> 00:01:46,776
So before we go on,
I'd like to start


33
00:01:46,776 --> 00:01:49,836
with a brief history
of location on iOS.


34
00:01:51,056 --> 00:01:55,876
Location was first introduced
in iOS 2 and then in iOS 3,


35
00:01:55,876 --> 00:01:57,686
we added the ability
get heading updates.


36
00:01:58,986 --> 00:02:01,806
In iOS 4, with the
introduction of multitasking,


37
00:02:02,206 --> 00:02:05,036
came a whole slew of new
functionality for location,


38
00:02:05,566 --> 00:02:09,226
including continuous background
location, which allows your app


39
00:02:09,946 --> 00:02:12,856
to get continuous location
updates while in the background,


40
00:02:13,496 --> 00:02:16,076
and region monitoring,
also known as geofencing,


41
00:02:16,406 --> 00:02:18,856
which allows your app to
be launched and notified


42
00:02:19,326 --> 00:02:22,126
when the user enters or
exits a predefined region,


43
00:02:22,816 --> 00:02:25,716
to significant location changes,
which also allows your app


44
00:02:25,716 --> 00:02:27,066
to be launched and notified


45
00:02:27,376 --> 00:02:29,916
when the user's location
has changed significantly.


46
00:02:31,416 --> 00:02:34,776
In iOS 5, we introduced
new APIs for geocoding,


47
00:02:35,096 --> 00:02:36,356
both forward and reverse.


48
00:02:37,066 --> 00:02:39,636
This allows you to take a
position that is a latitude


49
00:02:39,636 --> 00:02:42,176
and longitude and
convert it to an address


50
00:02:42,176 --> 00:02:43,776
or place mark and vice versa.


51
00:02:44,436 --> 00:02:48,436
In iOS 6, we introduced
a power-efficient means


52
00:02:48,436 --> 00:02:49,716
of getting location updates,


53
00:02:50,046 --> 00:02:52,216
referred to as deferred
location updates,


54
00:02:52,766 --> 00:02:55,216
in which locations will be
batched up and delivered


55
00:02:55,216 --> 00:02:56,256
to your application


56
00:02:56,746 --> 00:03:00,006
at a app-specified time
and/or distance interval.


57
00:03:00,736 --> 00:03:05,416
And just last year in iOS 7, we
introduced iBeacon technology,


58
00:03:05,626 --> 00:03:06,886
which has really
been taking off.


59
00:03:07,496 --> 00:03:10,776
This allows you to determine
proximity via ranging


60
00:03:10,776 --> 00:03:15,146
and region monitoring APIs,
which brings us to iOS 8,


61
00:03:15,146 --> 00:03:16,726
which is what we're here
to talk about today.


62
00:03:17,436 --> 00:03:20,266
As you can see, location
functionality has been growing


63
00:03:20,366 --> 00:03:22,776
in iOS, as have the
number of apps


64
00:03:22,936 --> 00:03:24,306
that you guys have
been developing.


65
00:03:25,226 --> 00:03:30,146
In fact, there are over 680,000
apps using location on iOS.


66
00:03:31,136 --> 00:03:34,066
These are all kinds of apps
ranging from navigation


67
00:03:34,066 --> 00:03:37,936
to help users find their
way home, to travel apps,


68
00:03:38,216 --> 00:03:40,956
to help users find interesting
things to do around them,


69
00:03:41,986 --> 00:03:43,646
to fitness apps to allow users


70
00:03:43,646 --> 00:03:47,426
to track their exercise
sessions, and shopping apps


71
00:03:47,586 --> 00:03:50,146
to help users find stores
and deals around them,


72
00:03:51,296 --> 00:03:54,476
to social apps to allow users
to interact with their friends,


73
00:03:55,286 --> 00:03:58,376
and even gaming apps to
allow interesting uses


74
00:03:58,486 --> 00:03:59,376
of their location.


75
00:03:59,476 --> 00:04:05,226
So what does location look
like on the device today?


76
00:04:05,226 --> 00:04:09,086
There's a visual
indication of location


77
00:04:09,086 --> 00:04:11,876
in use via the status
bar location arrow icon.


78
00:04:12,796 --> 00:04:15,786
This can be solid, as we see
here in the example of maps,


79
00:04:16,016 --> 00:04:17,966
which is displaying the
user's current location.


80
00:04:18,716 --> 00:04:20,986
Generally, the solid arrow
indicates that location


81
00:04:21,166 --> 00:04:24,176
or ranging, or significant
location changes is in use.


82
00:04:25,146 --> 00:04:31,236
Here, even on the home screen,


83
00:04:31,546 --> 00:04:33,626
if there's an application
using location


84
00:04:33,626 --> 00:04:36,036
or significant location
changes in the background,


85
00:04:36,466 --> 00:04:37,966
the solid arrow will remain lit.


86
00:04:38,876 --> 00:04:41,416
In addition to the solid arrow,
we have the hollow arrow,


87
00:04:41,736 --> 00:04:44,306
which indicates that
region monitoring is in use.


88
00:04:44,736 --> 00:04:47,206
Here, we see a traditional
example of region monitoring,


89
00:04:47,206 --> 00:04:49,906
the Reminders app, which
uses region monitoring


90
00:04:49,906 --> 00:04:52,786
to deliver reminders
when the user has entered


91
00:04:52,786 --> 00:04:54,676
or exited a pre-defined
location.


92
00:04:55,236 --> 00:04:58,306
And again on the home screen,


93
00:04:58,586 --> 00:05:00,436
if there are still apps
using region monitoring


94
00:05:00,436 --> 00:05:02,716
in the background, the
hollow arrow will remain


95
00:05:02,716 --> 00:05:03,996
in the status bar indicating


96
00:05:03,996 --> 00:05:05,716
that region monitoring
is still in use.


97
00:05:06,266 --> 00:05:10,866
Next, the user can control
and get a finer picture


98
00:05:10,866 --> 00:05:13,906
of location usage via the
Location Services settings.


99
00:05:14,426 --> 00:05:18,216
This is the Settings app under
Privacy, Location Services.


100
00:05:19,156 --> 00:05:23,136
At the top we provide global
control of location services.


101
00:05:23,776 --> 00:05:27,336
And down below, we provide
individual per app control


102
00:05:27,336 --> 00:05:28,266
of location.


103
00:05:29,456 --> 00:05:32,366
In addition, per app,
we provide an indication


104
00:05:32,366 --> 00:05:34,316
of location usage by that app.


105
00:05:34,846 --> 00:05:37,796
This can be indicated by a
solid purple arrow indicating


106
00:05:37,796 --> 00:05:39,526
that location has
recently been used,


107
00:05:40,476 --> 00:05:44,056
to a solid gray arrow indicating
that location has been used


108
00:05:44,216 --> 00:05:49,086
within the last 24 hours, or a
hollow purple arrow indicating


109
00:05:49,086 --> 00:05:51,826
that region monitoring
is in use by the app.


110
00:05:53,656 --> 00:05:55,846
So what does authorization
look like today?


111
00:05:56,726 --> 00:05:58,646
Authorization is
a single request


112
00:05:58,916 --> 00:06:01,666
that is prompted
implicitly on first usage


113
00:06:01,666 --> 00:06:02,816
of location by your app.


114
00:06:03,526 --> 00:06:06,596
This is for all location
functionality including location


115
00:06:06,596 --> 00:06:09,266
directly in the app,
location from the background,


116
00:06:09,876 --> 00:06:11,806
location use via
region monitoring,


117
00:06:12,176 --> 00:06:13,786
and significant location
changes.


118
00:06:14,336 --> 00:06:18,656
The text is also
customizable by the app.


119
00:06:19,146 --> 00:06:22,266
Here we see a "camera would like
to use your current location"


120
00:06:22,446 --> 00:06:24,776
with a description of
why camera uses location.


121
00:06:25,866 --> 00:06:27,536
When location was
first introduced,


122
00:06:28,116 --> 00:06:30,586
the request for the user's
current location was pretty


123
00:06:30,586 --> 00:06:34,046
clear; however, with the
advent of multitasking


124
00:06:34,456 --> 00:06:37,346
and all the powerful location
functionality that we talked


125
00:06:37,346 --> 00:06:40,436
about was introduced allowing
you to create very cool


126
00:06:40,436 --> 00:06:44,066
and powerful apps, we felt that
the user could use more clarity


127
00:06:44,116 --> 00:06:46,826
of when location is being
used and more importantly,


128
00:06:46,896 --> 00:06:48,826
we felt that your apps
could benefit too.


129
00:06:49,806 --> 00:06:53,536
We don't want the user to
disable location, overall,


130
00:06:53,536 --> 00:06:56,006
either globally or for
your app, disabling some


131
00:06:56,006 --> 00:06:59,136
of the cool functionality that
you've developed using location.


132
00:06:59,726 --> 00:07:02,486
We want them to understand
exactly how location is being


133
00:07:02,486 --> 00:07:04,786
used, so ultimately
they can make better,


134
00:07:05,096 --> 00:07:07,676
more informed decisions and
we believe that this is better


135
00:07:07,676 --> 00:07:09,706
for battery and better
for privacy.


136
00:07:10,286 --> 00:07:13,406
So to that end, we're
changing the way


137
00:07:13,696 --> 00:07:17,726
that location services
works in iOS 8.


138
00:07:17,986 --> 00:07:20,766
We started by looking at
first at all the functionality


139
00:07:20,766 --> 00:07:23,826
that location services
provides and categorized it


140
00:07:23,906 --> 00:07:27,396
into continuous updates,
which includes location,


141
00:07:27,826 --> 00:07:29,936
background location,
and ranging,


142
00:07:30,806 --> 00:07:33,326
and also location
monitoring or events,


143
00:07:33,736 --> 00:07:36,926
which may launch the application
to deliver callbacks.


144
00:07:37,246 --> 00:07:38,736
This includes region monitoring


145
00:07:38,836 --> 00:07:40,456
and significant location
changes.


146
00:07:41,036 --> 00:07:44,696
And we broke it down into
two authorization types,


147
00:07:45,116 --> 00:07:46,566
the first being Always.


148
00:07:47,046 --> 00:07:50,786
This is just like what location
authorization provided in iOS 7.


149
00:07:51,126 --> 00:07:53,556
It provided both access
to continuous updates


150
00:07:53,956 --> 00:07:55,836
and location monitoring even


151
00:07:55,836 --> 00:07:57,366
when the app is in
the background.


152
00:07:58,716 --> 00:08:01,676
But then we also introduced
WhenInUse, which is only


153
00:08:01,676 --> 00:08:04,716
for continuous updates
and it's only


154
00:08:04,716 --> 00:08:07,496
when the app is clearly
in use by the user.


155
00:08:07,496 --> 00:08:11,486
So let's take a closer look
at Background Location.


156
00:08:11,936 --> 00:08:15,216
Starting with continuous
background location,


157
00:08:15,636 --> 00:08:16,896
which is specified statically


158
00:08:16,896 --> 00:08:20,346
by the app either via the
Capabilities tab in Xcode


159
00:08:20,686 --> 00:08:22,466
for background modes,
location updates


160
00:08:22,916 --> 00:08:25,816
or via your app's information
property list via the


161
00:08:25,816 --> 00:08:29,186
UIBackgroundMode key
specifying a value of location.


162
00:08:30,096 --> 00:08:33,296
This, as before, must be started
in the foreground, otherwise


163
00:08:33,466 --> 00:08:35,936
or if your app is using
significant location changes.


164
00:08:36,716 --> 00:08:37,806
And this is available


165
00:08:37,905 --> 00:08:40,676
with WhenInUse location
authorization because,


166
00:08:40,676 --> 00:08:45,246
now in iOS 8, we'll provide an
indication in the status bar


167
00:08:45,246 --> 00:08:46,966
that your app is using location.


168
00:08:48,436 --> 00:08:50,776
This is just like the
status bar for navigation,


169
00:08:51,106 --> 00:08:52,876
when navigation is
running in the background.


170
00:08:53,576 --> 00:08:56,736
Here, we'll indicate which
app is using location and,


171
00:08:56,736 --> 00:08:58,496
if there are multiple,
we'll indicate the number


172
00:08:58,496 --> 00:09:01,926
of apps using location, and the
user can tap on the status bar


173
00:09:01,926 --> 00:09:04,876
to quickly return to the most
recent app using location


174
00:09:04,876 --> 00:09:07,196
in the background.


175
00:09:07,196 --> 00:09:10,036
One note is that if the
application is authorized


176
00:09:10,036 --> 00:09:14,226
for Always location access, the
status bar will not be presented


177
00:09:14,626 --> 00:09:17,186
because the user has
granted access for that app


178
00:09:17,606 --> 00:09:21,496
to use location at any time,
which is what is needed in order


179
00:09:21,496 --> 00:09:24,066
to access location anytime
from the background.


180
00:09:24,486 --> 00:09:27,256
For example, when your app is
running in the background due


181
00:09:27,256 --> 00:09:30,966
to Background App Refresh or
due to region monitoring or due


182
00:09:30,966 --> 00:09:32,516
to significant location changes,


183
00:09:33,016 --> 00:09:35,586
this requires explicitly
Always authorization.


184
00:09:37,396 --> 00:09:38,996
So on the topic of multitasking,


185
00:09:39,286 --> 00:09:41,506
I'd like to clarify
location behavior.


186
00:09:42,336 --> 00:09:44,636
When the user quits an
app from the App switcher,


187
00:09:45,006 --> 00:09:47,666
this will immediately stop
Continuous Background Location;


188
00:09:48,316 --> 00:09:51,176
however, this will not
stop location monitoring


189
00:09:51,276 --> 00:09:54,276
such as significant location
changes or region monitoring.


190
00:09:54,776 --> 00:09:57,976
This latter point is the
behavior as of iOS 7.1.


191
00:09:59,176 --> 00:10:03,786
And now in iOS 8, disabling
Background App Refresh will no


192
00:10:03,786 --> 00:10:07,396
longer disable any location
functionality because we believe


193
00:10:07,396 --> 00:10:10,186
with the introduction of the new
location authorization types,


194
00:10:10,536 --> 00:10:13,666
the user is now in complete
control of location usage.


195
00:10:14,366 --> 00:10:16,106
So how does this all
look like to the user?


196
00:10:16,736 --> 00:10:22,196
Apps must now explicitly request
authorization via new APIs.


197
00:10:23,006 --> 00:10:24,366
We'll get into the exact details


198
00:10:24,366 --> 00:10:25,946
of what this looks
like in just a bit.


199
00:10:26,696 --> 00:10:28,606
Apps can request
for either WhenInUse


200
00:10:29,126 --> 00:10:30,686
or for Always authorization.


201
00:10:31,806 --> 00:10:32,916
Here, we see an example


202
00:10:32,916 --> 00:10:35,396
of the authorization dialogue
presented to the user.


203
00:10:35,856 --> 00:10:37,886
For compass, it says
Allow Compass


204
00:10:38,276 --> 00:10:41,126
to Access Your Location
While You Use The App.


205
00:10:41,126 --> 00:10:43,126
And below, we see
that customizable text


206
00:10:43,126 --> 00:10:45,716
that your app can provide
indicating why it is


207
00:10:45,766 --> 00:10:47,126
that your app uses location.


208
00:10:47,886 --> 00:10:50,696
This text is now mandatory
and no longer optional.


209
00:10:52,016 --> 00:10:55,256
This dialogue will be
presented only once to the user


210
00:10:55,966 --> 00:11:00,896
for either request to location
access for WhenInUse or Always.


211
00:11:00,896 --> 00:11:04,276
And as we said, that
text is customizable


212
00:11:04,276 --> 00:11:05,896
and is mandatory to provide.


213
00:11:07,016 --> 00:11:08,146
Quickly, we see an example


214
00:11:08,146 --> 00:11:09,956
of the Always authorization
dialogue,


215
00:11:10,026 --> 00:11:13,716
where it states Allow Weather
To Access Your Location Even


216
00:11:13,716 --> 00:11:15,046
When You Are Not Using The App.


217
00:11:15,566 --> 00:11:18,716
Again, the text description
below describing why it is


218
00:11:18,946 --> 00:11:21,076
that the app would like to
use the user's location.


219
00:11:23,056 --> 00:11:25,256
So as we see, this
Always authorization,


220
00:11:25,256 --> 00:11:28,076
which is what users got in
iOS 7, is pretty powerful.


221
00:11:28,556 --> 00:11:31,616
Because of this, if Always
authorization was granted


222
00:11:31,616 --> 00:11:33,746
by the user, the
user will be asked


223
00:11:33,826 --> 00:11:37,336
to confirm a few
days later and only


224
00:11:37,336 --> 00:11:40,496
if their Always authorization
was exercised, that is,


225
00:11:40,536 --> 00:11:43,436
the app did use location in
the background perhaps due


226
00:11:43,436 --> 00:11:45,956
to region monitoring or
significant location changes.


227
00:11:46,666 --> 00:11:49,216
Here we see an example of
what that dialogue looks like,


228
00:11:49,596 --> 00:11:51,906
where it says, "Weather Has
Been Using Your Location


229
00:11:51,906 --> 00:11:52,656
In The Background.


230
00:11:52,656 --> 00:11:54,956
Do You Want To Continue
Allowing This?"


231
00:11:55,536 --> 00:11:58,326
And again, we see that
the text is customizable.


232
00:11:58,326 --> 00:12:01,616
It's the same usage description
provided in the original request


233
00:12:01,616 --> 00:12:02,966
for location authorization.


234
00:12:03,516 --> 00:12:06,256
So now let's take a look


235
00:12:06,256 --> 00:12:08,196
at the new Location
Services settings pane.


236
00:12:08,926 --> 00:12:13,176
Apps can support WhenInUse
and/or Always authorization


237
00:12:13,176 --> 00:12:16,696
types and this is specified
statically by the app.


238
00:12:17,126 --> 00:12:17,986
Again, we'll see the details


239
00:12:17,986 --> 00:12:20,866
of exactly how you can
do this in just a bit.


240
00:12:21,586 --> 00:12:23,826
And now in the Settings
pane for each app next


241
00:12:23,826 --> 00:12:25,466
to the Location Usage
indication,


242
00:12:25,466 --> 00:12:28,196
it will have the text
describing exactly what


243
00:12:28,196 --> 00:12:29,636
that app is authorized for.


244
00:12:30,896 --> 00:12:33,056
In addition, the user
can tap on the app


245
00:12:33,816 --> 00:12:36,546
to see what authorization and
status types are supported


246
00:12:36,546 --> 00:12:39,586
by that app with a text
description below indicating,


247
00:12:39,586 --> 00:12:41,496
describing that current
selection.


248
00:12:42,266 --> 00:12:45,146
Here we see an example
for WhenInUse app.


249
00:12:46,106 --> 00:12:49,456
And quickly, another example
for an app that supports Always.


250
00:12:50,386 --> 00:12:55,246
Note that in this pane, we don't
show the app description of why


251
00:12:55,246 --> 00:12:59,276
that app would like to use the
location in the current seed;


252
00:12:59,616 --> 00:13:02,466
however, you, as developers,
should prepare for this


253
00:13:02,986 --> 00:13:05,386
because we believe that this
may present another great


254
00:13:05,386 --> 00:13:08,046
opportunity to inform
the user why it is


255
00:13:08,086 --> 00:13:09,426
that your app uses location.


256
00:13:12,236 --> 00:13:17,046
Now also new in iOS 8, when the
user goes to the Settings apps


257
00:13:17,376 --> 00:13:18,696
for your apps specifically,


258
00:13:19,236 --> 00:13:21,046
a link to Privacy
will be included,


259
00:13:21,046 --> 00:13:22,426
which also includes a link


260
00:13:22,426 --> 00:13:24,656
to Location Services,
if applicable.


261
00:13:25,446 --> 00:13:27,256
Here we see an example,
Fitness app.


262
00:13:27,756 --> 00:13:29,856
The app Settings pane,
we see the Privacy.


263
00:13:29,856 --> 00:13:31,916
The user can tap on that and get


264
00:13:31,916 --> 00:13:34,396
to the Location Services
pane specifically


265
00:13:34,466 --> 00:13:36,106
for its app right there


266
00:13:36,106 --> 00:13:39,046
and change the authorization
status immediately.


267
00:13:39,686 --> 00:13:41,926
Now this is going to be
even more powerful for you


268
00:13:41,926 --> 00:13:46,436
as app developers because now in
iOS 8, your app has the ability


269
00:13:46,436 --> 00:13:48,376
to programmatically
jump directly


270
00:13:48,376 --> 00:13:49,606
to your app Settings pane.


271
00:13:50,376 --> 00:13:52,796
This is done with the
existing openURL method


272
00:13:52,796 --> 00:13:56,846
on UIApplication providing
the new constant in iOS 8,


273
00:13:57,096 --> 00:14:00,136
UIApplicationOpen
SettingsURLString.


274
00:14:01,176 --> 00:14:04,486
We'll see exactly how useful
this can be later in an example.


275
00:14:05,526 --> 00:14:07,326
So you all are probably
wondering, that's looks great


276
00:14:07,326 --> 00:14:10,816
and well, so what is it that
I as a developer have to do?


277
00:14:11,226 --> 00:14:13,456
Well, starting with the
actual interface changes,


278
00:14:13,836 --> 00:14:16,156
there are only three changes
that you need to be aware of,


279
00:14:17,476 --> 00:14:20,146
the relevant Info.plist
keys that we talked about,


280
00:14:20,616 --> 00:14:22,666
the authorization
status enum values,


281
00:14:23,176 --> 00:14:26,036
and finally the new
authorization request APIs.


282
00:14:27,126 --> 00:14:28,876
So let's dive right
in, first starting


283
00:14:28,876 --> 00:14:30,216
with the Info.plist keys.


284
00:14:31,446 --> 00:14:34,446
Previously we had the
NSLocationUsageDescription,


285
00:14:34,766 --> 00:14:37,286
which was optional
and allowed you


286
00:14:37,286 --> 00:14:39,746
to customize the text
displayed to the user why it is


287
00:14:39,746 --> 00:14:41,126
that your app uses location.


288
00:14:41,806 --> 00:14:44,826
This is now deprecated and
replaced by two new keys,


289
00:14:45,306 --> 00:14:47,526
NSLocationA
lwaysUsageDescription


290
00:14:47,896 --> 00:14:50,516
and NSLocationWhen
InUseUsageDescription.


291
00:14:51,056 --> 00:14:53,476
Note again that's
specifying one or both


292
00:14:53,476 --> 00:14:54,976
of these is now mandatory,


293
00:14:55,266 --> 00:14:57,446
depending on which
authorization type it is


294
00:14:57,526 --> 00:14:59,156
that your application supports.


295
00:15:00,116 --> 00:15:02,136
The value is the
string describing


296
00:15:02,136 --> 00:15:05,726
to the user exactly why it is
that your app uses location.


297
00:15:06,446 --> 00:15:07,886
We believe that this
is really going


298
00:15:07,886 --> 00:15:11,476
to help users understand how it
is that your app uses location.


299
00:15:13,816 --> 00:15:17,186
Moving on to the
CLAuthorizationStatus enum.


300
00:15:17,946 --> 00:15:19,596
Previously there were
a number of values,


301
00:15:19,596 --> 00:15:21,996
one of which was
kCLAuthorization


302
00:15:21,996 --> 00:15:23,066
StatusAuthorized.


303
00:15:23,856 --> 00:15:27,756
Now, this is deprecated and
replaced by two new values,


304
00:15:28,546 --> 00:15:31,336
AuthorizedAlways and
AuthorizedWhenInUse,


305
00:15:31,926 --> 00:15:35,176
depending on which authorization
was requested by your app


306
00:15:35,246 --> 00:15:37,816
and which authorization
was granted by the user.


307
00:15:38,666 --> 00:15:42,326
Accessing authorization status
for your app has not changed.


308
00:15:42,696 --> 00:15:45,696
This can be done either
via the class method


309
00:15:46,016 --> 00:15:48,546
on CLLocationManager
AuthorizationStatus


310
00:15:49,146 --> 00:15:52,566
or via the delegate callback
via ChangeAuthorizationStatus


311
00:15:53,116 --> 00:15:55,906
on the CLManager
delegate; however,


312
00:15:55,906 --> 00:16:00,026
requesting authorization
has changed, which brings us


313
00:16:00,086 --> 00:16:03,826
to the third interface change,
Request Authorization APIs.


314
00:16:04,946 --> 00:16:08,186
Requesting authorization
is now explicit either


315
00:16:08,186 --> 00:16:11,086
for Always or for WhenInUse.


316
00:16:12,186 --> 00:16:15,906
Your app can make calls to
these requests APIs repeatedly;


317
00:16:16,196 --> 00:16:17,786
however, it will only prompt


318
00:16:17,786 --> 00:16:20,856
to the user the first
time and not per type.


319
00:16:21,406 --> 00:16:23,516
So if you support both
authorization types,


320
00:16:23,516 --> 00:16:25,736
you'll need to carefully
consider which you want


321
00:16:25,736 --> 00:16:26,766
to request in your app.


322
00:16:27,556 --> 00:16:29,796
We'll go further on this in
an example in just a bit.


323
00:16:30,446 --> 00:16:33,816
So putting it all together,
there are three simple steps


324
00:16:34,106 --> 00:16:36,846
to adopting the new
authorization in iOS 8.


325
00:16:37,826 --> 00:16:40,596
First, you want to decide
which authorization it is


326
00:16:40,596 --> 00:16:44,016
that your app supports by asking
yourself these two questions.


327
00:16:45,436 --> 00:16:49,346
What location functionality
does your app use and is


328
00:16:49,346 --> 00:16:50,816
that a mandatory functionality


329
00:16:50,816 --> 00:16:53,616
or a nice-to-have
functionality for your app.


330
00:16:54,006 --> 00:16:55,516
Second, you want to explain it


331
00:16:55,516 --> 00:16:58,326
to your user exactly how
your app uses location.


332
00:16:59,606 --> 00:17:01,756
And third, you want
to make the right call


333
00:17:01,756 --> 00:17:06,955
to request authorization and
you want to do it when needed.


334
00:17:07,806 --> 00:17:11,455
For example, when your app first
launches, don't make the request


335
00:17:11,576 --> 00:17:15,836
to access location because the
user won't understand why it is


336
00:17:16,066 --> 00:17:18,276
that your app is requesting
location authorization


337
00:17:18,526 --> 00:17:20,896
and they may be inclined
to just deny that.


338
00:17:21,846 --> 00:17:24,465
Instead, do it in response
to explicit user action


339
00:17:24,886 --> 00:17:27,086
so that they have
context and in addition


340
00:17:27,086 --> 00:17:28,496
to the usage description string


341
00:17:28,496 --> 00:17:30,876
that you provide why
your app uses location,


342
00:17:30,876 --> 00:17:33,626
the user can then make an
informed choice of whether


343
00:17:33,626 --> 00:17:36,006
to allow or disallow
location access to the app.


344
00:17:36,946 --> 00:17:38,216
Let's go through some examples.


345
00:17:39,216 --> 00:17:42,116
First, let's say you've
developed this great fitness app


346
00:17:42,506 --> 00:17:43,836
that tracks the user's runs.


347
00:17:44,846 --> 00:17:47,246
You want to start by first
determining how it is


348
00:17:47,246 --> 00:17:48,426
that location is used.


349
00:17:49,026 --> 00:17:51,316
Obviously, this app is
going to use location.


350
00:17:51,316 --> 00:17:55,056
In addition, it's going to use
background location in order


351
00:17:55,056 --> 00:17:57,556
that the user may Home-out
of your app and switch


352
00:17:57,556 --> 00:17:59,976
to the music app and play
their favorite tunes.


353
00:18:04,056 --> 00:18:07,906
So background location
can be enabled via Xcode


354
00:18:07,936 --> 00:18:12,306
in the Capabilities tab, making
sure that background modes is on


355
00:18:12,306 --> 00:18:15,096
and that location
updates is selected.


356
00:18:15,706 --> 00:18:18,826
Alternatively, you can edit
your information property list


357
00:18:18,826 --> 00:18:21,946
for you app specifying
the UIBackgroundModes key


358
00:18:22,116 --> 00:18:23,426
with the value of location.


359
00:18:23,886 --> 00:18:28,436
Second step is to add
the appropriate key


360
00:18:28,436 --> 00:18:30,106
to your app's information
property list.


361
00:18:30,666 --> 00:18:34,016
Here in Xcode, we'll go to the
Information Property List Editor


362
00:18:34,776 --> 00:18:36,096
and add a new key


363
00:18:36,096 --> 00:18:39,676
for NSLocationWhen
InUseUsageDescription providing


364
00:18:39,676 --> 00:18:40,786
the description to the user


365
00:18:41,076 --> 00:18:43,716
that your location is
used to track your run.


366
00:18:44,616 --> 00:18:49,706
And third, the final step is to
make the appropriate API call


367
00:18:49,706 --> 00:18:52,886
to request authorization
and do it when needed.


368
00:18:53,186 --> 00:18:55,596
So here, after creating
your locationManager setting


369
00:18:55,596 --> 00:18:57,646
to delegate and right
before making the call


370
00:18:57,646 --> 00:19:01,206
to startUpdatingLocation, all
you need to do is make the call


371
00:19:01,206 --> 00:19:03,226
to requestWhen
InUseAuthorization.


372
00:19:03,756 --> 00:19:04,626
Pretty simple, right?


373
00:19:05,826 --> 00:19:07,316
Let's move on to
another example.


374
00:19:07,856 --> 00:19:10,716
Let's say you've created this
great WelcomeHome app that's


375
00:19:10,716 --> 00:19:12,466
going to automatically
turn on the lights


376
00:19:12,566 --> 00:19:14,616
and maybe even unlock
the front door


377
00:19:14,616 --> 00:19:16,126
when the user has
arrived at home.


378
00:19:16,816 --> 00:19:18,156
Again, you'll want to start


379
00:19:18,156 --> 00:19:21,046
by determining how location
is being used by your app.


380
00:19:21,886 --> 00:19:24,646
In this case, it's using
region monitoring to detect


381
00:19:24,646 --> 00:19:26,476
when the user has
arrived at home.


382
00:19:27,706 --> 00:19:30,206
Next, you'll need to add the
appropriate usage description


383
00:19:30,206 --> 00:19:32,826
key to your app's
information property list.


384
00:19:33,406 --> 00:19:36,216
Again, you'll go to the
information property list editor


385
00:19:36,286 --> 00:19:38,376
in Xcode and this time add a key


386
00:19:38,376 --> 00:19:42,186
for NSLocationAlways
UsageDescription providing a


387
00:19:42,186 --> 00:19:44,226
description to the user
here in this example.


388
00:19:44,476 --> 00:19:47,946
Here location is used to
determine when you arrive home.


389
00:19:48,956 --> 00:19:51,736
And finally, you'll want to
make the appropriate call


390
00:19:51,736 --> 00:19:54,976
to request authorization
and again, do it as needed.


391
00:19:55,216 --> 00:19:58,656
In this case, right before
the call to start monitoring


392
00:19:58,656 --> 00:20:00,686
for region, you'll
want to add the call


393
00:20:00,686 --> 00:20:02,846
to requestAlwaysAuthorization.


394
00:20:03,616 --> 00:20:05,086
Again, pretty straightforward.


395
00:20:05,086 --> 00:20:08,796
How about if your app
actually supports both


396
00:20:08,796 --> 00:20:09,976
authorization types.


397
00:20:10,856 --> 00:20:13,956
Let's say you've developed this
great app for an amusement park.


398
00:20:14,416 --> 00:20:17,636
In the general use case, it'll
show the app's current location


399
00:20:17,716 --> 00:20:18,816
in the AmusementPark map


400
00:20:19,476 --> 00:20:21,636
but let's say you've
developed this cool feature


401
00:20:22,126 --> 00:20:24,776
that will additionally
deliver cool information


402
00:20:24,776 --> 00:20:26,796
about nearby attractions
to the user.


403
00:20:27,206 --> 00:20:30,546
And in this case, you'll want
to determine exactly how it is


404
00:20:30,546 --> 00:20:32,016
that your app is using location.


405
00:20:32,876 --> 00:20:35,086
Obviously, for the general
use case displaying the user's


406
00:20:35,086 --> 00:20:37,116
location on the map,
you're using location.


407
00:20:37,616 --> 00:20:39,446
But for that cool
feature that tells them


408
00:20:39,446 --> 00:20:41,676
about cool attractions
nearby, you're going


409
00:20:41,676 --> 00:20:43,036
to be using region monitoring.


410
00:20:44,806 --> 00:20:46,866
So again, we follow
the same steps.


411
00:20:47,296 --> 00:20:49,616
First, we're going to add the
appropriate usage description


412
00:20:49,616 --> 00:20:53,586
keys to the app's information
property list again by going


413
00:20:53,586 --> 00:20:55,556
to the property list
editor in Xcode.


414
00:20:56,346 --> 00:20:58,056
We'll first start
by adding a key


415
00:20:58,056 --> 00:21:01,596
for NSLocationWhen
InUseUsageDescription specifying


416
00:21:01,596 --> 00:21:04,876
that your current location
may be shown on the map.


417
00:21:06,406 --> 00:21:10,046
In addition to that, because
your app also supports Always


418
00:21:10,046 --> 00:21:11,836
authorization, you'll add a key


419
00:21:11,836 --> 00:21:14,436
to NSLocation
AlwaysUsageDescription,


420
00:21:14,876 --> 00:21:17,166
again providing a
description to why it is


421
00:21:17,166 --> 00:21:18,646
that your app uses location.


422
00:21:18,976 --> 00:21:22,016
Here, this app will use
your location information


423
00:21:22,236 --> 00:21:24,226
to identify nearby attractions.


424
00:21:26,006 --> 00:21:28,686
So in your app's
information property list,


425
00:21:28,996 --> 00:21:31,666
you'll actually have both of
these usage description keys


426
00:21:31,666 --> 00:21:34,646
because your app supports both
of these authorization types.


427
00:21:35,436 --> 00:21:38,756
And finally, you'll want to make
the corresponding authorization


428
00:21:38,756 --> 00:21:40,006
request API calls.


429
00:21:40,436 --> 00:21:42,456
Again, you'll want to
do this when needed.


430
00:21:42,846 --> 00:21:44,536
For example, in the map view


431
00:21:44,536 --> 00:21:46,126
that displays the
AmusementPark map,


432
00:21:46,876 --> 00:21:50,566
you'll want to right before
startUpdatingLocation,


433
00:21:50,956 --> 00:21:54,616
you'll make the call to
requestWhenInUseAuthorization.


434
00:21:55,736 --> 00:21:59,736
And for that power user
use case, still in response


435
00:21:59,796 --> 00:22:04,406
to user action, perhaps the
user has now enabled the feature


436
00:22:04,796 --> 00:22:07,926
that enables the automatic
attraction info mode


437
00:22:08,426 --> 00:22:11,846
that delivers information
about ride times


438
00:22:12,226 --> 00:22:15,076
for the nearby attractions
or store sales


439
00:22:15,346 --> 00:22:18,786
or restaurant specials, but
in this case, you may want


440
00:22:18,786 --> 00:22:21,376
to check your app's
authorization status first


441
00:22:21,886 --> 00:22:24,286
because if it's denied
or when in use,


442
00:22:24,786 --> 00:22:26,666
you'll need to tell
the user that they need


443
00:22:26,666 --> 00:22:29,256
to authorize your app
for Always authorization.


444
00:22:30,236 --> 00:22:33,706
And in this case, you may want
to present an alert indicating


445
00:22:33,706 --> 00:22:36,876
that and offer to take them
directly to the Settings app


446
00:22:37,406 --> 00:22:40,056
for your app's settings
pane using


447
00:22:40,226 --> 00:22:42,506
that mentioned openUrl method


448
00:22:42,776 --> 00:22:45,556
with the new UIApplicationOpen
SettingsURLString.


449
00:22:46,016 --> 00:22:49,616
And then finally, right
before you start to call


450
00:22:49,616 --> 00:22:50,866
to start monitoring for region,


451
00:22:51,246 --> 00:22:53,906
you'll make the call the
requestAlwaysAuthorization.


452
00:22:54,456 --> 00:22:59,796
So some additional
details, what if you want


453
00:22:59,796 --> 00:23:04,966
to support both iOS 7
and iOS 8 with your app.


454
00:23:05,226 --> 00:23:07,046
Well there are three things
that you want to consider,


455
00:23:07,466 --> 00:23:09,356
the lineup with the three
interface changes we


456
00:23:09,356 --> 00:23:10,506
discussed earlier.


457
00:23:11,046 --> 00:23:12,446
First, you'll want to continue


458
00:23:12,446 --> 00:23:15,376
to provide the deprecated
NSLocationUsageDescription


459
00:23:15,376 --> 00:23:17,406
string if you were
doing so before.


460
00:23:17,766 --> 00:23:20,336
In addition, to specify
one or both


461
00:23:20,336 --> 00:23:23,616
of the new Always
usage description


462
00:23:23,616 --> 00:23:25,536
or WhenInUse usage
description keys.


463
00:23:26,806 --> 00:23:30,226
Next, you'll want to guard the
request authorization API call


464
00:23:30,226 --> 00:23:33,356
with respondsToSelector so
that your app will still work


465
00:23:33,356 --> 00:23:34,276
on iOS 7.


466
00:23:34,996 --> 00:23:37,156
Here's a quick example of
exactly how to do that.


467
00:23:37,156 --> 00:23:41,756
And third, you'll
want to continue


468
00:23:41,756 --> 00:23:45,926
to use the deprecated
kCLAuthorizationStatusAuthorize


469
00:23:45,926 --> 00:23:48,766
value in addition to
the new authorize Always


470
00:23:48,766 --> 00:23:50,576
and authorize WhenInUse values.


471
00:23:52,796 --> 00:23:55,846
So I bet you're wondering,
what about legacy app support,


472
00:23:56,216 --> 00:23:57,626
what if you don't
update your app


473
00:23:58,036 --> 00:24:00,946
but your user upgrades
his system to iOS 8,


474
00:24:01,086 --> 00:24:01,946
what's going to happen?


475
00:24:02,556 --> 00:24:04,616
Well, your app will
still continue to work


476
00:24:05,436 --> 00:24:08,656
but it will use Always
authorization.


477
00:24:09,396 --> 00:24:10,896
So you don't want
to rely on this


478
00:24:11,626 --> 00:24:14,276
because when the user uses
your app and uses location


479
00:24:14,276 --> 00:24:17,196
for the first time, it's going
to pop that dialogue asking


480
00:24:17,196 --> 00:24:19,866
for location access Always even


481
00:24:19,866 --> 00:24:23,156
if your app only uses WhenInUse
location functionality,


482
00:24:23,436 --> 00:24:27,326
such as location in the app or
background location or ranging.


483
00:24:28,416 --> 00:24:30,376
So your user may at
that point decide


484
00:24:30,376 --> 00:24:32,016
to disallow location usage.


485
00:24:32,596 --> 00:24:33,956
So you don't want
this to happen.


486
00:24:34,016 --> 00:24:35,436
You want to update your app now


487
00:24:35,846 --> 00:24:39,806
and you saw exactly how
simple it is to do so.


488
00:24:39,806 --> 00:24:41,096
So what about updating your app?


489
00:24:41,706 --> 00:24:44,496
You can change the supported
authorization types anytime you


490
00:24:44,496 --> 00:24:49,616
update your app and so when
your user updates the version


491
00:24:49,616 --> 00:24:53,196
of the app, the version of your
app on his phone or device,


492
00:24:53,856 --> 00:24:56,916
it will preserve the
user's authorization


493
00:24:57,186 --> 00:24:58,096
if still supported.


494
00:24:58,926 --> 00:25:03,296
Otherwise, it will go
from Always to WhenInUse.


495
00:25:03,476 --> 00:25:06,176
For example, if your app
no longer supports Always


496
00:25:06,176 --> 00:25:10,126
authorization but now
supports WhenInUse and it'll go


497
00:25:10,126 --> 00:25:11,936
from WhenInUse to prompt again.


498
00:25:12,286 --> 00:25:14,716
For example, again if your app
no longer supports WhenInUse


499
00:25:14,716 --> 00:25:17,616
in this case and may now
support Always authorization.


500
00:25:18,256 --> 00:25:21,376
But again, don't wait to adopt


501
00:25:21,376 --> 00:25:24,066
because if the user denies
location access to your app,


502
00:25:24,066 --> 00:25:27,996
it will stay denied even if you
subsequently change your app


503
00:25:28,246 --> 00:25:31,466
to support the WhenInUse
authorization type.


504
00:25:33,976 --> 00:25:36,936
So what about other frameworks
where location is used?


505
00:25:37,406 --> 00:25:40,706
Let's go back to the
example WelcomeHome app.


506
00:25:41,286 --> 00:25:44,336
Let's say that you don't want
your app to automatically turn


507
00:25:44,336 --> 00:25:47,296
on the lights or even more
dangerously unlock the front


508
00:25:47,296 --> 00:25:48,306
door automatically.


509
00:25:48,676 --> 00:25:51,226
Instead, all you want
to do is notify the user


510
00:25:51,686 --> 00:25:53,426
and let them decide to choose


511
00:25:53,426 --> 00:25:55,486
to take action on
that notification.


512
00:25:56,386 --> 00:25:59,076
In this case, your app actually
doesn't need to be launched,


513
00:25:59,496 --> 00:26:03,696
just a notification needs to
be provided and now in iOS 8,


514
00:26:04,026 --> 00:26:05,756
we've added region-based
triggering


515
00:26:05,816 --> 00:26:10,026
to UILocalNotification
via the specification


516
00:26:10,026 --> 00:26:12,916
of the CLRegion property
on the UILocalNotification.


517
00:26:13,586 --> 00:26:16,936
In this case, your app doesn't
need Always authorization


518
00:26:16,936 --> 00:26:18,496
because your app
will not be launched


519
00:26:18,576 --> 00:26:19,906
in response to region
monitoring.


520
00:26:20,256 --> 00:26:22,466
Instead, the system will
provide the notification


521
00:26:22,466 --> 00:26:26,376
that you specified to be
provided to the user on behalf


522
00:26:26,806 --> 00:26:29,896
and only when the user decides
to respond to that notification


523
00:26:30,336 --> 00:26:33,756
and launch your app will
your app actually be in use.


524
00:26:34,626 --> 00:26:38,436
So usage of this API requires
either authorization Always


525
00:26:38,436 --> 00:26:41,886
or WhenInUse but only needs
your app to be supported


526
00:26:41,886 --> 00:26:43,366
for WhenInUse authorization.


527
00:26:43,916 --> 00:26:46,336
And the steps to use
this API are the same


528
00:26:46,336 --> 00:26:48,036
as any other location
functionality.


529
00:26:48,526 --> 00:26:52,016
You'll want to specify the
desired usage description key


530
00:26:52,016 --> 00:26:55,286
in your Info.plist with the text
string describing how it is your


531
00:26:55,286 --> 00:26:58,966
app uses location and call the
corresponding authorization


532
00:26:58,966 --> 00:27:03,086
request API, as needed.


533
00:27:03,226 --> 00:27:07,096
What if you use MKMapView on
your app to display a map view


534
00:27:07,546 --> 00:27:11,606
with the user's current location
via the showsUserLocation


535
00:27:11,796 --> 00:27:14,766
property on the MKMapView class.


536
00:27:16,006 --> 00:27:19,946
Again, this requires either
authorization for your app


537
00:27:19,946 --> 00:27:23,236
but only needs your
app to be authorized


538
00:27:23,236 --> 00:27:24,846
for WhenInUse authorization.


539
00:27:25,726 --> 00:27:28,886
And the same steps as
before, you need to specify


540
00:27:29,606 --> 00:27:31,586
which authorization
your app supports


541
00:27:31,976 --> 00:27:34,146
in your app's information
property list


542
00:27:34,826 --> 00:27:36,666
and make the corresponding
API call


543
00:27:36,666 --> 00:27:39,096
to request authorization
when needed.


544
00:27:40,506 --> 00:27:42,696
One last one I'd like to
talk about, web views.


545
00:27:43,636 --> 00:27:47,516
To allow web content that
uses HTML5 geolocation


546
00:27:47,896 --> 00:27:49,856
to access the user's
current location,


547
00:27:51,116 --> 00:27:53,596
this one also requires
either authorization


548
00:27:54,076 --> 00:27:56,926
but again only needs the
WhenInUse authorization.


549
00:27:58,256 --> 00:28:01,376
Again, you'll specify in your
app's information property list


550
00:28:01,866 --> 00:28:03,406
the usage description
keys relevant


551
00:28:03,726 --> 00:28:05,986
with a text description why
it is that your app would


552
00:28:05,986 --> 00:28:09,846
like to use the user's
location; however, in this case,


553
00:28:10,206 --> 00:28:12,736
the authorization request
will be made automatically


554
00:28:12,736 --> 00:28:16,006
for WhenInUse on your behalf
because you may not know


555
00:28:16,006 --> 00:28:19,976
when the user navigates to a
web page that uses geolocation;


556
00:28:20,836 --> 00:28:24,646
however, if your app uses
Always authorization,


557
00:28:25,226 --> 00:28:27,416
you'll want to make that
authorization request


558
00:28:27,566 --> 00:28:29,286
in advance, if so desired.


559
00:28:29,846 --> 00:28:35,916
So a quick recap, get ready


560
00:28:35,916 --> 00:28:38,866
for the location authorization
changes that are coming in iOS 8


561
00:28:39,236 --> 00:28:41,386
by following these
three simple steps.


562
00:28:41,796 --> 00:28:45,006
First, think about how
your app uses location.


563
00:28:45,616 --> 00:28:47,896
Second, explain it your users.


564
00:28:48,816 --> 00:28:53,486
And third and finally, make the
call to request authorization.


565
00:28:54,506 --> 00:28:55,086
Don't wait.


566
00:28:55,466 --> 00:28:56,186
Do it today.


567
00:28:56,186 --> 00:28:59,526
And then if you have any
questions, on Thursday,


568
00:28:59,526 --> 00:29:02,276
you can come to us in our lab
session here this week at WWDC


569
00:29:02,276 --> 00:29:05,096
with any issues or
questions that you encounter.


570
00:29:06,336 --> 00:29:09,146
Next, I'd like to introduce
Brad, who's here to talk


571
00:29:09,146 --> 00:29:10,816
about Visit Monitoring.


572
00:29:11,346 --> 00:29:11,996
>> Thanks Stephen.


573
00:29:12,666 --> 00:29:13,656
I'm Brad Jensen.


574
00:29:13,656 --> 00:29:16,356
I'm a Core Location engineer
and I'm excited to introduce


575
00:29:16,356 --> 00:29:17,936
to you Visit Monitoring.


576
00:29:18,596 --> 00:29:21,506
But first, I want to
write an app with you.


577
00:29:22,096 --> 00:29:24,926
See, Apple engineers aren't
allowed to publish apps


578
00:29:24,926 --> 00:29:27,196
and I really want a journaling
app, so you're going to have


579
00:29:27,196 --> 00:29:28,606
to help me out with this.


580
00:29:28,606 --> 00:29:30,906
Journaling apps are
really interesting to me


581
00:29:30,906 --> 00:29:34,416
but more importantly,
they're a great example


582
00:29:34,416 --> 00:29:35,436
of Visit Monitoring.


583
00:29:35,776 --> 00:29:38,506
It's a great type of
app that makes use


584
00:29:38,506 --> 00:29:39,506
of this new technology.


585
00:29:39,936 --> 00:29:42,316
So, what constitutes
a journaling app?


586
00:29:42,986 --> 00:29:46,856
Well, first and foremost, it's
got to provide the user a list


587
00:29:46,856 --> 00:29:49,136
of locations of where
they've been during their day.


588
00:29:50,336 --> 00:29:53,486
But more importantly, that
list of locations needs


589
00:29:53,486 --> 00:29:54,606
to be relevant to them.


590
00:29:55,086 --> 00:29:57,576
If we list every time they
stopped at a interaction


591
00:29:57,576 --> 00:29:59,226
or a stop sign, then
they're not going to find


592
00:29:59,226 --> 00:29:59,976
that list especially useful.


593
00:30:00,186 --> 00:30:03,946
Finally, we want to make sure


594
00:30:03,986 --> 00:30:06,806
that our journaling
app can last all day.


595
00:30:06,806 --> 00:30:09,126
If it's going to drain
the user's battery in two


596
00:30:09,126 --> 00:30:11,406
to three hours, it's not
going to be very useful.


597
00:30:12,856 --> 00:30:15,296
So, let's take a look at the
different Core Location APIs


598
00:30:15,296 --> 00:30:17,826
that exist today and
we'll see why none


599
00:30:17,826 --> 00:30:19,656
of them really work well
for journaling apps.


600
00:30:20,206 --> 00:30:21,696
If you're working
on a check-in app,


601
00:30:21,836 --> 00:30:23,486
you might find this
awfully familiar.


602
00:30:25,436 --> 00:30:27,806
First up is the standard
location service.


603
00:30:28,076 --> 00:30:29,536
This is where we
provide your app


604
00:30:29,536 --> 00:30:32,316
with periodic location updates
as they become available.


605
00:30:33,456 --> 00:30:35,906
Naturally, if we're going to be
providing updates to your app,


606
00:30:35,906 --> 00:30:39,976
this requires the phone to be
awake and even more importantly,


607
00:30:39,976 --> 00:30:41,956
the radios have to stay awake.


608
00:30:42,256 --> 00:30:45,066
We have to periodically
scan for Wi-Fi networks,


609
00:30:45,606 --> 00:30:48,706
for cell towers or GPS.


610
00:30:50,336 --> 00:30:53,766
Now, all of this is fairly
expensive and that means


611
00:30:53,826 --> 00:30:58,166
that the app is going to be
consuming a lot of power.


612
00:30:58,366 --> 00:31:00,006
In addition, the app is going


613
00:31:00,006 --> 00:31:02,026
to receive a lot
of irrelevant data.


614
00:31:02,706 --> 00:31:04,986
You're going to have to take
the stream of locations and try


615
00:31:04,986 --> 00:31:07,716
and make sense of it, try
and identify those locations


616
00:31:07,716 --> 00:31:09,526
that are probably
significant to the user.


617
00:31:11,206 --> 00:31:14,236
So this isn't really a good
fit for a journaling app,


618
00:31:14,526 --> 00:31:17,366
but if we were instead
writing a navigation app,


619
00:31:17,876 --> 00:31:19,136
this would make a lot of sense.


620
00:31:19,426 --> 00:31:22,416
You need the most up-to-date
information available in order


621
00:31:22,416 --> 00:31:25,466
to tell the user when
to make their next move.


622
00:31:26,296 --> 00:31:29,446
Before we totally throw out
standard location service


623
00:31:29,506 --> 00:31:32,026
for journaling apps,
there are a couple


624
00:31:32,026 --> 00:31:33,396
of improvements we
might consider.


625
00:31:34,416 --> 00:31:36,946
A while ago we introduced
the automatic pause feature.


626
00:31:37,456 --> 00:31:39,936
This allows Core
Location to save power


627
00:31:39,936 --> 00:31:44,186
by pausing location
updates once it's determined


628
00:31:44,186 --> 00:31:46,366
that the device probably
isn't in motion anymore.


629
00:31:47,536 --> 00:31:49,996
This is really exciting
because it means,


630
00:31:50,066 --> 00:31:51,326
well, we get to save power.


631
00:31:51,326 --> 00:31:53,616
The device gets to
keep journaling longer.


632
00:31:54,126 --> 00:31:56,926
Unfortunately, once the
user starts moving again,


633
00:31:56,926 --> 00:31:59,276
your app will have to resume
those location updates.


634
00:32:02,456 --> 00:32:05,776
And so we won't actually help


635
00:32:05,776 --> 00:32:08,666
or this won't actually save
standard location service


636
00:32:08,666 --> 00:32:10,076
in terms of writing
journaling apps.


637
00:32:10,376 --> 00:32:13,286
If we were writing that
navigation app, however,


638
00:32:13,286 --> 00:32:14,566
this would be a huge win.


639
00:32:15,056 --> 00:32:17,016
Once the user stops
at a gas station,


640
00:32:17,626 --> 00:32:19,886
automatic pause will save
their phone's battery.


641
00:32:21,216 --> 00:32:24,156
Another option we might consider
is deferred location updates.


642
00:32:25,076 --> 00:32:26,706
This one is really
interesting as well.


643
00:32:27,116 --> 00:32:28,956
It allows Core Location
to save power


644
00:32:28,956 --> 00:32:30,756
by waking up your app less.


645
00:32:31,626 --> 00:32:33,046
App wake-ups cost power


646
00:32:33,046 --> 00:32:36,496
and so fewer app launches
means more power saved.


647
00:32:37,526 --> 00:32:40,866
Unfortunately, generating
locations is still quite


648
00:32:40,866 --> 00:32:43,066
expensive and so even
though we're saving power


649
00:32:43,066 --> 00:32:45,676
by not launching your app
every time there's new data,


650
00:32:45,996 --> 00:32:48,166
we're still generating
all those locations


651
00:32:48,526 --> 00:32:51,166
and not especially great.


652
00:32:51,836 --> 00:32:56,016
So, deferred location updates
aren't exactly what we want;


653
00:32:56,706 --> 00:32:59,996
however, if we were
writing a fitness app,


654
00:33:00,616 --> 00:33:01,396
they would be great.


655
00:33:02,046 --> 00:33:04,556
If you're writing
a run tracker app,


656
00:33:04,556 --> 00:33:06,856
you don't necessarily
need the latest location


657
00:33:06,856 --> 00:33:07,846
in the moment that's available.


658
00:33:08,236 --> 00:33:10,816
It might be okay to
receive it every mile


659
00:33:10,816 --> 00:33:12,916
or every 15 minutes or so.


660
00:33:13,766 --> 00:33:16,316
All right, what else
do we have for us?


661
00:33:16,856 --> 00:33:18,186
Well, there's the standard


662
00:33:18,186 --> 00:33:20,056
or the significant
location change API.


663
00:33:21,366 --> 00:33:23,326
This one is a lot
more power efficient


664
00:33:23,326 --> 00:33:24,836
than continuous location
updates,


665
00:33:25,316 --> 00:33:26,566
but there's a cost to this.


666
00:33:27,196 --> 00:33:31,676
Instead of getting all of the
data, you get very coarse tracks


667
00:33:31,676 --> 00:33:32,756
of where the user went.


668
00:33:33,126 --> 00:33:36,136
Specifically, you only get
location updates every few


669
00:33:36,136 --> 00:33:38,236
hundred meters the device moves.


670
00:33:39,236 --> 00:33:41,386
This is going to make it
incredibly difficult for us


671
00:33:41,386 --> 00:33:43,926
to identify places that
the user stopped at since


672
00:33:43,926 --> 00:33:48,006
when the user stops, we stop
giving updates to your app.


673
00:33:48,766 --> 00:33:51,556
If we were writing a
different app, for example one


674
00:33:51,556 --> 00:33:54,026
that showed the user
the path they took home,


675
00:33:54,026 --> 00:33:56,776
maybe identifies the
freeways they drove on,


676
00:33:57,176 --> 00:33:59,596
then significant location
changes would make a lot


677
00:33:59,596 --> 00:33:59,936
of sense.


678
00:34:00,786 --> 00:34:03,046
But we're working on a
journaling app today,


679
00:34:03,506 --> 00:34:04,606
so we're going to
have to keep looking.


680
00:34:06,056 --> 00:34:08,146
Our last option is
region monitoring.


681
00:34:08,706 --> 00:34:10,906
Region monitoring is really cool


682
00:34:10,906 --> 00:34:13,056
because it's highly
power efficient.


683
00:34:13,525 --> 00:34:16,436
Region monitoring can continue
while the phone is asleep


684
00:34:17,275 --> 00:34:19,485
and your app only
receives information


685
00:34:19,485 --> 00:34:20,866
that is directly relevant to it.


686
00:34:21,775 --> 00:34:24,436
Unfortunately, you
have to specify


687
00:34:24,436 --> 00:34:26,196
which locations are
interesting to your app


688
00:34:26,196 --> 00:34:30,005
and that won't exactly work for
our use case because we want


689
00:34:30,005 --> 00:34:30,835
to know about all


690
00:34:30,835 --> 00:34:33,196
of the interesting
locations the user might go to


691
00:34:33,536 --> 00:34:35,716
and there are far too
many interesting places


692
00:34:35,716 --> 00:34:36,916
to monitor for them all.


693
00:34:37,485 --> 00:34:41,386
So, that's all that
Core Location has today.


694
00:34:41,456 --> 00:34:43,886
Do we give up, I have to
give up on my dream app?


695
00:34:44,536 --> 00:34:46,255
Not yet. There's another one.


696
00:34:46,516 --> 00:34:49,315
We're introducing
today Visit Monitoring.


697
00:34:50,235 --> 00:34:51,886
What makes Visit
Monitoring different


698
00:34:51,926 --> 00:34:53,926
from the other Core
Location APIs is


699
00:34:53,926 --> 00:34:56,326
that it monitors
for destinations.


700
00:34:57,186 --> 00:34:59,206
So instead of giving
you information


701
00:34:59,256 --> 00:35:02,286
about how the user
got from A to B,


702
00:35:02,286 --> 00:35:05,036
it gives you information
about A and B.


703
00:35:06,876 --> 00:35:09,176
It will launch your
app when it detects


704
00:35:09,176 --> 00:35:11,426
that the user has departed
from a location or arrived


705
00:35:11,426 --> 00:35:14,406
at a new one and so
naturally this will require


706
00:35:14,406 --> 00:35:15,456
Always authorization.


707
00:35:15,956 --> 00:35:22,156
Visit Monitoring is
incredibly power efficient.


708
00:35:22,566 --> 00:35:25,156
We employ all sorts of neat
tricks behind the scenes


709
00:35:25,156 --> 00:35:25,876
to ensure this.


710
00:35:26,226 --> 00:35:28,616
For example, while
the device is asleep,


711
00:35:28,616 --> 00:35:30,676
it periodically performs
Wi-Fi scans.


712
00:35:31,716 --> 00:35:34,646
If Visit Monitoring is active,
we're able to harvest all


713
00:35:34,646 --> 00:35:36,996
of those scans that would
otherwise have not generated


714
00:35:36,996 --> 00:35:39,646
locations and use them to
enhance our visit detection.


715
00:35:40,156 --> 00:35:44,056
Visit Monitoring is
also opportunistic.


716
00:35:44,686 --> 00:35:47,956
So, if your app is using Visit
Monitoring and the user pulls


717
00:35:47,956 --> 00:35:51,156
out apps and starts
navigating, all of the locations


718
00:35:51,156 --> 00:35:54,696
that maps requests are fed into
the visit detection algorithm


719
00:35:54,746 --> 00:35:58,046
and so your app benefits from
other apps' use of location.


720
00:35:59,756 --> 00:36:04,186
Finally, it utilizes information
from across the entire system.


721
00:36:04,676 --> 00:36:08,206
For example, suppose the
user arrives home and plugs


722
00:36:08,206 --> 00:36:09,646
in their phone to
start charging.


723
00:36:10,406 --> 00:36:12,826
It's much more likely that
the user would consider this


724
00:36:12,826 --> 00:36:15,216
location where they started
charging to be an important part


725
00:36:15,216 --> 00:36:17,956
of their day and so
we'll use that as a hint


726
00:36:18,206 --> 00:36:19,906
that the user has just
arrived somewhere.


727
00:36:20,726 --> 00:36:23,266
When we see hints, we'll
trigger arrival events much


728
00:36:23,266 --> 00:36:23,926
more readily.


729
00:36:24,376 --> 00:36:26,846
Finally, I'd like to point


730
00:36:26,846 --> 00:36:30,476
out that Visit Monitoring
is not tied to landmarks.


731
00:36:30,886 --> 00:36:34,476
I mean, when you receive
information about a location,


732
00:36:34,896 --> 00:36:37,386
it's not necessarily an
intrinsically interesting


733
00:36:37,386 --> 00:36:40,796
location, it's just a
location which is interesting


734
00:36:40,796 --> 00:36:44,376
because the user has spent time
there or we've seen some hints


735
00:36:44,556 --> 00:36:46,856
which indicate the user
might think it's interesting.


736
00:36:46,856 --> 00:36:52,016
So, let's look at what
a visit actually is.


737
00:36:52,946 --> 00:36:56,576
Suppose your user has
turned on Visit Monitoring


738
00:36:56,576 --> 00:36:59,226
through your app and they
decide they want to go get a cup


739
00:36:59,226 --> 00:37:01,146
of coffee, so they start walking


740
00:37:01,146 --> 00:37:02,766
from their home to
the coffee shop.


741
00:37:03,696 --> 00:37:06,516
At some point, Core Location
will get its first location


742
00:37:06,936 --> 00:37:08,486
of the user at the coffee shop.


743
00:37:08,486 --> 00:37:11,276
I don't know about you
but I can't see the future


744
00:37:11,696 --> 00:37:13,726
and so Core Location
is going to have


745
00:37:13,776 --> 00:37:15,466
to wait a little while
before it can say


746
00:37:15,466 --> 00:37:17,876
for sure whether the user is
passing by the coffee shop


747
00:37:18,166 --> 00:37:20,286
or whether they're there
to say for some time.


748
00:37:21,096 --> 00:37:24,306
After we get a little bit more
data, it becomes clear that yes,


749
00:37:24,666 --> 00:37:27,276
the user intends to stay
at the coffee for a while,


750
00:37:27,566 --> 00:37:29,356
maybe it's time to
notify some apps.


751
00:37:29,756 --> 00:37:32,446
At this point, Core
Location will launch your app


752
00:37:32,446 --> 00:37:34,406
and provide it some
information about the arrival.


753
00:37:35,266 --> 00:37:37,346
Most importantly, however,
it will do its best


754
00:37:37,346 --> 00:37:39,126
to estimate the true
arrival time


755
00:37:39,126 --> 00:37:40,966
of the user at the location.


756
00:37:42,076 --> 00:37:43,396
Departures work similarly.


757
00:37:44,096 --> 00:37:47,096
After some amount of time,
we'll get our last location


758
00:37:47,686 --> 00:37:51,986
of the user at the coffee shop,
but Core Location will wait


759
00:37:51,986 --> 00:37:54,176
until it gets a little bit
more data until it's sure


760
00:37:54,176 --> 00:37:55,216
that the user has left.


761
00:37:55,756 --> 00:37:58,266
At that point, we will
wake your app again


762
00:37:58,536 --> 00:38:01,366
and we'll provide a departure
notification, doing our best


763
00:38:01,366 --> 00:38:04,326
to estimate the true time when
the user left the location.


764
00:38:04,556 --> 00:38:08,316
So, let's take a
look at the API.


765
00:38:09,336 --> 00:38:11,616
We've added two new methods
to the locationManager,


766
00:38:12,076 --> 00:38:14,456
specifically
startMonitoringVisits


767
00:38:14,736 --> 00:38:16,346
and stopMonitoringVisits.


768
00:38:16,836 --> 00:38:18,836
When we have information
to deliver to your app,


769
00:38:19,136 --> 00:38:20,466
we'll do it through
the new delegate


770
00:38:20,466 --> 00:38:22,766
method locationManagerdidVisit.


771
00:38:23,576 --> 00:38:25,916
Some of you may have
noticed there's a new class


772
00:38:25,916 --> 00:38:28,586
in that method's signature,
specifically CLVisit,


773
00:38:28,746 --> 00:38:29,756
so let's take a look at that.


774
00:38:31,046 --> 00:38:32,666
CLVisit is a fairly
simple class.


775
00:38:32,956 --> 00:38:34,056
It's got four properties.


776
00:38:34,546 --> 00:38:37,286
The first two are
arrivalDate and departureDate;


777
00:38:38,076 --> 00:38:39,736
these describe when
the user arrived


778
00:38:39,736 --> 00:38:41,376
and departed, respectively.


779
00:38:42,726 --> 00:38:45,936
The coordinate, which represents
the place the user was visiting,


780
00:38:46,136 --> 00:38:51,006
and horizontal accuracy, which
is an estimate of the error


781
00:38:51,006 --> 00:38:53,246
on the location,
on the coordinate.


782
00:38:53,746 --> 00:38:57,626
A few things you might want to
know about Visit Monitoring.


783
00:38:58,176 --> 00:39:01,466
The values of horizontal
accuracy


784
00:39:01,466 --> 00:39:03,976
and coordinate may differ
between an arrival event


785
00:39:03,976 --> 00:39:05,146
and a departure event.


786
00:39:05,676 --> 00:39:06,996
This shouldn't be
too surprising.


787
00:39:07,236 --> 00:39:09,566
These are estimates based
on the data we have seen


788
00:39:09,756 --> 00:39:11,446
and as we get more
data, we'll be able


789
00:39:11,446 --> 00:39:12,566
to produce better estimates.


790
00:39:14,046 --> 00:39:14,886
You should also note


791
00:39:15,246 --> 00:39:18,036
that horizontal accuracy
should be no worse


792
00:39:18,096 --> 00:39:21,246
than the horizontal accuracy
on a Wi-Fi-based position.


793
00:39:21,486 --> 00:39:24,456
So, if you find Wi-Fi-based
positions are suitable


794
00:39:24,456 --> 00:39:27,866
for your app, Visit Monitoring
will probably produce things


795
00:39:27,866 --> 00:39:28,586
of equal value.


796
00:39:31,136 --> 00:39:35,376
Naturally, since this is a
background monitoring service,


797
00:39:35,616 --> 00:39:36,746
we'll launch your app even


798
00:39:36,746 --> 00:39:38,426
if it's been quit,
as Stephen mentioned.


799
00:39:39,696 --> 00:39:43,306
In addition, if the phone is
rebooted or your app crashes,


800
00:39:43,306 --> 00:39:44,936
we'll still launch
it and provide it


801
00:39:44,936 --> 00:39:45,726
with this information.


802
00:39:48,436 --> 00:39:50,896
You should also know
that there are cases


803
00:39:50,896 --> 00:39:54,186
in which Visit Monitoring might
detect multiple visit events


804
00:39:54,296 --> 00:39:56,196
at the same time
and deliver them


805
00:39:56,196 --> 00:39:56,976
to your app in a single launch.


806
00:39:57,086 --> 00:39:59,966
So, when you receive visits,


807
00:40:00,196 --> 00:40:02,096
you should be prepared
to handle multiple.


808
00:40:02,646 --> 00:40:07,476
You may have noticed that
CLVisit doesn't have a isArrival


809
00:40:07,476 --> 00:40:10,506
or isDeparture property,
so let's take a look


810
00:40:10,506 --> 00:40:13,096
at how you can determine whether
a visit represents an arrival


811
00:40:13,096 --> 00:40:15,186
event or departure event.


812
00:40:16,176 --> 00:40:18,776
The secret is to look
at the arrival date


813
00:40:18,776 --> 00:40:20,066
and departure date properties.


814
00:40:20,996 --> 00:40:22,446
On an arrival notification,


815
00:40:23,026 --> 00:40:25,576
the arrival date will
unsurprisingly be our best


816
00:40:25,576 --> 00:40:27,336
estimate of when
the user arrived.


817
00:40:27,886 --> 00:40:31,186
The departure date, however,
will be NSDate distantFuture.


818
00:40:32,166 --> 00:40:34,046
On a departure notification,


819
00:40:34,346 --> 00:40:36,486
the departure date will
be our best estimate.


820
00:40:37,786 --> 00:40:39,946
The arrival date, I'd
like to point out,


821
00:40:40,216 --> 00:40:41,956
could be distant past.


822
00:40:42,096 --> 00:40:44,326
This happens if your
app wasn't authorized


823
00:40:44,326 --> 00:40:46,086
for the arrival moment.


824
00:40:47,236 --> 00:40:51,046
So, how do we check if a
CLVisit represents an arrival


825
00:40:51,046 --> 00:40:51,736
or a departure?


826
00:40:52,686 --> 00:40:55,456
You simply compare the departure
date to distant future.


827
00:40:56,616 --> 00:40:58,106
Now, let's get back to that app.


828
00:40:58,996 --> 00:41:02,196
There should be four
steps to implementing it.


829
00:41:03,286 --> 00:41:05,966
First, we need to adopt
the new authorization model


830
00:41:05,966 --> 00:41:06,936
that Stephen described.


831
00:41:07,526 --> 00:41:10,786
After that, we need to
create our locationManager,


832
00:41:11,616 --> 00:41:12,946
write our start and
stop methods,


833
00:41:13,476 --> 00:41:15,726
and finally handle the visits


834
00:41:16,016 --> 00:41:17,476
that are delivered
by Core Location.


835
00:41:20,296 --> 00:41:22,756
Adopting the new authorization
isn't too difficult.


836
00:41:23,146 --> 00:41:26,226
The hardest part is coming up
with a great way to describe


837
00:41:26,226 --> 00:41:28,326
to your users how you intend
to use their location.


838
00:41:28,326 --> 00:41:31,246
For this example,
journaling app, we might say,


839
00:41:31,466 --> 00:41:32,726
this app needs your location


840
00:41:32,726 --> 00:41:35,226
to automatically detect
the places you visit during


841
00:41:35,226 --> 00:41:35,636
your day.


842
00:41:36,396 --> 00:41:40,756
After that, we create
our locationManager.


843
00:41:41,276 --> 00:41:44,006
I went ahead and did that
in the application delegate


844
00:41:44,496 --> 00:41:47,066
because it provides a
great main thread context


845
00:41:47,066 --> 00:41:48,776
for us to allocate it in.


846
00:41:50,376 --> 00:41:52,526
The start and stop
methods are fairly simple.


847
00:41:52,816 --> 00:41:54,316
The only catch is
you have to remember


848
00:41:54,316 --> 00:41:55,876
to requestAlwaysAuthorization.


849
00:41:56,956 --> 00:42:00,516
And the stop is even easier: you
just call stopMonitoringVisits.


850
00:42:01,956 --> 00:42:06,186
Finally, the delegate, this
is where you take over.


851
00:42:06,716 --> 00:42:09,786
Please keep in mind


852
00:42:10,046 --> 00:42:13,356
that background execution time
is limited and, as I mentioned,


853
00:42:13,356 --> 00:42:14,976
you may receive multiple visits.


854
00:42:15,466 --> 00:42:17,686
So you shouldn't kick
off some long-running,


855
00:42:17,796 --> 00:42:21,186
computationally-expensive
processing task here.


856
00:42:21,666 --> 00:42:23,946
For a simple journaling
app, it might be best


857
00:42:23,946 --> 00:42:27,596
to just record this visit in
a database and then save it


858
00:42:27,596 --> 00:42:30,426
for later when the user
actually launches your app.


859
00:42:31,316 --> 00:42:34,676
If you're writing a check-in
app, now might be a good time


860
00:42:35,056 --> 00:42:37,696
to take a look at the location,
see if it's accurate enough


861
00:42:37,696 --> 00:42:40,366
for you to actually
determine if the user is


862
00:42:40,366 --> 00:42:43,066
at a specific restaurant,
for example,


863
00:42:43,296 --> 00:42:46,726
and then maybe fire off a
UILocalNotification saying would


864
00:42:46,726 --> 00:42:48,236
you like to check in.


865
00:42:50,876 --> 00:42:53,746
Before I give the
stage back to Stephen,


866
00:42:54,166 --> 00:42:56,566
I'd like to give you some advice
from the Core Location team


867
00:42:56,616 --> 00:42:57,576
about Visit Monitoring.


868
00:42:58,516 --> 00:43:00,826
Visit Monitoring is
not a replacement


869
00:43:01,016 --> 00:43:02,056
for region monitoring.


870
00:43:02,286 --> 00:43:04,096
If you're currently
using region monitoring


871
00:43:04,096 --> 00:43:08,266
to receive useful information
about the user arriving at


872
00:43:08,266 --> 00:43:10,226
or departing from
specific locations,


873
00:43:10,456 --> 00:43:11,996
you should continue to do so.


874
00:43:12,376 --> 00:43:14,306
Region monitoring is
more power efficient


875
00:43:14,396 --> 00:43:17,826
and will give you more timely
information about those events.


876
00:43:18,846 --> 00:43:22,836
In addition, Visit
Monitoring is not a replacement


877
00:43:22,836 --> 00:43:24,276
for significant location
changes.


878
00:43:24,626 --> 00:43:26,426
They provide you very
different information.


879
00:43:26,756 --> 00:43:29,786
Significant location changes
is about the path the user too,


880
00:43:30,196 --> 00:43:32,846
whereas Visit Monitoring
is about the destinations.


881
00:43:35,556 --> 00:43:38,286
So, what do you do when you
encounter new technology,


882
00:43:38,286 --> 00:43:41,516
you should try it out and
evaluate it for your use case.


883
00:43:41,976 --> 00:43:45,976
See if Visit Monitoring covers
something that your app needs.


884
00:43:46,876 --> 00:43:50,836
Then, on Thursday,
we're hosting a lab.


885
00:43:51,456 --> 00:43:52,766
You should come to
our lab session,


886
00:43:52,826 --> 00:43:54,576
bring any questions
you might have,


887
00:43:54,576 --> 00:43:56,186
any problems you might
have encountered,


888
00:43:56,346 --> 00:44:00,376
and we'll do our best to help
you get your app up and running.


889
00:44:00,426 --> 00:44:04,686
Finally, please respect
your users' privacy.


890
00:44:05,266 --> 00:44:07,086
This is an incredible technology


891
00:44:07,086 --> 00:44:09,676
that will give your app a new
level of location awareness


892
00:44:10,236 --> 00:44:14,726
but you should try to
respect your users' privacy.


893
00:44:14,726 --> 00:44:16,436
Just because you can
obtain this data,


894
00:44:16,436 --> 00:44:18,106
doesn't mean you
necessarily should.


895
00:44:18,866 --> 00:44:22,226
If you have any questions,
there's going to be a session


896
00:44:22,226 --> 00:44:24,836
about security and
privacy later this week.


897
00:44:24,836 --> 00:44:26,586
I highly recommend
you attend it.


898
00:44:27,556 --> 00:44:30,286
With that, I'd like to invite
Stephen back up onto the stage


899
00:44:30,286 --> 00:44:32,336
to tell you about what's next.


900
00:44:32,756 --> 00:44:33,446
>> Thank you, Brad.


901
00:44:33,876 --> 00:44:36,466
So what else is new in
Core Location on iOS 8?


902
00:44:37,726 --> 00:44:39,806
Well there was that third
bullet point we talked about,


903
00:44:39,806 --> 00:44:40,726
Indoor Positioning.


904
00:44:41,286 --> 00:44:42,886
Unfortunately, we
don't have enough time


905
00:44:42,886 --> 00:44:44,006
to cover that in this session.


906
00:44:44,346 --> 00:44:47,596
In summary, we talked about
location authorization


907
00:44:47,596 --> 00:44:50,436
and changes and recall that
there are just three steps


908
00:44:50,436 --> 00:44:53,336
that you need to follow to
adopt the changes in iOS 8.


909
00:44:53,976 --> 00:44:56,636
First, you want to think about
how your app uses location.


910
00:44:57,356 --> 00:44:59,266
Second, you want to
explain it to your users.


911
00:44:59,946 --> 00:45:03,336
And third, you want to make the
call to request authorization.


912
00:45:03,816 --> 00:45:07,026
And you should try this out
today because come Thursday,


913
00:45:07,106 --> 00:45:09,116
you come back to us with
any questions or issues


914
00:45:09,116 --> 00:45:11,056
that you've encountered
in our lab session.


915
00:45:11,746 --> 00:45:14,036
We also talked about
Visit Monitoring.


916
00:45:14,906 --> 00:45:17,806
Take the opportunity to assess
your apps' needs for location


917
00:45:18,176 --> 00:45:21,446
and see if this Visit Monitoring
is cool technology is something


918
00:45:21,446 --> 00:45:24,966
that your app can take advantage
of, but again remember,


919
00:45:24,966 --> 00:45:27,416
as Brad mentioned, to
respect your users' privacy.


920
00:45:28,026 --> 00:45:31,286
And also on this one, give it
a try, see what you can do,


921
00:45:31,666 --> 00:45:33,996
and then come back to us on
Thursday with sample code


922
00:45:33,996 --> 00:45:36,986
or any issues or questions that
you have regarding this new API.


923
00:45:38,466 --> 00:45:42,496
For more information, check out
our great documentation online.


924
00:45:43,306 --> 00:45:45,236
We have the Core Location
Framework Reference,


925
00:45:45,766 --> 00:45:48,536
which is updated with everything
that we've talked about today.


926
00:45:49,566 --> 00:45:52,146
We also have a Location
and Maps Programming Guide,


927
00:45:52,546 --> 00:45:54,276
which is always being
updated with new


928
00:45:54,276 --> 00:45:57,016
and useful information
and, as always,


929
00:45:57,296 --> 00:45:58,856
visit the Apple Developer
Forums.


930
00:46:01,176 --> 00:46:04,716
For related sessions, we have a
number that we highly recommend.


931
00:46:05,286 --> 00:46:07,896
The first on the Modern
WebKit API, unfortunately,


932
00:46:07,896 --> 00:46:09,686
is at the same time as
this session, so thank you


933
00:46:09,686 --> 00:46:12,926
for joining us, but for more
information about web views,


934
00:46:13,466 --> 00:46:15,726
go check out the videos
online afterwards.


935
00:46:16,506 --> 00:46:18,826
Also, as we mentioned,
directly following this session,


936
00:46:19,696 --> 00:46:21,586
"Taking Core Location
Indoors" for more


937
00:46:21,586 --> 00:46:23,256
on what's new in Core Location.


938
00:46:24,526 --> 00:46:27,016
Also tomorrow, I
highly recommend part 2


939
00:46:27,016 --> 00:46:28,676
of "Writing Energy-Efficient
Code",


940
00:46:29,206 --> 00:46:32,236
which will cover some good
practices when using location


941
00:46:32,516 --> 00:46:35,356
in addition to other
technology in your apps.


942
00:46:35,686 --> 00:46:39,466
Also tomorrow, "What's New In
iOS Notifications" for more


943
00:46:39,466 --> 00:46:41,836
on the region-based
UILocationNotifications


944
00:46:42,226 --> 00:46:43,026
and more.


945
00:46:44,026 --> 00:46:48,246
And on Thursday, visit the
User Privacy in iOS and OS X


946
00:46:48,636 --> 00:46:51,766
for more details on location
authorization and privacy


947
00:46:52,036 --> 00:46:55,776
and other privacy-related
topics on both iOS and OS X.

