1
00:00:07,516 --> 00:00:17,500
[ Music ]


2
00:00:28,516 --> 00:00:35,086
[ Applause ]


3
00:00:35,586 --> 00:00:36,216
>> Thank you.


4
00:00:36,216 --> 00:00:37,106
Good afternoon everyone.


5
00:00:37,406 --> 00:00:39,526
Welcome to the session
Getting Started with CareKit.


6
00:00:39,756 --> 00:00:41,516
I'm Umer. I'm an engineer
on the CareKit Team.


7
00:00:42,716 --> 00:00:45,856
Our agenda will consist of
exploring the story of CareKit


8
00:00:45,856 --> 00:00:46,686
and how it came about.


9
00:00:47,416 --> 00:00:49,606
Taking a look at an app
that utilizes CareKit


10
00:00:49,606 --> 00:00:51,286
to enhance the patient-provider
experience.


11
00:00:52,376 --> 00:00:54,396
Working through the CareKit
architecture in order


12
00:00:54,396 --> 00:00:55,146
to create an app here.


13
00:00:56,016 --> 00:00:58,806
Then a demo of an app that uses
a customization in CareKit.


14
00:00:59,266 --> 00:01:01,206
And then lastly what's
next, how Apple


15
00:01:01,206 --> 00:01:03,366
and the developer
community can work together


16
00:01:03,366 --> 00:01:04,236
to take it to the next level.


17
00:01:06,646 --> 00:01:08,616
So before I talk
about what CareKit is,


18
00:01:08,796 --> 00:01:09,806
let's see where it came from.


19
00:01:12,326 --> 00:01:14,146
Many of you might be
familiar with ResearchKit.


20
00:01:14,676 --> 00:01:16,526
It's a framework that
we released last year


21
00:01:16,706 --> 00:01:19,316
that enables providers
and medical researchers


22
00:01:19,396 --> 00:01:21,136
to create a study
that they can conduct


23
00:01:21,136 --> 00:01:22,566
on a large-scale using iPhones.


24
00:01:23,226 --> 00:01:26,656
So if you're interested, I
would recommend taking a look


25
00:01:26,656 --> 00:01:27,906
at the session from
earlier today.


26
00:01:28,076 --> 00:01:30,396
What's New in ResearchKit,
hosted by Bunny Laden


27
00:01:30,396 --> 00:01:30,956
and Yuen Xiou [phonetic].


28
00:01:31,556 --> 00:01:33,176
And the ResearchKit
session from last year,


29
00:01:33,176 --> 00:01:35,426
hosted by John Roll [phonetic],
Building Apps with ResearchKit.


30
00:01:36,216 --> 00:01:40,696
In the past year with
ResearchKit, we received a lot


31
00:01:40,696 --> 00:01:42,156
of requests on study
participants,


32
00:01:42,646 --> 00:01:43,536
to be able to see the data


33
00:01:43,536 --> 00:01:45,226
that they were providing
for medical research.


34
00:01:45,986 --> 00:01:48,236
This led us to brainstorm
patient-centric modules.


35
00:01:49,176 --> 00:01:52,246
While brainstorming these
modules, these are the use case


36
00:01:52,246 --> 00:01:54,796
for care, expanding beyond the
boundaries of medical research.


37
00:01:55,776 --> 00:01:59,026
And therefore from ResearchKit
evolved our new framework,


38
00:01:59,426 --> 00:02:00,006
CareKit.


39
00:02:00,616 --> 00:02:05,786
So CareKit is an open source
framework that enables providers


40
00:02:05,786 --> 00:02:07,656
to build apps that
can empower patients


41
00:02:07,656 --> 00:02:08,966
to take an active
role in their care.


42
00:02:09,895 --> 00:02:12,226
Now CareKit is great for
chronic and acute use cases.


43
00:02:13,576 --> 00:02:16,016
So a great example for a chronic
use case is mental health.


44
00:02:16,626 --> 00:02:18,096
Where medication
tracking is critical.


45
00:02:18,746 --> 00:02:21,736
Also doing assessments like
depression and anxiety surveys


46
00:02:21,736 --> 00:02:24,086
to see your progress and
performing activities


47
00:02:24,086 --> 00:02:25,516
that actually improve
your mental health.


48
00:02:25,786 --> 00:02:27,856
Just stuff that you need
to do outside of a group --


49
00:02:28,216 --> 00:02:29,736
a support group or
therapy session.


50
00:02:30,396 --> 00:02:35,246
And then another good
example is surgery where one


51
00:02:35,246 --> 00:02:37,236
of the most critical parts
is the recovery phase,


52
00:02:37,336 --> 00:02:37,896
post-surgery.


53
00:02:38,816 --> 00:02:40,146
So let's focus on this use case,


54
00:02:40,246 --> 00:02:42,106
and walk through the current
scenario of the patient


55
00:02:42,106 --> 00:02:42,966
and provider experience.


56
00:02:46,706 --> 00:02:49,316
So currently, if you leave the
hospital or a doctor's office,


57
00:02:49,316 --> 00:02:50,796
you're given a sheet of
paper that looks like this.


58
00:02:51,356 --> 00:02:53,536
This has everything you need
to do for a healthy recovery.


59
00:02:54,086 --> 00:02:56,256
This sheet of paper has some
very specific instructions,


60
00:02:56,356 --> 00:02:57,646
with many that change over time.


61
00:02:58,726 --> 00:03:00,866
The compliance to these
types of plans is horrible.


62
00:03:01,196 --> 00:03:03,216
And they typically
lead to user confusion.


63
00:03:04,326 --> 00:03:05,426
These plans are not dynamic,


64
00:03:05,546 --> 00:03:07,876
and therefore they don't change
based on the user's improvement.


65
00:03:08,336 --> 00:03:09,686
And ultimately the
patient returns


66
00:03:09,686 --> 00:03:10,916
to the hospital to be retreated.


67
00:03:11,906 --> 00:03:13,876
Our goal with CareKit
was to solve this problem


68
00:03:13,876 --> 00:03:16,236
and take something like
this sheet of paper,


69
00:03:16,886 --> 00:03:18,766
and turn it into what
we call a Care Card.


70
00:03:20,016 --> 00:03:21,906
Now this is a Care Card
that allows the patient


71
00:03:21,906 --> 00:03:23,176
to see their entire
treatment plan.


72
00:03:23,576 --> 00:03:26,136
One that is interactive,
updated dynamically,


73
00:03:26,466 --> 00:03:28,546
and it provides a great sense
of progress for the patient.


74
00:03:29,936 --> 00:03:32,246
So in the development of
this module we discovered


75
00:03:32,246 --> 00:03:33,526
that there's so much
more we can do


76
00:03:33,526 --> 00:03:34,736
because now we're on an iPhone.


77
00:03:35,376 --> 00:03:37,726
And that let us create
three other modules to help


78
00:03:37,726 --> 00:03:38,846
with the patient
care experience.


79
00:03:41,506 --> 00:03:42,846
The Symptom and Measurement
Tracker,


80
00:03:43,186 --> 00:03:45,276
which records subjective
and objective measurements.


81
00:03:46,636 --> 00:03:49,456
The insides dashboard, that
displays the data in the app


82
00:03:49,456 --> 00:03:51,226
in a way that enables
a patient to see trends


83
00:03:51,226 --> 00:03:52,096
and gaps in their care.


84
00:03:52,096 --> 00:03:55,996
And the connect module
that enables communicating


85
00:03:55,996 --> 00:03:58,386
and sharing the data with a
family member or your care team.


86
00:04:01,276 --> 00:04:02,676
So let's see how
these come together


87
00:04:02,746 --> 00:04:04,356
to enhance the patient-provider
experience.


88
00:04:04,936 --> 00:04:07,316
Texas Medical Center was one of
our initial partners of CareKit.


89
00:04:07,986 --> 00:04:08,976
They've taken these modules


90
00:04:09,166 --> 00:04:11,036
to create a unique
patient-provider experience.


91
00:04:11,366 --> 00:04:12,826
So let's take a look at
these modules in action.


92
00:04:14,226 --> 00:04:16,516
At first, you are greeted with
a walk-in screen that allows you


93
00:04:16,516 --> 00:04:18,166
to create an account or log in.


94
00:04:18,166 --> 00:04:21,356
Our patient, John Appleseed,
has already registered


95
00:04:21,356 --> 00:04:23,446
and is set up to use the app.


96
00:04:23,976 --> 00:04:25,846
So John wakes up and
receives a notification


97
00:04:25,846 --> 00:04:27,466
that he needs to weigh himself.


98
00:04:29,086 --> 00:04:31,236
He enters the app
with a secure passcode


99
00:04:32,786 --> 00:04:34,966
and then he weighs
himself on a smart scale


100
00:04:35,066 --> 00:04:37,036
and the value is
transferred into HealthKit.


101
00:04:37,036 --> 00:04:39,886
And the CareKit app will
autopopulate the data


102
00:04:40,056 --> 00:04:40,646
using HealthKit.


103
00:04:41,796 --> 00:04:43,356
This is very easy
to do with CareKit,


104
00:04:43,356 --> 00:04:45,396
because CareKit provides
seamless integration


105
00:04:45,396 --> 00:04:45,836
with HealthKit.


106
00:04:48,796 --> 00:04:51,146
After recording his weight,
John goes to his Care Card


107
00:04:51,146 --> 00:04:53,016
to see what he needs
to do on his --


108
00:04:53,216 --> 00:04:54,446
what's on his to-do list today.


109
00:04:55,336 --> 00:04:56,706
So the Care Card and the Symptom


110
00:04:56,706 --> 00:04:58,086
and Measurement Tracker
we're looking at,


111
00:04:58,246 --> 00:04:59,886
is populating its
content directly


112
00:04:59,886 --> 00:05:02,266
from the ERM Health System
at Texas Medical Center.


113
00:05:04,846 --> 00:05:06,636
So John doesn't recall
the specifics for one


114
00:05:06,636 --> 00:05:07,966
of his activities,
the short walk.


115
00:05:07,966 --> 00:05:09,586
So he can tap into that cell,


116
00:05:09,666 --> 00:05:11,826
and he can read the
instructions for this activity.


117
00:05:12,776 --> 00:05:16,536
And then John completes
his activity,


118
00:05:16,566 --> 00:05:18,236
and takes his first
dose of medication.


119
00:05:19,846 --> 00:05:24,296
He now taps into
the Assessments Tab


120
00:05:24,336 --> 00:05:26,266
to see what assessments he
needs to complete today.


121
00:05:26,986 --> 00:05:29,396
In his Symptom and Measurement
Tracker, he wants to indicate


122
00:05:29,396 --> 00:05:32,296
that he has some surgical
side pain, and some signs


123
00:05:32,296 --> 00:05:33,336
of what could be an infection.


124
00:05:34,276 --> 00:05:36,486
So first he records
his pain score,


125
00:05:36,816 --> 00:05:37,846
using the scale assessment.


126
00:05:38,556 --> 00:05:44,066
And then he decides to take
a photo of the infected area,


127
00:05:44,066 --> 00:05:45,076
and upload it to the app.


128
00:05:45,356 --> 00:05:46,976
And he can do that
directly from the Symptom


129
00:05:46,976 --> 00:05:47,746
and Measurement Tracker,


130
00:05:47,746 --> 00:05:48,976
and this data is
transmitted to his provider.


131
00:05:57,076 --> 00:05:58,916
Lastly, he performs a
get-up-and-go activity.


132
00:05:59,666 --> 00:06:01,576
As he is walking around
to complete this activity,


133
00:06:01,676 --> 00:06:03,996
the sensors on the iPhone are
being used to record his steps.


134
00:06:04,646 --> 00:06:06,596
And once he has completed
the entire activity,


135
00:06:06,596 --> 00:06:13,426
the data is transmitted
directly to his provider.


136
00:06:13,786 --> 00:06:16,036
So John decides to take a look
at the Insights Dashboard now


137
00:06:16,036 --> 00:06:17,786
to see his data for
the last couple weeks.


138
00:06:18,206 --> 00:06:20,106
He can see the tips and
charts for the current week.


139
00:06:20,716 --> 00:06:23,036
This provides a way for him to
understand his data in a visual


140
00:06:23,036 --> 00:06:23,916
and user-friendly way.


141
00:06:24,946 --> 00:06:26,936
And then he also navigates
to the previous week,


142
00:06:27,536 --> 00:06:28,976
to be able to compare his
current week's performance.


143
00:06:34,876 --> 00:06:37,396
Meanwhile, he is still worried
about the possible infection


144
00:06:37,396 --> 00:06:38,916
that he reported earlier
in the assessments.


145
00:06:39,316 --> 00:06:41,476
So he decides to send a
message to his care team member.


146
00:06:42,576 --> 00:06:45,566
He taps to compose a
message, and he decides


147
00:06:45,566 --> 00:06:47,346
to email his provider,
Dr. Paul Cashman.


148
00:06:48,346 --> 00:06:49,686
In his message, he does not need


149
00:06:49,686 --> 00:06:51,136
to upload the infection
photo anymore


150
00:06:51,136 --> 00:06:53,116
because it's already been
transmitted to Dr. Cashman


151
00:06:53,116 --> 00:06:53,976
through the infection
assessment.


152
00:06:59,666 --> 00:07:01,876
So then later in the day,
he receives a reply message


153
00:07:01,876 --> 00:07:03,626
from his care team
member, Dr. Paul Cashman.


154
00:07:03,676 --> 00:07:06,086
And he can go back into
his app and see the message


155
00:07:06,086 --> 00:07:07,486
that the provider
has provided to him.


156
00:07:08,916 --> 00:07:11,446
And that's how Texas Medical
Center has taken the CareKit


157
00:07:11,446 --> 00:07:14,916
module, and created an app that
can completely close the loop


158
00:07:14,916 --> 00:07:16,176
with the patient-provider
experience.


159
00:07:17,516 --> 00:07:22,646
[ Applause ]


160
00:07:23,146 --> 00:07:25,156
Thanks. Let's take a
look at the process


161
00:07:25,156 --> 00:07:26,536
of creating an app
just like them.


162
00:07:27,886 --> 00:07:29,376
Here are the four
front-end modules


163
00:07:29,716 --> 00:07:30,546
that we've already looked at.


164
00:07:31,296 --> 00:07:33,916
Accompanied by two back-end
modules: The Care Plan Store


165
00:07:33,916 --> 00:07:34,976
and the Document Exporter.


166
00:07:35,746 --> 00:07:37,866
Now we'll go into each one of
these, but let's first focus


167
00:07:37,866 --> 00:07:38,766
on the Care Plan Store.


168
00:07:40,436 --> 00:07:42,596
The Care Plan Store consists
of activities and events.


169
00:07:43,586 --> 00:07:45,926
So let's begin by defining
what activities and events are,


170
00:07:46,936 --> 00:07:48,856
then creating an activity
and adding it to the store,


171
00:07:49,676 --> 00:07:52,036
exploring the relationship
between activities and events,


172
00:07:52,036 --> 00:07:53,326
and then bringing
these up to the UI.


173
00:07:55,586 --> 00:07:57,126
So if you look at
this Care Card here,


174
00:07:57,546 --> 00:08:00,306
we can visualize what an
activity and an event is.


175
00:08:01,096 --> 00:08:02,426
Let's focus on the ibuprofen.


176
00:08:03,216 --> 00:08:05,666
Where Ibuprofen 200
mg is the activity.


177
00:08:05,856 --> 00:08:08,376
And the circles underneath
are the events.


178
00:08:09,176 --> 00:08:12,296
And then activities and
events come together


179
00:08:12,296 --> 00:08:13,496
to create the Care Plan Store.


180
00:08:16,426 --> 00:08:17,486
So here's an activity.


181
00:08:17,616 --> 00:08:19,246
Let's go ahead and
create an ibuprofen one.


182
00:08:19,806 --> 00:08:21,716
You'll first give an identifier,


183
00:08:21,796 --> 00:08:24,136
which we've used
ibuprofen medication here.


184
00:08:24,656 --> 00:08:26,546
This helps uniquely
identify this activity


185
00:08:26,546 --> 00:08:27,356
in the Care Plan Store.


186
00:08:28,606 --> 00:08:30,396
Then a group identifier to
be able to create groups


187
00:08:30,396 --> 00:08:32,556
of certain activities that you
can query the backend store


188
00:08:32,556 --> 00:08:32,986
later on.


189
00:08:34,556 --> 00:08:35,926
The title is Ibuprofen.


190
00:08:36,135 --> 00:08:37,446
The text is 200 mg.


191
00:08:37,926 --> 00:08:39,515
Now these properties
surface to the user.


192
00:08:39,515 --> 00:08:41,756
So be sure they properly
define what the activity is.


193
00:08:42,515 --> 00:08:46,646
The tint color, which can be
any UI color, so we chose blue.


194
00:08:47,116 --> 00:08:48,686
Apart from the tint
color on each activity,


195
00:08:48,686 --> 00:08:50,376
there are many other
customization properties


196
00:08:50,496 --> 00:08:51,546
that are available in CareKit


197
00:08:51,586 --> 00:08:53,226
and we'll discuss
them in a little bit.


198
00:08:54,186 --> 00:08:56,376
Now the two properties
I really want to focus


199
00:08:56,376 --> 00:08:57,466
on are type and schedule.


200
00:08:58,456 --> 00:08:59,456
So the type determines


201
00:08:59,526 --> 00:09:01,506
which front-end module
this activity belongs to.


202
00:09:01,986 --> 00:09:04,416
So for example, we
have an intervention,


203
00:09:04,556 --> 00:09:05,666
which belong on the Care Card.


204
00:09:06,486 --> 00:09:08,416
And we have assessments,
which are shown in the Symptom


205
00:09:08,416 --> 00:09:09,156
and Measurement Tracker.


206
00:09:09,606 --> 00:09:13,116
So because we're creating
a medication activity,


207
00:09:13,116 --> 00:09:14,196
it belongs in the Care Card.


208
00:09:14,426 --> 00:09:16,026
Therefore, the activity
type is intervention.


209
00:09:16,596 --> 00:09:20,206
Next, I want to focus
on schedule.


210
00:09:20,676 --> 00:09:22,966
The schedule determines
how many times,


211
00:09:22,966 --> 00:09:24,426
and when this activity
should happen.


212
00:09:25,746 --> 00:09:26,936
So there are three
different ways


213
00:09:26,936 --> 00:09:28,826
to specify the days
for the schedule.


214
00:09:28,826 --> 00:09:31,616
You can use a daily
schedule, a weekly schedule,


215
00:09:31,796 --> 00:09:33,146
or you can create your
own custom schedule.


216
00:09:33,246 --> 00:09:35,386
And then you can
specify the frequency,


217
00:09:35,386 --> 00:09:37,706
to indicate how many times per
day this activity should occur.


218
00:09:37,706 --> 00:09:40,256
Now this sounds a
little bit complicated,


219
00:09:40,256 --> 00:09:41,066
but it's really not.


220
00:09:41,166 --> 00:09:41,976
So let's simplify it.


221
00:09:41,976 --> 00:09:44,836
Let's go ahead and define a
schedule for our activity.


222
00:09:46,946 --> 00:09:47,986
Well here's a weekly schedule.


223
00:09:47,986 --> 00:09:50,216
And we'll say we want the
patient to take this medication


224
00:09:50,216 --> 00:09:52,296
on Monday, Wednesday,
and Friday.


225
00:09:52,296 --> 00:09:56,496
And then we can use a frequency
to specify four times on Monday,


226
00:09:56,826 --> 00:09:58,576
twice on Wednesday, and
four times on Friday.


227
00:09:59,526 --> 00:10:02,596
And then combined together
it creates a schedule object


228
00:10:02,596 --> 00:10:03,326
for this activity.


229
00:10:04,096 --> 00:10:06,896
And now we have a complete
activity ready to be added


230
00:10:06,896 --> 00:10:07,746
to the Care Plan Store.


231
00:10:09,046 --> 00:10:10,356
So before we look
at the code on how


232
00:10:10,356 --> 00:10:12,346
to create the Care Plan Store
and add this activity in there,


233
00:10:12,396 --> 00:10:14,916
let's just discuss what an
event is really quickly.


234
00:10:15,676 --> 00:10:17,186
So an event is an object


235
00:10:17,236 --> 00:10:19,216
that a developer never
directly initializes.


236
00:10:19,526 --> 00:10:20,646
In fact, it's created
automatically


237
00:10:20,646 --> 00:10:21,476
by the Care Plan Store.


238
00:10:22,366 --> 00:10:24,736
So to understand how these
are created, let's go back


239
00:10:24,736 --> 00:10:26,066
to the schedule object
we just had.


240
00:10:26,986 --> 00:10:29,166
A schedule object
generates events based


241
00:10:29,166 --> 00:10:30,476
on the frequency you specify.


242
00:10:30,586 --> 00:10:35,006
So for example, here, we
have four events on Monday.


243
00:10:35,326 --> 00:10:36,906
Therefore, we've got four
events for June 20th.


244
00:10:37,196 --> 00:10:38,976
And then we have two
events on Wednesday,


245
00:10:38,976 --> 00:10:40,366
so you've got two for June 22nd.


246
00:10:40,366 --> 00:10:42,016
And then it'll keep
on generating them.


247
00:10:42,546 --> 00:10:44,786
So the way you can stop the
generation of these events,


248
00:10:44,786 --> 00:10:46,056
is by specifying an end date.


249
00:10:46,196 --> 00:10:47,936
Once you specify an end
date for an activity,


250
00:10:47,936 --> 00:10:49,836
the Care Plan Store will
stop generating these events.


251
00:10:50,216 --> 00:10:53,876
So even though a developer
doesn't create an event,


252
00:10:53,876 --> 00:10:55,396
it provides a lot of
useful information.


253
00:10:56,036 --> 00:10:58,146
From an event object you can
retrieve the date of the event.


254
00:10:58,776 --> 00:11:01,086
You can see what state it is
in, such as an initial state,


255
00:11:01,086 --> 00:11:02,396
which means the user
hasn't invoked it.


256
00:11:02,396 --> 00:11:04,396
It could be completed
or not completed.


257
00:11:05,316 --> 00:11:08,206
The results object contains
the completion status of it.


258
00:11:08,206 --> 00:11:10,366
As things such as
when it was completed,


259
00:11:10,366 --> 00:11:12,306
and any other information you
want to store along with that.


260
00:11:13,046 --> 00:11:14,806
And then there's also a
pointer back to the activity


261
00:11:14,806 --> 00:11:16,606
that this event came out of.


262
00:11:17,556 --> 00:11:20,056
So activities generate
events in the Care Plan Store


263
00:11:20,376 --> 00:11:23,096
and combined together they
create what we call here,


264
00:11:23,096 --> 00:11:23,736
a Care Plan Store.


265
00:11:24,096 --> 00:11:25,296
So let's take a look
at the code for this.


266
00:11:27,016 --> 00:11:28,726
So now to create
a Care Plan Store,


267
00:11:28,726 --> 00:11:29,686
it's very straight forward.


268
00:11:29,686 --> 00:11:30,696
You just define a variable,


269
00:11:30,696 --> 00:11:32,356
which I have here
myCarePlanStore


270
00:11:32,356 --> 00:11:34,436
of type OCKCarePlanStore.


271
00:11:35,516 --> 00:11:37,576
Then you have to define a
persistent directory URL.


272
00:11:37,676 --> 00:11:39,456
Which in this case
I've used application


273
00:11:39,456 --> 00:11:40,376
to documents directory.


274
00:11:41,096 --> 00:11:44,436
And then you just initialize
the [inaudible] URL,


275
00:11:44,486 --> 00:11:46,646
and you have a Care
Plan Store ready to use.


276
00:11:48,696 --> 00:11:51,226
So now, let's go ahead and
add the ibuprofen activity


277
00:11:51,226 --> 00:11:52,156
that we just created.


278
00:11:52,626 --> 00:11:54,046
First you will create
a schedule object.


279
00:11:54,116 --> 00:11:55,706
So you have a start
date just specified


280
00:11:55,706 --> 00:11:56,706
as the beginning of this year.


281
00:11:57,306 --> 00:11:59,596
And then using a weekly
schedule, I can use the array


282
00:11:59,596 --> 00:12:02,696
for occurrences on each day to
specify how many times per day.


283
00:12:03,046 --> 00:12:04,906
So for example, our
array starts on Sunday.


284
00:12:04,906 --> 00:12:08,596
So zero on Sunday, four on
Monday, and zero on Tuesday.


285
00:12:08,596 --> 00:12:10,126
And then so on and so forth.


286
00:12:10,816 --> 00:12:13,856
So once you have that
object, you go ahead


287
00:12:13,856 --> 00:12:15,376
and initialize the
care plan activity.


288
00:12:16,056 --> 00:12:17,766
You give it the identifier,
the group identifier.


289
00:12:17,816 --> 00:12:19,286
All the other parameters
will be defined.


290
00:12:19,636 --> 00:12:21,396
There's two here that we
have not discussed yet,


291
00:12:21,396 --> 00:12:22,956
which is instructions
and image URL.


292
00:12:22,956 --> 00:12:24,106
So these are shown


293
00:12:24,106 --> 00:12:25,416
on the detailed [inaudible]
for that activities.


294
00:12:25,806 --> 00:12:28,566
For example, when John
Appleseed clicked on short walk,


295
00:12:28,566 --> 00:12:30,176
he could see additional
instructions for it.


296
00:12:30,596 --> 00:12:33,266
So we'll have additional
instructions for ibuprofen along


297
00:12:33,266 --> 00:12:35,236
with an image, and we'll
take a look at how this looks


298
00:12:35,236 --> 00:12:36,136
when we look at the Care Card.


299
00:12:36,386 --> 00:12:39,946
And then to add this activity
to the Care Plan Store,


300
00:12:39,946 --> 00:12:42,116
we just call the add method
passing the activity you've


301
00:12:42,146 --> 00:12:43,686
created, and then use
a completion handler


302
00:12:43,686 --> 00:12:47,676
for any error checking
you would like to do.


303
00:12:47,956 --> 00:12:49,226
That's how you create
a Care Plan Store


304
00:12:49,276 --> 00:12:50,766
and that's how you
add an activity to it.


305
00:12:51,366 --> 00:12:53,396
Let's see how we can use
the data in here to show it


306
00:12:53,396 --> 00:12:54,276
onto the Care Card now.


307
00:12:56,416 --> 00:12:57,326
Creating the Care Plan Store


308
00:12:57,326 --> 00:12:58,726
and adding an activity
is the tougher part.


309
00:12:58,876 --> 00:13:00,896
Showing it on the Care Card
is actually very simple


310
00:13:00,896 --> 00:13:01,516
and straightforward.


311
00:13:01,566 --> 00:13:04,946
I'm going to show you the
activity we just added.


312
00:13:05,516 --> 00:13:07,996
Emphasize the type property
here, that it's intervention.


313
00:13:08,336 --> 00:13:09,636
So because you set intervention,


314
00:13:09,636 --> 00:13:10,856
the Care PlanS tore
already knows


315
00:13:10,856 --> 00:13:11,866
to show it on the Care Card.


316
00:13:11,866 --> 00:13:14,816
And then to actually
create the Care Card,


317
00:13:14,816 --> 00:13:16,526
you just initialize the
CareCardViewController


318
00:13:16,576 --> 00:13:17,846
with a carePlanStore object.


319
00:13:19,086 --> 00:13:20,896
You embed it inside a
NavigationController.


320
00:13:21,016 --> 00:13:22,436
The reason this is necessary is


321
00:13:22,436 --> 00:13:24,896
because we provide some
bar button items to assist


322
00:13:24,896 --> 00:13:27,426
with calendar navigation as
well as details that we push


323
00:13:27,426 --> 00:13:29,236
onto the navigation stack.


324
00:13:29,306 --> 00:13:32,736
And then you just present
it, or we can embed it


325
00:13:32,736 --> 00:13:33,686
into a tab bar controller.


326
00:13:33,686 --> 00:13:35,386
And with these three
lines of code,


327
00:13:35,386 --> 00:13:37,006
you get what we have
here is a Care Card.


328
00:13:38,516 --> 00:13:44,626
[ Applause ]


329
00:13:45,126 --> 00:13:47,596
So as you can see here, we have
the ibuprofen activity along


330
00:13:47,596 --> 00:13:49,046
with some other ones
that I've added.


331
00:13:49,956 --> 00:13:52,186
And then let's look at the
different components of this UI


332
00:13:52,186 --> 00:13:53,286
to understand what
we're looking at.


333
00:13:54,316 --> 00:13:56,566
So the header view shows you
a glance of the current week.


334
00:13:56,876 --> 00:13:58,956
You can slide left and right
to navigate between weeks.


335
00:13:59,476 --> 00:14:01,826
You can select a specific date
to see the details for that day.


336
00:14:02,486 --> 00:14:04,706
The heart completion here
is automatically calculated


337
00:14:04,706 --> 00:14:06,206
and updated based
on the information


338
00:14:06,206 --> 00:14:07,046
in the Care Plan Store.


339
00:14:08,216 --> 00:14:10,526
So the heart and the fill
color here are customizable.


340
00:14:10,886 --> 00:14:12,106
You can specify a
different image


341
00:14:12,146 --> 00:14:13,706
that might suit your
use case better.


342
00:14:13,756 --> 00:14:15,316
And then the fill
color can be changed


343
00:14:15,316 --> 00:14:16,436
to match the custom image.


344
00:14:16,836 --> 00:14:18,236
And we'll see an
example of a Care Card


345
00:14:18,236 --> 00:14:19,976
that has this customization
later on.


346
00:14:22,496 --> 00:14:24,116
Now below the header
is the treatment plan.


347
00:14:24,116 --> 00:14:26,176
This shows all the interventions
that the user needs


348
00:14:26,176 --> 00:14:27,166
to complete for that day.


349
00:14:27,846 --> 00:14:30,086
So any time you add
or remove an activity


350
00:14:30,086 --> 00:14:32,906
from the Care Plan Store, this
UI gets updated automatically,


351
00:14:32,976 --> 00:14:35,606
with no additional work
necessary from the developer.


352
00:14:37,906 --> 00:14:40,076
So here's ibuprofen
intervention we just added.


353
00:14:40,646 --> 00:14:42,576
And if you tap on the
cell, it will take you


354
00:14:42,576 --> 00:14:45,366
into the detail view which
has the detail instructions,


355
00:14:45,716 --> 00:14:47,256
as well as an image
of the medication


356
00:14:47,256 --> 00:14:49,166
so that the user does not
confuse them with other pills


357
00:14:49,166 --> 00:14:49,916
that they might be taking.


358
00:14:54,046 --> 00:14:55,586
Now let's take a look at
a different intervention.


359
00:14:56,286 --> 00:14:58,656
So this one here asks the user
to stand and move a little.


360
00:14:59,236 --> 00:15:01,116
So while this is something
the user can self-report


361
00:15:01,116 --> 00:15:02,306
by just tapping into the cell,


362
00:15:03,106 --> 00:15:06,056
it can also be updated
automatically using sensors


363
00:15:06,056 --> 00:15:06,796
on the Apple Watch.


364
00:15:07,776 --> 00:15:09,336
So that brings me
to the next point,


365
00:15:09,336 --> 00:15:10,866
is how can we update
these events?


366
00:15:12,016 --> 00:15:12,856
Well there's different ways.


367
00:15:13,176 --> 00:15:14,926
One of which, like we
said, is self-reported


368
00:15:14,926 --> 00:15:16,206
such as medication tracking


369
00:15:16,206 --> 00:15:17,966
where they can report they've
taken their medication.


370
00:15:18,896 --> 00:15:20,006
They can be marked completed


371
00:15:20,006 --> 00:15:21,776
after the user has
completed a task.


372
00:15:21,906 --> 00:15:23,606
Such as an active
task from ResearchKit.


373
00:15:24,636 --> 00:15:26,716
Or it can be updated
passively using the data


374
00:15:27,106 --> 00:15:29,086
from device sensors
such as the Apple Watch


375
00:15:29,086 --> 00:15:30,456
and the iPhone using HealthKit.


376
00:15:31,256 --> 00:15:33,656
So that's the Care Card.


377
00:15:34,046 --> 00:15:35,456
It's an interactive
treatment plan


378
00:15:35,456 --> 00:15:38,106
that uses the Care Plan Store to
schedule activities and events,


379
00:15:38,106 --> 00:15:40,036
and provide the user
with a focused experience


380
00:15:40,036 --> 00:15:40,806
on their day-to-day health.


381
00:15:43,236 --> 00:15:45,386
So just like the Care
Card, the Symptom


382
00:15:45,386 --> 00:15:47,826
and Measurement Tracker also
uses the Care Plan Store


383
00:15:47,986 --> 00:15:50,066
to record a subjective and
objective measurements.


384
00:15:50,446 --> 00:15:54,116
So the process of adding an
assessment is very similar


385
00:15:54,116 --> 00:15:57,276
to how we did in the
ibuprofen intervention.


386
00:15:57,706 --> 00:16:00,486
So let's say that we have
a pain survey that you want


387
00:16:00,486 --> 00:16:01,656
to create for your lower back.


388
00:16:02,446 --> 00:16:04,756
The code here is nearly
identical to create this,


389
00:16:04,816 --> 00:16:06,266
so we'll assume that
it's already been added


390
00:16:06,266 --> 00:16:07,096
to the Care Plan Store.


391
00:16:08,236 --> 00:16:10,346
Now let's take a look at how
you can create a Symptom Tracker


392
00:16:10,346 --> 00:16:11,706
to actually show
this assessment.


393
00:16:12,606 --> 00:16:14,706
Just like the Care Card, you
initialize the Symptom Tracker


394
00:16:14,706 --> 00:16:16,816
with your controller with
a Care Plan Store object.


395
00:16:17,496 --> 00:16:18,836
There's a delegate
that you can implement,


396
00:16:18,836 --> 00:16:19,866
but I'll get to that shortly.


397
00:16:19,866 --> 00:16:22,746
And then embed it into
a navigation controller.


398
00:16:22,886 --> 00:16:25,466
And then again, just present it
to see something like this here.


399
00:16:27,016 --> 00:16:28,386
So if we dissect this UI,


400
00:16:29,596 --> 00:16:31,986
the header view contains
the similar navigation model


401
00:16:31,986 --> 00:16:33,546
as the Care Card where
we can slide left


402
00:16:33,546 --> 00:16:34,506
and right to change weeks.


403
00:16:34,816 --> 00:16:36,976
We select specific days to
see details for that day.


404
00:16:37,706 --> 00:16:39,596
As you're working on the
assessment for that day,


405
00:16:39,696 --> 00:16:42,076
the ring -- there will be a ring
that shows you your progress.


406
00:16:42,276 --> 00:16:44,536
And once you've completed them,
it'll turn into a checkmark


407
00:16:44,626 --> 00:16:46,786
to know that you have no more
assessments for that day.


408
00:16:47,376 --> 00:16:50,156
The color for the ring and the
checkmark can be customized


409
00:16:50,156 --> 00:16:51,406
to suit your app.


410
00:16:52,116 --> 00:16:54,796
Underneath here, you will have
a list of assessments that need


411
00:16:54,796 --> 00:16:55,656
to be completed for the day.


412
00:16:56,056 --> 00:16:57,566
Now there can be a
variety of assessments


413
00:16:57,616 --> 00:16:58,696
so let's take a look
at some of them.


414
00:16:59,786 --> 00:17:00,746
Here we have a pain survey.


415
00:17:00,866 --> 00:17:03,436
For this you can use the
survey module in a ResearchKit


416
00:17:03,436 --> 00:17:04,896
to present a beautifully
designed survey.


417
00:17:05,435 --> 00:17:07,496
They can be an active task.


418
00:17:08,006 --> 00:17:09,556
So you could launch
like a tapping test,


419
00:17:09,556 --> 00:17:11,576
or create a custom active
task using ResearchKit,


420
00:17:11,646 --> 00:17:12,826
such as the range of motion one.


421
00:17:14,465 --> 00:17:15,486
It can be self-reported.


422
00:17:15,576 --> 00:17:18,246
So you can present a view
controller, just like we did


423
00:17:18,246 --> 00:17:20,636
in the Texas Medical Center
app, where you can ask the user


424
00:17:20,636 --> 00:17:22,566
to take a photo of the
infection and report it back.


425
00:17:23,326 --> 00:17:24,965
And then it could be any data


426
00:17:24,965 --> 00:17:26,256
from a HealthKit or
Bluetooth device.


427
00:17:26,586 --> 00:17:28,465
So in the Texas Medical
Center app,


428
00:17:28,566 --> 00:17:30,366
John jumped onto
his smart scale,


429
00:17:30,436 --> 00:17:32,826
and it automatically updated
the data and CareKit app.


430
00:17:34,086 --> 00:17:36,046
So that's where the
delegate comes in.


431
00:17:36,086 --> 00:17:37,826
In order to present the
appropriate assessment,


432
00:17:37,826 --> 00:17:39,516
you have to implement the
Symptom Tracker delegate


433
00:17:39,916 --> 00:17:41,276
which provides a callback


434
00:17:41,276 --> 00:17:43,686
for the developer whenever the
user taps on an assessment cell.


435
00:17:44,286 --> 00:17:46,056
In this call back, you're
given the assessment event


436
00:17:46,116 --> 00:17:46,896
that they want to launch.


437
00:17:47,206 --> 00:17:48,776
And then you can determine
which view controller


438
00:17:48,776 --> 00:17:52,786
to present appropriately
at that point.


439
00:17:53,166 --> 00:17:54,766
Once you've presented
the view controller,


440
00:17:54,766 --> 00:17:56,616
let's say a pain survey,
you have to go ahead


441
00:17:56,616 --> 00:17:58,896
and use the data from that
and calculate a pain score,


442
00:17:59,676 --> 00:18:04,576
then you create a result object,
which takes in a value strength,


443
00:18:04,766 --> 00:18:07,866
an optional unit strength, and
then a user info dictionary


444
00:18:07,866 --> 00:18:10,316
for all the -- any additional
information you would need.


445
00:18:11,096 --> 00:18:13,306
And then you just update the
Care Plan Store with this event,


446
00:18:13,656 --> 00:18:15,966
the result object, the state
that it's entering into,


447
00:18:16,046 --> 00:18:17,946
and then use the completion
block for any error handling.


448
00:18:18,506 --> 00:18:23,496
And all that combined gives you
what you see here, the Symptom


449
00:18:23,496 --> 00:18:23,976
and Measurement Tracker.


450
00:18:24,516 --> 00:18:29,856
[ Applause ]


451
00:18:30,356 --> 00:18:32,496
The Insights Dashboard can use
data from the Care Plan Store


452
00:18:32,496 --> 00:18:33,956
to generate messages and charts.


453
00:18:34,336 --> 00:18:36,696
And this allows the user to
better understand the data


454
00:18:36,696 --> 00:18:37,696
that they're actually
looking at.


455
00:18:38,276 --> 00:18:42,166
So for us to make this easy
for developers to create,


456
00:18:42,166 --> 00:18:43,586
we've created what we
call insight items.


457
00:18:43,796 --> 00:18:45,876
You can plug and play those
into the Insight's Dashboard.


458
00:18:46,326 --> 00:18:48,966
And these also can include
messages such as tips or alerts.


459
00:18:49,606 --> 00:18:51,876
And they can also be charts
such as the grouped bar chart


460
00:18:51,876 --> 00:18:54,456
that we introduced in CareKit,
as well as any custom charts.


461
00:18:54,456 --> 00:18:55,496
So for example the charts


462
00:18:55,496 --> 00:18:57,746
from ResearchKit can
easily be subclassed


463
00:18:57,826 --> 00:18:58,806
into our chart object.


464
00:18:58,806 --> 00:19:03,036
So let's take a look at the
insight items in this dashboard.


465
00:19:04,486 --> 00:19:06,636
This is a medication
adherence message item.


466
00:19:06,946 --> 00:19:09,436
Message items help motivate
users to complete their care


467
00:19:09,476 --> 00:19:11,486
by surfacing valuable
information about their health.


468
00:19:12,246 --> 00:19:14,326
This message item is using
data from the Care Plan Store


469
00:19:14,436 --> 00:19:16,746
to calculate the adherence for
ibuprofen for the past week.


470
00:19:17,506 --> 00:19:19,846
These messages can also be
generated from a remote server,


471
00:19:19,846 --> 00:19:21,356
and then passed into
the Insights Dashboard.


472
00:19:21,576 --> 00:19:25,746
So let's look at the code on how
you can query the backend store.


473
00:19:26,446 --> 00:19:28,916
Here you can specify start
date and an end date.


474
00:19:29,406 --> 00:19:31,606
So I've used the beginning
of last week, Sunday,


475
00:19:31,606 --> 00:19:33,186
and the end of last
week, Saturday,


476
00:19:33,186 --> 00:19:34,096
as a start and end date.


477
00:19:34,546 --> 00:19:37,296
Then we can call the
enumerateEvents method


478
00:19:37,436 --> 00:19:39,676
on the Care Plan Store,
provide the activity we want


479
00:19:39,676 --> 00:19:42,506
to enumerate on, the dates
that we want to enumerate from


480
00:19:42,506 --> 00:19:45,526
and to, and then in the handler
we're given back all the events


481
00:19:45,526 --> 00:19:46,856
in the store for that activity.


482
00:19:47,496 --> 00:19:49,316
And then we can enumerate
through these events


483
00:19:49,316 --> 00:19:50,646
to check their state
to determine


484
00:19:50,646 --> 00:19:52,976
if they've been completed or
not, to calculate adherence.


485
00:19:53,546 --> 00:19:57,956
So let's say we calculated
the adherence now,


486
00:19:57,956 --> 00:19:59,426
and we want to go ahead
and create a message item.


487
00:20:00,396 --> 00:20:02,866
Here you will want to take the
adherence you've calculated,


488
00:20:03,076 --> 00:20:04,776
and turn it into a
user friendly message.


489
00:20:04,776 --> 00:20:06,176
So that it's easier
for the user to read,


490
00:20:06,176 --> 00:20:07,576
and actually gain
insights from it.


491
00:20:08,956 --> 00:20:09,656
And then you just create --


492
00:20:09,656 --> 00:20:12,476
initialize a message item with
a title, he message you would


493
00:20:12,476 --> 00:20:14,906
like to show, a color,
nd then the message type.


494
00:20:14,906 --> 00:20:15,976
For example, this one's a tip.


495
00:20:20,406 --> 00:20:22,366
Next we have a group bar
chart that allows you


496
00:20:22,366 --> 00:20:24,186
to present multi-series
data in a single chart.


497
00:20:24,836 --> 00:20:26,696
For example, in this
chart we have pain


498
00:20:26,696 --> 00:20:29,246
and ibuprofen mapped together
so the user can see their data


499
00:20:29,246 --> 00:20:31,336
in a way that allows
them to visualize trends


500
00:20:31,336 --> 00:20:32,776
and gaps in their care.


501
00:20:35,116 --> 00:20:37,336
So here I've defined a
variable called barChartItem.


502
00:20:37,516 --> 00:20:39,166
It's of type OCK insight ttem.


503
00:20:39,696 --> 00:20:42,036
A barChartItem consists
of series.


504
00:20:42,306 --> 00:20:44,236
In the one we just saw
there was a pain series


505
00:20:44,236 --> 00:20:45,266
and an ibuprofen series.


506
00:20:45,826 --> 00:20:46,966
So in order to create
this chart,


507
00:20:46,966 --> 00:20:48,136
we will define a pain series


508
00:20:48,136 --> 00:20:50,056
by initializing a bar
series with a title.


509
00:20:50,476 --> 00:20:52,666
And an array of numeric
values, and then an array


510
00:20:52,666 --> 00:20:54,416
of string values,
and the tint colors.


511
00:20:55,786 --> 00:20:56,536
Now the number of items


512
00:20:56,536 --> 00:20:58,336
in the array are not
limited by any means.


513
00:20:58,616 --> 00:21:00,856
So your chart can show
weekly data, monthly data,


514
00:21:00,856 --> 00:21:02,106
or any number of data points.


515
00:21:03,046 --> 00:21:05,506
The array of numeric values is
what determines a bar length


516
00:21:05,506 --> 00:21:05,966
on the chart.


517
00:21:06,316 --> 00:21:08,536
And the array of string values
shows up right next to each bar.


518
00:21:09,376 --> 00:21:10,666
Oftentimes these
are not the same.


519
00:21:11,136 --> 00:21:12,986
For example, in the
ibuprofen series,


520
00:21:13,056 --> 00:21:15,056
the numeric values determine
the length of the bar,


521
00:21:15,396 --> 00:21:16,796
but they don't represent
the data itself.


522
00:21:17,226 --> 00:21:19,286
For example, the 1-5-4 and so on


523
00:21:19,286 --> 00:21:21,446
and so forth can
easily be misunderstood


524
00:21:21,446 --> 00:21:23,796
to mean one tablet, five
tablets, or four tablets.


525
00:21:24,226 --> 00:21:26,636
Therefore, the value
labels help the user know


526
00:21:26,636 --> 00:21:28,536
that their medication is
adherence; 10 percent,


527
00:21:28,806 --> 00:21:30,106
50 percent, and 40 percent.


528
00:21:30,836 --> 00:21:33,516
So now that we have the
series that we need to show,


529
00:21:33,516 --> 00:21:35,476
we're going to go ahead and
initialize a bar chart item.


530
00:21:36,296 --> 00:21:38,446
Give it a title, a
text, a tint color.


531
00:21:38,446 --> 00:21:41,406
And we've got two arrays for
axis titles and axis subtitles


532
00:21:41,406 --> 00:21:42,886
that show up to the
left of each bar group.


533
00:21:42,886 --> 00:21:45,276
And then you can specify
all the data skews you would


534
00:21:45,276 --> 00:21:45,796
like to show.


535
00:21:45,886 --> 00:21:47,466
This could be one, two, or ten.


536
00:21:48,456 --> 00:21:49,876
Now there are two
optional parameters here


537
00:21:49,876 --> 00:21:50,576
which is the scale.


538
00:21:50,576 --> 00:21:52,886
The minimum scale range and
the maximum scale range.


539
00:21:53,006 --> 00:21:55,556
If you don't specify these, we
automatically generate it based


540
00:21:55,556 --> 00:21:56,526
on the data you've given us.


541
00:21:57,196 --> 00:21:59,626
But if you do, then be mindful
of what you specify here


542
00:21:59,626 --> 00:22:01,036
so that the data
doesn't seem skewed.


543
00:22:01,686 --> 00:22:03,876
For example, if you have data
points that are going from one


544
00:22:03,876 --> 00:22:06,706
to ten, and you specify a
scale that's from five to ten,


545
00:22:06,706 --> 00:22:08,726
then all the points that are
below five will now be visible


546
00:22:08,726 --> 00:22:09,246
to the user.


547
00:22:09,446 --> 00:22:13,046
And it will make the
data seem out of context.


548
00:22:13,556 --> 00:22:15,696
So we have a message
item we've created.


549
00:22:15,696 --> 00:22:16,756
And we have a chart item.


550
00:22:16,756 --> 00:22:18,716
Let's go ahead and create
the Insights Dashboard.


551
00:22:19,066 --> 00:22:20,566
You initialize the
InsightsViewController


552
00:22:20,566 --> 00:22:21,836
with an array of
these two items.


553
00:22:22,186 --> 00:22:24,156
Give it an optional
header and a subtitle.


554
00:22:24,566 --> 00:22:25,586
A title and a subtitle.


555
00:22:26,166 --> 00:22:28,236
And then you just present it,
and you get something like this.


556
00:22:29,516 --> 00:22:34,816
[ Applause ]


557
00:22:35,316 --> 00:22:36,746
And that's how you
create an Insights Module.


558
00:22:37,596 --> 00:22:39,716
So the next one is Connect.


559
00:22:40,586 --> 00:22:42,356
Connect allows you to
communicate and share your data


560
00:22:42,356 --> 00:22:43,806
with your care team and
your friends and family.


561
00:22:45,326 --> 00:22:47,346
So to make this easy as well,


562
00:22:47,636 --> 00:22:49,426
we've created what we
call CareKit contacts.


563
00:22:49,426 --> 00:22:50,556
And there are two types here.


564
00:22:51,476 --> 00:22:53,546
We've got a care team contact,
which is a physician or a nurse,


565
00:22:54,356 --> 00:22:56,256
or any other care team member.


566
00:22:56,316 --> 00:22:57,846
And then we have a
personal contact,


567
00:22:57,846 --> 00:22:59,606
which could be a close
friend or a family member.


568
00:23:00,486 --> 00:23:01,826
So if we look at
the Connect Module,


569
00:23:01,826 --> 00:23:03,136
these show up grouped
by their type.


570
00:23:04,216 --> 00:23:06,266
Here we have the care
team members up top.


571
00:23:06,846 --> 00:23:08,506
And then down below we have
the friends and family.


572
00:23:09,306 --> 00:23:11,036
So let's look at the code
on how we can create this.


573
00:23:13,226 --> 00:23:15,256
To create a physician
contact, you define a variable.


574
00:23:15,256 --> 00:23:17,306
PhysicianContact of
type, OCKContact.


575
00:23:17,306 --> 00:23:20,426
And then you just initialize the
contact object with the type,


576
00:23:20,426 --> 00:23:23,736
which is careTeam, the name,
the relation of the patient


577
00:23:23,736 --> 00:23:26,896
to this contact, the tint color,
and then we have phone number


578
00:23:26,896 --> 00:23:28,886
and message number, which
are CNPhoneNumber objects


579
00:23:28,956 --> 00:23:30,006
for formatting purposes.


580
00:23:30,976 --> 00:23:33,576
The email address is just a
string, and then a monogram


581
00:23:33,576 --> 00:23:35,666
to be shown if there's
no image, or the image


582
00:23:35,666 --> 00:23:37,376
to specify what the physician


583
00:23:37,376 --> 00:23:40,146
or the care team
contact looks like.


584
00:23:41,226 --> 00:23:42,676
Once you've created
all your contacts,


585
00:23:42,676 --> 00:23:45,126
you just initialize the connect
view controller with an array


586
00:23:45,126 --> 00:23:47,056
of all the contacts, and
then you just present it.


587
00:23:47,596 --> 00:23:49,726
But there's also a delegate
here that you need to implement,


588
00:23:49,726 --> 00:23:52,056
which we'll get to
in a little bit.


589
00:23:52,056 --> 00:23:53,936
And before we can present
this, you have to embed it


590
00:23:53,936 --> 00:23:55,846
in a navigation controller,
because we have master


591
00:23:55,846 --> 00:23:57,286
and detail views for
the Connect Module.


592
00:23:59,256 --> 00:24:01,296
So you will get a Connect
Module that looks like this


593
00:24:01,336 --> 00:24:02,436
with the Connect
View Controller.


594
00:24:03,496 --> 00:24:05,726
Now if we focus in on the
contact we just created,


595
00:24:05,726 --> 00:24:06,666
Dr. Paul Cashman.


596
00:24:07,176 --> 00:24:09,726
If we tap into the cell, it will
take you into the detail view


597
00:24:09,726 --> 00:24:11,096
where you get a contact
card for him.


598
00:24:11,906 --> 00:24:14,506
In this contact card, you see
all his contact information


599
00:24:14,506 --> 00:24:17,116
up top here, which shows you
how you call him, text him.


600
00:24:17,586 --> 00:24:19,286
Text message him, or
send him an email.


601
00:24:19,766 --> 00:24:22,656
And then down below is
the ability to share


602
00:24:22,656 --> 00:24:23,656
and send your reports with him.


603
00:24:24,356 --> 00:24:26,246
Now this is where the
delegate comes into play.


604
00:24:27,596 --> 00:24:30,696
The connect delegate
enables sharing the data


605
00:24:30,696 --> 00:24:31,406
with this contact.


606
00:24:31,716 --> 00:24:34,016
So for example, when the
user taps the share button,


607
00:24:34,496 --> 00:24:35,626
this method is called.


608
00:24:35,626 --> 00:24:37,696
And then you are given
the contact object


609
00:24:37,696 --> 00:24:39,616
from which you can determine
what kind of a report


610
00:24:39,616 --> 00:24:42,216
to generate and then you can
go ahead and share that report.


611
00:24:43,176 --> 00:24:44,796
Now this part is
actually quite tedious.


612
00:24:44,796 --> 00:24:46,256
To create the report
and to share it.


613
00:24:46,696 --> 00:24:48,846
So let's see what we can
do to make this easier.


614
00:24:49,916 --> 00:24:52,016
So to make the connect
module work hand --


615
00:24:52,086 --> 00:24:54,546
to make it easy to share
data with the connect module,


616
00:24:54,546 --> 00:24:55,986
we've created the
document exporter,


617
00:24:56,206 --> 00:24:58,106
which works hand-in-hand
with it.


618
00:24:58,666 --> 00:25:00,526
The document exporter
allows you to take the data


619
00:25:00,526 --> 00:25:01,536
from the Care Plan Store.


620
00:25:01,536 --> 00:25:05,056
And even other sources to create
a rich PDF that can be shared.


621
00:25:06,726 --> 00:25:08,666
And just like everything
else we've done in CareKit


622
00:25:08,666 --> 00:25:11,256
to make this easy, we've created
CareKit Document Elements.


623
00:25:12,026 --> 00:25:13,166
You've got headers and footers.


624
00:25:13,326 --> 00:25:19,286
We've got texts and paragraphs,
images, charts, and tables.


625
00:25:19,396 --> 00:25:21,386
And then combining
all of these together,


626
00:25:21,386 --> 00:25:23,976
you can create a rich
PDF that looks like this.


627
00:25:24,516 --> 00:25:30,106
[ Applause ]


628
00:25:30,606 --> 00:25:32,676
So as we can see in this
PDF we've got an image


629
00:25:32,676 --> 00:25:35,456
of the patient, a user friendly
summary of their progress,


630
00:25:35,956 --> 00:25:37,456
and now the same chart
that they were looking


631
00:25:37,456 --> 00:25:39,376
at in their Insights
Dashboard can be seen here


632
00:25:39,376 --> 00:25:41,326
by their provider, so that
they can all see the trends


633
00:25:41,326 --> 00:25:42,436
and gaps in their care.


634
00:25:43,116 --> 00:25:44,486
I know there's a
table that neatly lays


635
00:25:44,486 --> 00:25:46,076
out all the subjective
and objective measurements


636
00:25:46,076 --> 00:25:47,516
for these patients
on the previous week.


637
00:25:48,376 --> 00:25:50,076
So let's take a look at
the code to create this.


638
00:25:50,686 --> 00:25:52,996
We have a
DocumentElementPparagraph,


639
00:25:52,996 --> 00:25:54,116
which is just text content.


640
00:25:54,306 --> 00:25:55,616
This text content can also come


641
00:25:55,616 --> 00:25:57,626
from the Care Plan Store
or a remote source.


642
00:25:59,096 --> 00:26:01,396
Then we have a document
element chart


643
00:26:01,546 --> 00:26:04,076
which basically accepts the same
chart object that you created


644
00:26:04,076 --> 00:26:05,126
in the Insights Dashboard.


645
00:26:05,326 --> 00:26:06,906
So there's no need
to do any new code,


646
00:26:06,906 --> 00:26:08,136
or new chart generation here.


647
00:26:09,346 --> 00:26:12,376
Then we have a table here which
gives you an array of headers.


648
00:26:12,766 --> 00:26:16,496
And an array of arrays, in
which each array is a row


649
00:26:16,496 --> 00:26:17,566
of the data you want to show.


650
00:26:17,886 --> 00:26:19,836
For example, a weekly
data of the pain scores,


651
00:26:19,836 --> 00:26:22,416
or a weekly data of
tapping tests results.


652
00:26:23,056 --> 00:26:25,116
Then once you have all the
different elements you want


653
00:26:25,116 --> 00:26:27,206
to use in the document, you
initialize a document object.


654
00:26:27,576 --> 00:26:28,236
Give it a title.


655
00:26:28,296 --> 00:26:30,526
And then give it an array
of all the elements.


656
00:26:30,966 --> 00:26:33,226
And then turning
this document element


657
00:26:33,226 --> 00:26:34,796
into a PDF is really
straightforward.


658
00:26:34,796 --> 00:26:36,556
You just call the
createPDFData method.


659
00:26:36,966 --> 00:26:39,366
Use the NSData that's returned
to you in the completion block,


660
00:26:39,366 --> 00:26:40,536
and write it to a file URL.


661
00:26:40,536 --> 00:26:46,046
So now when the user taps the
share button, we can go ahead


662
00:26:46,046 --> 00:26:48,496
and generate the PDF using
the document exporter we just


663
00:26:48,496 --> 00:26:51,436
created, present it
to the user to preview


664
00:26:51,536 --> 00:26:54,526
so they know what they're about
to share, and then they can tap


665
00:26:54,526 --> 00:26:56,536
on the share button and then
bring up the share sheet


666
00:26:56,706 --> 00:26:58,696
to share this PDF with others
in the way they want to.


667
00:26:59,506 --> 00:27:02,726
And that's how the Document
Exporter works hand-in-hand


668
00:27:02,726 --> 00:27:04,626
with the Connect Module
to allow for data sharing.


669
00:27:06,516 --> 00:27:11,366
[ Applause ]


670
00:27:11,866 --> 00:27:13,266
So all these modules
come together


671
00:27:13,316 --> 00:27:14,586
and form the CareKit framework.


672
00:27:15,436 --> 00:27:17,656
So Patient PAL recently
transformed their entire patient


673
00:27:17,656 --> 00:27:18,996
care experience using CareKit.


674
00:27:18,996 --> 00:27:21,576
And I want to show you how
they've used customization


675
00:27:21,766 --> 00:27:23,056
to match their user experience


676
00:27:23,326 --> 00:27:24,926
and they've created
interventions and assessments


677
00:27:24,926 --> 00:27:26,296
to help their patients
improve their health.


678
00:27:27,836 --> 00:27:29,596
So their Care Card
replaces a heart


679
00:27:29,596 --> 00:27:31,286
with a custom image
of an exercise buddy.


680
00:27:31,866 --> 00:27:34,096
Their app is focused on
getting their patients


681
00:27:34,096 --> 00:27:35,766
to perform certain
exercises throughout the day.


682
00:27:37,096 --> 00:27:39,506
For example, if you focus on
the hip extension exercise,


683
00:27:39,716 --> 00:27:41,756
the pink one down
below, we will tap


684
00:27:41,756 --> 00:27:43,196
on the remaining
circle to complete it.


685
00:27:43,806 --> 00:27:45,406
But before it can be
marked as completed,


686
00:27:45,486 --> 00:27:46,866
we have to perform
this exercise.


687
00:27:47,776 --> 00:27:51,106
In this exercise task,
there's a nice description


688
00:27:51,106 --> 00:27:53,606
of the exercise along with a
video that the patient can watch


689
00:27:53,606 --> 00:27:55,396
to make sure they're performing
the exercise correctly.


690
00:27:56,186 --> 00:27:57,696
What's even nicer is
that they provide a way


691
00:27:57,696 --> 00:28:00,066
to record yourself while
you're performing the exercise


692
00:28:00,066 --> 00:28:01,566
so that the care provider
can see it as well.


693
00:28:01,666 --> 00:28:04,546
When you tap the
Watch Video button,


694
00:28:04,546 --> 00:28:05,936
it shows it embedded
within the task.


695
00:28:06,366 --> 00:28:08,016
And once you feel like you've
understood the exercise,


696
00:28:08,056 --> 00:28:09,946
you can tap Get Started
to start performing it.


697
00:28:10,206 --> 00:28:11,766
And then there's an
active task that walks you


698
00:28:11,766 --> 00:28:12,846
through each set and each rep.


699
00:28:14,646 --> 00:28:15,956
Once you've completed
the exercise,


700
00:28:15,956 --> 00:28:17,816
you can see under Care
Completion Progress updated


701
00:28:17,816 --> 00:28:18,636
to reflect the change.


702
00:28:18,846 --> 00:28:20,046
And now you've got a completion


703
00:28:20,296 --> 00:28:21,446
for that little circle
down there.


704
00:28:21,846 --> 00:28:23,416
So by default, we
don't provide --


705
00:28:23,416 --> 00:28:25,836
we provide detailed views for
each activity on the Care Card


706
00:28:26,206 --> 00:28:27,316
but you can implement
the delegate


707
00:28:27,496 --> 00:28:28,676
to provide your own as well.


708
00:28:28,946 --> 00:28:30,856
So one other thing that
they've customized here is


709
00:28:30,896 --> 00:28:34,466
that when the user taps on
one of the detail views here,


710
00:28:34,606 --> 00:28:37,306
for example the hamstring
stretch, it will go ahead


711
00:28:37,306 --> 00:28:39,316
and bring up a view controller


712
00:28:39,316 --> 00:28:41,266
that lets you send
reminders for these exercises.


713
00:28:41,816 --> 00:28:44,296
So there's the two
that I've already done.


714
00:28:44,296 --> 00:28:45,966
And then the third one,
I want to say that --


715
00:28:45,966 --> 00:28:47,776
go ahead and let's
do it at 8:00 pm.


716
00:28:48,726 --> 00:28:50,766
And now the app will go ahead
and me a push notification


717
00:28:50,766 --> 00:28:53,196
to come back in and perform this
exercise to complete my care.


718
00:28:54,236 --> 00:28:56,396
So CareKit provides a lot of
flexibility with this module,


719
00:28:56,516 --> 00:28:58,366
so that you can tailor
them to suite your needs.


720
00:28:58,986 --> 00:28:59,796
And these are some of the ones.


721
00:29:00,546 --> 00:29:03,586
So that brings me
to the last section,


722
00:29:03,586 --> 00:29:05,286
or slides What's
next for CareKit?


723
00:29:06,546 --> 00:29:09,096
Currently, CareKit allows you
to build patient centric apps.


724
00:29:10,246 --> 00:29:12,096
Next, we want to focus
on building the hooks


725
00:29:12,096 --> 00:29:13,906
between these apps and
the provider clouds


726
00:29:13,906 --> 00:29:16,716
and then also transmitting
that information from the cloud


727
00:29:16,716 --> 00:29:17,896
to the care team app or portal.


728
00:29:18,696 --> 00:29:20,166
This sort of infrastructure
can be seen


729
00:29:20,166 --> 00:29:23,346
in the Texas Medical Center app
as well as the Patient PAL app.


730
00:29:23,496 --> 00:29:26,266
What we would like is, as you're
building your CareKit apps


731
00:29:26,266 --> 00:29:29,036
and linking them to your cloud,
you build these hooks in a way


732
00:29:29,236 --> 00:29:32,526
that you can contribute
it back to the community.


733
00:29:32,916 --> 00:29:35,286
And other people who are using
similar cloud solutions can also


734
00:29:35,286 --> 00:29:37,386
benefit from it.


735
00:29:37,886 --> 00:29:39,006
CareKit is open source.


736
00:29:39,526 --> 00:29:40,976
It will become what
you make of it.


737
00:29:41,516 --> 00:29:44,936
[ Applause ]


738
00:29:45,436 --> 00:29:46,506
So please contribute.


739
00:29:46,666 --> 00:29:48,076
You can find the
project on GitHub.


740
00:29:48,536 --> 00:29:48,636
It's


741
00:29:48,636 --> 00:29:51,396
on github.com/carekit-apple/
carekit.


742
00:29:52,546 --> 00:29:55,276
So here's how you can help
us make CareKit even better.


743
00:29:56,036 --> 00:29:57,786
Your role involves checking


744
00:29:57,786 --> 00:29:59,296
out the issues section
on GitHub page.


745
00:29:59,736 --> 00:30:01,846
You can create a new issue or
you can choose an existing one,


746
00:30:02,156 --> 00:30:03,876
then develop the feature.


747
00:30:04,096 --> 00:30:05,696
Feel free to reach out
to us or the community


748
00:30:05,696 --> 00:30:07,416
with any questions you have
during the development.


749
00:30:08,186 --> 00:30:10,656
And then work with us through
the code review process.


750
00:30:10,656 --> 00:30:12,516
And this usually involves
you, the community,


751
00:30:12,516 --> 00:30:13,466
and the Apple engineers.


752
00:30:13,816 --> 00:30:16,206
And that's kind of where
our role also begins.


753
00:30:16,756 --> 00:30:18,686
Once you have facilitated with
the development and review


754
00:30:18,686 --> 00:30:20,236
of the feature, we'll
take it over


755
00:30:20,236 --> 00:30:22,796
and enhance the feature even
more by providing accessibility.


756
00:30:22,946 --> 00:30:26,366
We'll localize it for all the
languages we support in CareKit.


757
00:30:26,566 --> 00:30:29,936
And then we'll do QA testing
for all the supported platforms.


758
00:30:30,946 --> 00:30:33,016
We might ask for your help
during this process as well.


759
00:30:33,086 --> 00:30:35,216
And then once the feature's
ready, we'll go ahead


760
00:30:35,216 --> 00:30:36,196
and merge it into the framework.


761
00:30:36,806 --> 00:30:38,576
With CareKit we are
excited to see how all


762
00:30:38,576 --> 00:30:39,396
of us can work together


763
00:30:39,656 --> 00:30:41,666
to create this new
patient-provider experience.


764
00:30:43,336 --> 00:30:45,056
You can find more
information behind this URL.


765
00:30:45,186 --> 00:30:47,756
It includes links to our website
and the GitHub repository,


766
00:30:48,216 --> 00:30:50,116
as well as information on
how to get in touch with us


767
00:30:50,116 --> 00:30:51,326
if you have any technical
questions,


768
00:30:51,716 --> 00:30:52,996
or if you have a
great CareKit app idea


769
00:30:52,996 --> 00:30:55,396
that you would like to share.


770
00:30:55,846 --> 00:30:57,316
Be sure to check out
these related sessions


771
00:30:57,316 --> 00:30:58,756
that can help you
build your CareKit app.


772
00:30:59,306 --> 00:31:00,436
And thanks for coming
to this talk.


773
00:31:01,516 --> 00:31:06,500
[ Applause ]

