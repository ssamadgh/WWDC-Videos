1
00:00:24,516 --> 00:00:28,066
[Applause]


2
00:00:28,566 --> 00:00:29,226
>> JAKE BEHRENS: Good morning.


3
00:00:30,786 --> 00:00:32,936
Welcome to "WatchKit
Tips and Tricks."


4
00:00:32,996 --> 00:00:34,296
My name is Jake Behrens,


5
00:00:34,296 --> 00:00:36,946
and I am the watchOS
Frameworks Evangelist at Apple.


6
00:00:38,046 --> 00:00:40,456
Now, today we are going
to talk about various ways


7
00:00:40,456 --> 00:00:44,396
that you can optimize your
existing watchOS applications


8
00:00:44,396 --> 00:00:45,756
under watchOS 1.


9
00:00:45,926 --> 00:00:48,746
There are going to be many
things that we're going to talk


10
00:00:48,746 --> 00:00:52,666
about that are equally
applicable to watchOS 2,


11
00:00:52,666 --> 00:00:55,156
and I will point those
out as we move along.


12
00:00:55,156 --> 00:01:00,786
Now, leading up to the
release of Apple Watch,


13
00:01:01,376 --> 00:01:03,296
we worked with many developers


14
00:01:03,366 --> 00:01:06,326
on their first Watch
app experience,


15
00:01:07,606 --> 00:01:11,866
and we learned a lot along
that way, and today I am going


16
00:01:11,866 --> 00:01:13,736
to share a lot of this with you,


17
00:01:15,086 --> 00:01:17,466
things like optimizing
your networking,


18
00:01:17,946 --> 00:01:22,156
how you can decrease your
loading times, and much more.


19
00:01:23,536 --> 00:01:25,946
So let's start with
data and communication.


20
00:01:26,826 --> 00:01:30,036
As I mentioned previously,
this is essential


21
00:01:30,316 --> 00:01:33,216
for getting information
from your web service,


22
00:01:33,636 --> 00:01:37,026
or from the containing iPhone
app, so that you have something


23
00:01:37,026 --> 00:01:38,926
to actually display to the user.


24
00:01:40,946 --> 00:01:44,156
Now, imagine that your user
is waiting at the bus station.


25
00:01:44,766 --> 00:01:46,906
They raise their wrist,
they are interacting


26
00:01:46,906 --> 00:01:50,096
with your application, and you
kick off a network request.


27
00:01:51,026 --> 00:01:53,146
Suddenly, the bus comes
around the corner,


28
00:01:53,656 --> 00:01:55,516
so they put their arm
down, they get their stuff,


29
00:01:55,516 --> 00:01:59,096
they are hurrying to the
bus, and then they get


30
00:01:59,096 --> 00:02:00,276
on the bus and get settled.


31
00:02:01,046 --> 00:02:03,366
Well, you want to make
sure that the next time


32
00:02:03,366 --> 00:02:05,976
that they raise their wrist to
go back to your application,


33
00:02:06,286 --> 00:02:08,356
that that data is there
and waiting for them,


34
00:02:08,906 --> 00:02:11,166
not that you have to
refetch it all over again.


35
00:02:11,986 --> 00:02:13,576
So how do you do
this effectively?


36
00:02:14,446 --> 00:02:17,436
Well, the first part is you
need to have a network request.


37
00:02:18,116 --> 00:02:19,996
This is how you are going
to get your information.


38
00:02:19,996 --> 00:02:24,296
The next thing that you need
to do is you actually need


39
00:02:24,296 --> 00:02:27,016
to ask the system for
what's called a background


40
00:02:27,016 --> 00:02:28,036
task assertion.


41
00:02:28,616 --> 00:02:33,076
This is a way to ask the system
and say, 'hey, I need some time


42
00:02:33,616 --> 00:02:36,536
because I may need to finish
some process once you start


43
00:02:36,536 --> 00:02:38,356
suspending my WatchKit
extension.'


44
00:02:40,536 --> 00:02:44,176
Even further, if you get that
background task assertion,


45
00:02:44,506 --> 00:02:46,156
you are going to
need to hold it open


46
00:02:46,506 --> 00:02:49,226
so that your network
request actually finishes.


47
00:02:49,926 --> 00:02:52,706
So how are we going
to do these things?


48
00:02:53,166 --> 00:02:54,476
We are going to walk
through it together.


49
00:02:55,646 --> 00:02:56,996
The first thing that
you are going to need


50
00:02:56,996 --> 00:03:01,506
to do is get your network
request set up, and for this,


51
00:03:01,606 --> 00:03:04,346
we are going to use a
default NSURLSession.


52
00:03:05,276 --> 00:03:09,466
Now, recognize that I am not
using a background NSURLSession


53
00:03:09,816 --> 00:03:11,016
because in that case,


54
00:03:11,016 --> 00:03:13,086
if our WatchKit extension
was suspended,


55
00:03:13,356 --> 00:03:14,886
then the completion
would come back


56
00:03:14,976 --> 00:03:16,506
to our containing iPhone app.


57
00:03:17,056 --> 00:03:19,616
We want to do everything
we can right


58
00:03:19,616 --> 00:03:21,306
in the WatchKit extension
itself.


59
00:03:21,926 --> 00:03:26,286
So next we need to ask for
that background task assertion.


60
00:03:26,656 --> 00:03:28,426
How are we going to do that?


61
00:03:29,196 --> 00:03:34,746
We are going to do that by
using 'perform expiring activity


62
00:03:34,746 --> 00:03:38,316
with reason,' which is a
method on NSProcessInfo.


63
00:03:39,336 --> 00:03:42,976
This is going to ask the system
for a background task assertion


64
00:03:42,976 --> 00:03:46,546
and say, 'hey, I may need to
still do something once you go


65
00:03:46,546 --> 00:03:48,216
to suspend the WatchKit
extension.'


66
00:03:49,316 --> 00:03:53,636
So what happens is you
pass in a debugging string.


67
00:03:53,706 --> 00:03:54,956
Here it says networkReq.


68
00:03:55,736 --> 00:03:57,776
And then this block is executed.


69
00:03:58,586 --> 00:04:02,226
Now, this block is going
to be called immediately


70
00:04:02,426 --> 00:04:05,156
when 'perform expiring
activity with reason' is called.


71
00:04:05,936 --> 00:04:08,086
Now, there are some
things to keep in mind


72
00:04:08,086 --> 00:04:09,586
that are really important
about this.


73
00:04:10,196 --> 00:04:13,956
The first thing is that this
block is going to execute


74
00:04:13,956 --> 00:04:15,386
on an asynchronous queue.


75
00:04:16,216 --> 00:04:19,636
So your main queue is still
freed up, the user can interact


76
00:04:19,636 --> 00:04:21,505
with the interface,
there's no problem there.


77
00:04:21,815 --> 00:04:25,046
The user doesn't recognize that
anything different is going on.


78
00:04:26,086 --> 00:04:30,746
And if expired is set to
false, then that means


79
00:04:30,816 --> 00:04:32,906
that our time has not expired.


80
00:04:33,186 --> 00:04:36,406
So the system has given us
a background task assertion.


81
00:04:37,516 --> 00:04:40,766
However, if expired is
true, then this means


82
00:04:40,766 --> 00:04:42,156
that the system was unable


83
00:04:42,156 --> 00:04:44,146
to give us a background
task assertion.


84
00:04:44,846 --> 00:04:47,046
This means that it said no.


85
00:04:48,076 --> 00:04:51,676
However, if it said that we
did have a background task


86
00:04:51,676 --> 00:04:55,266
assertion, it could later
execute this block again


87
00:04:55,516 --> 00:04:59,846
with expired set to true because
maybe the system has decided we


88
00:04:59,846 --> 00:05:01,466
are completely out of time now.


89
00:05:02,096 --> 00:05:06,866
And so you're given a moment
to make sure that you clean


90
00:05:06,866 --> 00:05:08,236
up any state that you have.


91
00:05:08,576 --> 00:05:09,916
Or something that you may need


92
00:05:09,916 --> 00:05:12,656
to do before the WatchKit
extension fully suspends.


93
00:05:14,456 --> 00:05:18,536
So as I said, the key thing
here is that this block executes


94
00:05:18,536 --> 00:05:19,846
on an asynchronous queue.


95
00:05:20,416 --> 00:05:24,096
The second really
important piece of this is


96
00:05:24,096 --> 00:05:27,656
that once this block
finishes executing,


97
00:05:28,136 --> 00:05:30,206
then your time goes away.


98
00:05:30,456 --> 00:05:32,586
It gives up that
background task assertion.


99
00:05:33,286 --> 00:05:36,736
So how are we going
to actually make sure


100
00:05:36,736 --> 00:05:39,466
that we have enough time to
finish our network request?


101
00:05:40,356 --> 00:05:41,686
Could take two seconds.


102
00:05:42,036 --> 00:05:43,496
Could take ten seconds.


103
00:05:44,126 --> 00:05:44,876
Could take more.


104
00:05:45,576 --> 00:05:50,276
We are going to use something
called dispatch semaphore.


105
00:05:51,166 --> 00:05:54,966
Dispatch semaphore is part of
Grand Central Dispatch, or GCD,


106
00:05:54,966 --> 00:06:01,146
and this essentially allows us
a way to pause execution over on


107
00:06:01,146 --> 00:06:03,646
that asynchronous queue.


108
00:06:03,846 --> 00:06:06,836
So you call 'dispatch
semaphore wait,


109
00:06:07,206 --> 00:06:09,386
and that will pause execution.


110
00:06:10,046 --> 00:06:13,516
But then, when you need to
get going again and resume,


111
00:06:13,696 --> 00:06:15,966
you can call 'dispatch
semaphore signal.'


112
00:06:17,036 --> 00:06:19,426
Now, notice in the way
I'm passing in a time,


113
00:06:19,776 --> 00:06:21,546
this is essentially a time out.


114
00:06:22,366 --> 00:06:24,076
I have set it to
30 seconds here,


115
00:06:24,076 --> 00:06:26,126
and it could be any
number; however,


116
00:06:26,126 --> 00:06:29,486
I want to make sure that, you
know, once it hits 30 seconds,


117
00:06:29,936 --> 00:06:32,746
I should have either gotten my
data or I'm calling it lost.


118
00:06:33,376 --> 00:06:40,366
So this is a little abstract,
and it's a little bit


119
00:06:40,366 --> 00:06:41,666
of an advanced concept.


120
00:06:41,916 --> 00:06:51,436
So let's actually take a
look at the code in practice.


121
00:06:51,536 --> 00:06:57,586
Okay. So here I have a WatchKit
extension built for watchOS 1.


122
00:06:58,506 --> 00:07:01,976
And I am here in a subclass
WK interface controller.


123
00:07:03,006 --> 00:07:06,356
You can see that the first thing
that I do is I create a property


124
00:07:06,356 --> 00:07:08,376
for an NSURLSession data task.


125
00:07:09,066 --> 00:07:11,336
This is the data task
that we are going to use


126
00:07:11,756 --> 00:07:17,026
to get our information
down from our web service.


127
00:07:17,176 --> 00:07:19,186
Next in will activate --


128
00:07:19,636 --> 00:07:21,966
and realize you can do
this wherever you are going


129
00:07:21,966 --> 00:07:23,526
to do your networking code.


130
00:07:23,696 --> 00:07:25,866
For simplicity's
sake, in this example,


131
00:07:25,866 --> 00:07:27,586
I am doing it in will activate.


132
00:07:28,696 --> 00:07:31,846
First I am checking the state
of the data task, and I am going


133
00:07:31,846 --> 00:07:33,536
to see if it is already running,


134
00:07:34,266 --> 00:07:37,926
because if the user raised
their wrist, started interacting


135
00:07:37,926 --> 00:07:40,996
and kicked off a network
request, put their wrist down,


136
00:07:41,206 --> 00:07:44,826
had background time going, and
then raised their wrist again


137
00:07:44,826 --> 00:07:46,946
and it hadn't completed
yet, I don't want


138
00:07:46,946 --> 00:07:48,936
to just kick off
another network request.


139
00:07:49,556 --> 00:07:51,796
I only want to do
another network request


140
00:07:51,796 --> 00:07:53,456
if I don't currently
have one going.


141
00:07:53,456 --> 00:07:59,216
So next I am going
to create a URL,


142
00:07:59,216 --> 00:08:01,776
and now this is just
pointed to my web service.


143
00:08:01,776 --> 00:08:04,996
Here it's pointed to the
metadata on the App Store.


144
00:08:06,176 --> 00:08:09,706
Once I have this URL,
I create my semaphore


145
00:08:10,096 --> 00:08:12,096
by calling 'dispatch
semaphore create.'


146
00:08:14,056 --> 00:08:18,026
Next I am calling a method
that I wrote called 'ask


147
00:08:18,026 --> 00:08:19,596
for assertion with semaphore,


148
00:08:19,596 --> 00:08:21,806
passing in this newly
created semaphore.


149
00:08:23,116 --> 00:08:26,306
So if we look down here at
what's going on in this method,


150
00:08:26,496 --> 00:08:29,096
this is where we are actually
calling 'perform expiring


151
00:08:29,266 --> 00:08:30,336
activity with reason.'


152
00:08:30,516 --> 00:08:34,206
We are passing in our debugging
string, and if expired is set


153
00:08:34,206 --> 00:08:35,416
to false, then that means


154
00:08:35,466 --> 00:08:37,405
that we've gotten
some background time,


155
00:08:37,826 --> 00:08:40,176
and I am passing in my timeout,


156
00:08:40,385 --> 00:08:42,366
and I am calling
'dispatch semaphore wait.'


157
00:08:42,956 --> 00:08:46,036
Remember, this is going
to pause the execution


158
00:08:46,086 --> 00:08:47,556
of that asynchronous queue.


159
00:08:48,096 --> 00:08:51,736
The user can still interact with
the application, no problem.


160
00:08:51,896 --> 00:08:53,266
It's just holding there,


161
00:08:53,436 --> 00:08:55,376
ensuring that we
have enough time


162
00:08:55,666 --> 00:08:58,956
to finish our network request
if the WatchKit extension were


163
00:08:58,956 --> 00:09:00,146
to go into the background.


164
00:09:00,726 --> 00:09:04,636
Now, if expired is set to true,


165
00:09:04,836 --> 00:09:07,626
which means that we either were
not given a background task


166
00:09:07,626 --> 00:09:09,416
assertion or maybe we were


167
00:09:09,416 --> 00:09:12,896
but now the system has called it
again saying you're out of time,


168
00:09:13,316 --> 00:09:15,056
well, we're going
to call a method


169
00:09:15,056 --> 00:09:18,246
that I created called 'release
assertion with semaphore,


170
00:09:18,276 --> 00:09:20,256
again, passing in
that semaphore.


171
00:09:21,246 --> 00:09:24,096
And all this method does
is actually call 'dispatch


172
00:09:24,096 --> 00:09:25,146
semaphore signal.'


173
00:09:25,686 --> 00:09:29,976
This allows execution to
resume, and it allows the block


174
00:09:29,976 --> 00:09:33,996
to complete, and this is
also very crucial to call


175
00:09:33,996 --> 00:09:38,586
because if we halt execution for
too long, the system might think


176
00:09:38,586 --> 00:09:41,666
that our process has just
hung, and that's no good


177
00:09:41,906 --> 00:09:45,246
because eventually it's just
going to kill it outright.


178
00:09:45,596 --> 00:09:49,086
So we don't get any opportunity
to save state or do any cleanup.


179
00:09:49,406 --> 00:09:50,776
We just get killed.


180
00:09:50,776 --> 00:09:55,806
Okay. So let's go
back to will activate.


181
00:09:56,676 --> 00:09:58,656
So we've asked for
our task assertion.


182
00:09:58,656 --> 00:10:01,996
And the next thing we are going
to do is we are going to create


183
00:10:01,996 --> 00:10:04,226
that data task with
the URL that we have.


184
00:10:04,986 --> 00:10:07,466
Now, notice that I
am not gating this


185
00:10:07,466 --> 00:10:10,846
on whether I have a background
task assertion or not.


186
00:10:11,726 --> 00:10:14,706
The background task
assertion technique is a means


187
00:10:14,766 --> 00:10:16,936
to get some borrowed
time, right?


188
00:10:17,166 --> 00:10:19,886
I mean, it's not
guaranteed, but we're hoping


189
00:10:19,886 --> 00:10:21,356
for a better experience here.


190
00:10:21,746 --> 00:10:24,576
So I'm just going to
create my network request


191
00:10:24,576 --> 00:10:27,106
because probably the
user is interacting


192
00:10:27,316 --> 00:10:28,776
with the app at that time.


193
00:10:29,196 --> 00:10:31,626
The network request has
kicked off and come back


194
00:10:31,626 --> 00:10:33,786
in mere moments, and
everything's great.


195
00:10:35,176 --> 00:10:36,466
You'll also see here


196
00:10:36,466 --> 00:10:38,716
that there's a convenience
completion handler


197
00:10:38,786 --> 00:10:42,136
for the data task, so
when the request finishes,


198
00:10:42,136 --> 00:10:44,596
I am going to call in
to 'release assertion


199
00:10:44,596 --> 00:10:47,346
with semaphore,' passing
in that semaphore again.


200
00:10:47,816 --> 00:10:51,226
So we're allowing
execution to resume


201
00:10:51,226 --> 00:10:54,346
on that asynchronous queue,
which lets that block complete,


202
00:10:54,346 --> 00:10:57,046
and then the WatchKit
extension can fully suspend.


203
00:10:57,966 --> 00:11:00,646
This ensures that the
system doesn't think


204
00:11:00,726 --> 00:11:02,856
that our process has hung.


205
00:11:03,086 --> 00:11:06,026
Okay. So once we have
created our data task,


206
00:11:06,606 --> 00:11:08,566
then we are just going
to call resume on it


207
00:11:08,566 --> 00:11:11,166
to actually start it, so
it can go to the network,


208
00:11:11,556 --> 00:11:19,966
grab the information, and
we'll take care of the rest.


209
00:11:19,966 --> 00:11:25,986
So now you've seen a little
bit of a nice technique


210
00:11:25,986 --> 00:11:30,066
that you can use to try and do
all of your networking right


211
00:11:30,066 --> 00:11:32,826
from within the WatchKit
extension itself.


212
00:11:33,466 --> 00:11:37,196
This is really great because
moving on to watchOS 2,


213
00:11:37,706 --> 00:11:40,646
there's a whole lot of stuff for
you to take advantage of there.


214
00:11:40,646 --> 00:11:42,586
And we'll talk about
that in a little bit.


215
00:11:42,916 --> 00:11:45,796
But if you're already
moving your networking


216
00:11:45,876 --> 00:11:48,086
to the WatchKit extension
itself, this is going


217
00:11:48,086 --> 00:11:51,046
to prepare you so that things
are already broken apart.


218
00:11:51,496 --> 00:11:56,096
I've seen many examples where
open parent application is used


219
00:11:56,336 --> 00:11:59,406
to have the containing
iPhone app actually do all


220
00:12:00,006 --> 00:12:00,966
the networking.


221
00:12:00,996 --> 00:12:05,706
This breaks that bridge.


222
00:12:05,896 --> 00:12:10,206
Now, in some cases our data
isn't on a web service,


223
00:12:10,606 --> 00:12:14,406
and our data is actually in
the containing iPhone app


224
00:12:14,406 --> 00:12:15,666
and we need to get that.


225
00:12:15,926 --> 00:12:20,046
So we actually need to reach
across the process in watchOS 1


226
00:12:20,046 --> 00:12:23,346
from the WatchKit extension
to the containing iPhone app.


227
00:12:24,336 --> 00:12:27,596
We can do this by using
'open parent application,


228
00:12:27,986 --> 00:12:30,966
and this is a method on
WK interface controller


229
00:12:31,256 --> 00:12:34,026
that allows us to send a
dictionary of information


230
00:12:34,356 --> 00:12:37,396
over to the iPhone app,
launch it in the background,


231
00:12:37,726 --> 00:12:40,956
allow it to do some processing,
and then send a response.


232
00:12:42,536 --> 00:12:44,596
So on UI application delegate,


233
00:12:44,736 --> 00:12:47,806
we have 'handle WatchKit
extension request reply.'


234
00:12:48,556 --> 00:12:51,066
This is going to take in that
dictionary of information,


235
00:12:51,606 --> 00:12:54,996
do some processing, and
then send back a reply.


236
00:12:56,346 --> 00:12:58,926
There are some things to think
about when you are using this.


237
00:13:00,136 --> 00:13:03,806
First, if you are doing
any asynchronous work


238
00:13:03,806 --> 00:13:07,306
in 'handle WatchKit extension
request,' you should make sure


239
00:13:07,506 --> 00:13:10,126
that you're creating
a background task.


240
00:13:11,286 --> 00:13:12,536
You want to do that right away,


241
00:13:12,606 --> 00:13:14,246
right when you enter
into this method.


242
00:13:14,716 --> 00:13:17,676
The reason why is because
if you go off and decide


243
00:13:17,676 --> 00:13:20,316
to do some asynchronous
work, no matter how trivial,


244
00:13:20,626 --> 00:13:22,736
the system is going
to say, 'oh, well,


245
00:13:22,736 --> 00:13:25,726
I guess we are not actually
doing some work, so I am going


246
00:13:25,726 --> 00:13:28,326
to go ahead and suspend
the iPhone app.'


247
00:13:28,746 --> 00:13:30,236
And then you are not
going to get the chance


248
00:13:30,316 --> 00:13:32,186
to send the reply back.


249
00:13:32,896 --> 00:13:36,236
The other thing is when you
are going to send your reply,


250
00:13:36,896 --> 00:13:38,746
if you are using custom objects,


251
00:13:39,036 --> 00:13:41,586
you should be turning
those into NSData.


252
00:13:42,156 --> 00:13:45,386
If you have a custom binary
format that you can use,


253
00:13:45,436 --> 00:13:47,816
that you can unpackage in
the WatchKit extension,


254
00:13:47,986 --> 00:13:50,726
that's even better because
the name of the game here is


255
00:13:50,786 --> 00:13:53,226
to make the data as
small as possible


256
00:13:53,496 --> 00:13:58,236
so that transmission
is quickest.


257
00:13:58,336 --> 00:14:03,116
Now, for true device-to-device
communication, we've got a lot.


258
00:14:04,316 --> 00:14:07,296
Now, 'open parent application'
is marked as unavailable


259
00:14:07,296 --> 00:14:09,136
in watchOS 2, and this is


260
00:14:09,136 --> 00:14:10,926
because it's no longer
necessary.


261
00:14:11,226 --> 00:14:12,286
It's no longer needed.


262
00:14:12,776 --> 00:14:16,276
Because we now have the
WatchConnectivity framework.


263
00:14:16,976 --> 00:14:20,606
The WatchConnectivity
framework gives you so much.


264
00:14:21,116 --> 00:14:24,436
Not only can you send
messages between the iPhone app


265
00:14:24,436 --> 00:14:27,026
and the Watch app, but
you can transfer files.


266
00:14:27,376 --> 00:14:29,976
You can also -- and
should also --


267
00:14:30,246 --> 00:14:34,166
take advantage of the
application context.


268
00:14:34,936 --> 00:14:37,476
So you can update this context


269
00:14:37,476 --> 00:14:40,006
with whatever your
newest information is,


270
00:14:40,976 --> 00:14:44,246
and that allows you to get some
information in your Watch app


271
00:14:44,526 --> 00:14:47,506
from the network -- maybe it's
the latest in your feed --


272
00:14:48,116 --> 00:14:50,016
and then you can say, 'well,
the iPhone app is going


273
00:14:50,016 --> 00:14:52,436
to need this later, so I
am going to pass that off.'


274
00:14:52,756 --> 00:14:54,586
It's going to be
transferred over,


275
00:14:54,996 --> 00:14:56,896
but the iPhone app
isn't launched


276
00:14:56,946 --> 00:14:59,656
because it doesn't actually need
to process anything right now.


277
00:15:00,396 --> 00:15:02,676
So in this case, it's
just waiting there


278
00:15:02,796 --> 00:15:04,896
for next time the
iPhone app launches.


279
00:15:05,376 --> 00:15:07,466
This is a much more
efficient way


280
00:15:07,466 --> 00:15:10,076
to do your communication
between devices.


281
00:15:11,586 --> 00:15:13,646
Now, there's an awesome
session called


282
00:15:13,646 --> 00:15:15,366
"Introducing Watch
Connectivity,"


283
00:15:15,576 --> 00:15:18,256
and you should definitely check
it out if you haven't already.


284
00:15:20,576 --> 00:15:24,556
Now, once we have our data, then
we're going to want to manage it


285
00:15:24,876 --> 00:15:28,326
and take care of however
we need to have it on disk.


286
00:15:29,586 --> 00:15:31,776
Under watchOS 1, making use


287
00:15:31,776 --> 00:15:33,866
of app groups is a
great way to do this.


288
00:15:34,746 --> 00:15:36,966
You can use the shared
app group container


289
00:15:37,196 --> 00:15:40,446
to store some model data
or some shared assets


290
00:15:40,766 --> 00:15:42,716
that both the containing
iPhone app


291
00:15:42,836 --> 00:15:49,096
and the WatchKit extension
can both point to and find.


292
00:15:49,276 --> 00:15:52,906
Now, you can also use
shared NSUser defaults,


293
00:15:53,626 --> 00:15:57,246
but you should probably be
using this for small state data,


294
00:15:57,386 --> 00:15:59,886
like a Boolean configuration
or something like that,


295
00:16:00,236 --> 00:16:01,556
not for your model data.


296
00:16:01,866 --> 00:16:04,396
Your model data is
probably pretty large,


297
00:16:04,616 --> 00:16:09,646
and it's probably best if it's
sitting there as a flat file


298
00:16:09,646 --> 00:16:15,786
of some sort in your shared
container or in your data store.


299
00:16:15,986 --> 00:16:19,706
In general, for watchOS
1 or watchOS 2,


300
00:16:19,976 --> 00:16:23,226
you should definitely think
about simplifying your model.


301
00:16:24,426 --> 00:16:26,946
The experience on Apple
Watch is very different


302
00:16:26,946 --> 00:16:28,506
from the experience on iPhone.


303
00:16:28,886 --> 00:16:30,536
And so you want to make sure


304
00:16:30,536 --> 00:16:33,506
that you only are actually
getting the information there


305
00:16:33,506 --> 00:16:34,276
that you need.


306
00:16:35,326 --> 00:16:37,876
An example of this
is the WWDC app.


307
00:16:38,746 --> 00:16:41,536
So over the years
in the WWDC app,


308
00:16:41,756 --> 00:16:44,066
we've ended up adding
quite a few entities


309
00:16:44,106 --> 00:16:45,266
to our Core Data models.


310
00:16:46,386 --> 00:16:50,276
And when we went to go create
our experience for Apple Watch,


311
00:16:51,136 --> 00:16:52,446
I looked at it and I said, well,


312
00:16:52,976 --> 00:16:55,606
we don't actually need
all of this on the Watch.


313
00:16:56,236 --> 00:16:59,236
And so we discussed it, and we
realized at the end of the day


314
00:16:59,236 --> 00:17:02,556
that all we needed was a
simplified version of this data.


315
00:17:03,576 --> 00:17:06,286
We just needed a simple
list of the sessions,


316
00:17:06,396 --> 00:17:09,455
which are the sessions
and labs, and favorites.


317
00:17:11,076 --> 00:17:15,086
So what we did was we created a
process where any time the data


318
00:17:15,086 --> 00:17:16,925
in the containing
iPhone app changes,


319
00:17:17,386 --> 00:17:20,896
it exports a simplified
set of JSON files


320
00:17:20,896 --> 00:17:22,736
into the shared group container


321
00:17:23,026 --> 00:17:25,455
that the WatchKit
extension can then just read


322
00:17:25,455 --> 00:17:26,556
and display to you.


323
00:17:27,695 --> 00:17:31,226
This worked really well.


324
00:17:31,416 --> 00:17:32,646
One final means


325
00:17:32,726 --> 00:17:37,606
of device-to-device
communication is using Handoff.


326
00:17:38,366 --> 00:17:41,386
Handoff is an awesome
way to allow your user


327
00:17:41,386 --> 00:17:44,936
to continue an activity
from Apple Watch to iPhone.


328
00:17:46,086 --> 00:17:47,866
So an example of this would be,


329
00:17:48,116 --> 00:17:51,826
say you go to the WWDC
app on Apple Watch.


330
00:17:52,666 --> 00:17:55,956
Then you will notice on the
lock screen of the iPhone


331
00:17:56,116 --> 00:17:58,776
at specific areas,
you are going to see


332
00:17:58,776 --> 00:18:02,456
in the bottom left-hand corner
the icon for the WWDC app.


333
00:18:03,736 --> 00:18:06,496
Now, if you swipe up from
that bottom left-hand corner,


334
00:18:06,736 --> 00:18:09,066
it puts you exactly
where you need to be


335
00:18:09,306 --> 00:18:11,756
within the WWDC app on iPhone.


336
00:18:12,856 --> 00:18:14,786
This is really great for users.


337
00:18:16,776 --> 00:18:19,176
And using Handoff
is really simple.


338
00:18:20,566 --> 00:18:22,576
You use update user activity,


339
00:18:22,906 --> 00:18:24,986
which is on WK interface
controller,


340
00:18:25,586 --> 00:18:28,646
and you can send over,
for the user info,


341
00:18:28,646 --> 00:18:30,336
an NS dictionary of data.


342
00:18:30,766 --> 00:18:33,036
Now keep in mind that
this dictionary needs


343
00:18:33,096 --> 00:18:36,236
to include everything
that you may need in order


344
00:18:36,326 --> 00:18:38,966
for the iPhone app to
get the user exactly


345
00:18:38,966 --> 00:18:40,056
where they need to be.


346
00:18:40,446 --> 00:18:43,456
So whatever small data and
bits of data you need in there,


347
00:18:43,696 --> 00:18:46,166
you need to send that
across in that dictionary.


348
00:18:46,746 --> 00:18:53,066
Now, the system is going to do
a lot for you automatically,


349
00:18:53,446 --> 00:18:55,266
and one of those
things is it's going


350
00:18:55,266 --> 00:18:58,426
to automatically
invalidate the user activity


351
00:18:58,626 --> 00:18:59,836
after some moments.


352
00:19:00,646 --> 00:19:02,876
And so you don't
need to do anything.


353
00:19:02,926 --> 00:19:05,686
It's going to give the
user enough time to take


354
00:19:05,686 --> 00:19:08,016
out their phone, get to
where they need to be.


355
00:19:08,456 --> 00:19:11,416
Or if you call 'update
user activity' again,


356
00:19:11,656 --> 00:19:14,056
then that's going to be
the current activity.


357
00:19:14,676 --> 00:19:17,006
Or if they switch to
another application


358
00:19:17,196 --> 00:19:19,076
and that calls 'update
user activity,


359
00:19:19,226 --> 00:19:20,856
that will be the
current activity.


360
00:19:21,396 --> 00:19:25,586
Now, if you've called
'update user activity'


361
00:19:25,856 --> 00:19:28,826
but then the user is interacting
with your application,


362
00:19:29,196 --> 00:19:31,906
they tap a button and the
context really changes,


363
00:19:32,786 --> 00:19:35,356
you can actually manually
invalidate the user


364
00:19:35,356 --> 00:19:36,386
activity yourself.


365
00:19:37,956 --> 00:19:41,306
If that's not the situation,
you don't have to do anything.


366
00:19:41,886 --> 00:19:45,556
So that's enough about data.


367
00:19:46,786 --> 00:19:51,556
I hope that the technique for
watchOS 1 is useful for you,


368
00:19:51,706 --> 00:19:54,586
especially since it's
going to help you get


369
00:19:54,586 --> 00:19:55,686
through that migration


370
00:19:55,686 --> 00:19:58,996
to watchOS 2 once you start
using the WatchConnectivity


371
00:19:58,996 --> 00:19:59,916
framework over there.


372
00:20:01,136 --> 00:20:03,136
Now let's talk about
interface elements.


373
00:20:04,116 --> 00:20:05,656
The last thing that
you want your user


374
00:20:05,656 --> 00:20:10,816
to experience is the loading
indicator while you invent the


375
00:20:10,816 --> 00:20:13,376
world and you are
creating all this data,


376
00:20:13,376 --> 00:20:16,036
you are creating all these
things for a controller.


377
00:20:16,456 --> 00:20:18,946
Everything the user
may ever want or need.


378
00:20:19,546 --> 00:20:24,626
Let's look at some ways that we
can optimize that experience.


379
00:20:25,066 --> 00:20:26,656
How can we load quicker?


380
00:20:26,656 --> 00:20:30,666
One of the ways that
we can do this is


381
00:20:30,666 --> 00:20:34,896
by prioritizing how the
content loads and when it loads.


382
00:20:35,246 --> 00:20:38,616
So you can see here the
Weather app for watchOS 1,


383
00:20:39,116 --> 00:20:41,996
and we have this big,
beautiful ring of information.


384
00:20:42,656 --> 00:20:45,956
Right? And we want to get
this to the user immediately.


385
00:20:46,506 --> 00:20:50,096
But we also have
this 10-day forecast,


386
00:20:51,076 --> 00:20:53,986
and this 10-day forecast
includes additional images,


387
00:20:54,386 --> 00:20:58,506
table rows, data, and we don't
necessarily want the user


388
00:20:58,506 --> 00:21:01,726
to be waiting while we
load all of this as well.


389
00:21:03,156 --> 00:21:06,416
So we used a technique where
we load this 10-day forecast


390
00:21:06,786 --> 00:21:10,306
within a 'dispatch async'
call within will activate.


391
00:21:10,866 --> 00:21:14,516
Now, doing this allows
will activate to finish,


392
00:21:14,656 --> 00:21:16,066
and once we have that graphic,


393
00:21:16,246 --> 00:21:18,136
that's the first thing
that gets displayed.


394
00:21:18,496 --> 00:21:21,086
So we get that in will
activate, it finishes,


395
00:21:21,336 --> 00:21:24,146
and then that 10-day
forecast gets loaded,


396
00:21:24,276 --> 00:21:25,596
right immediately after.


397
00:21:25,656 --> 00:21:28,806
So the user doesn't actually
see anything different.


398
00:21:29,016 --> 00:21:30,656
By the time they go to scroll


399
00:21:30,656 --> 00:21:32,966
down to the 10-day
forecast, it's already there.


400
00:21:33,696 --> 00:21:36,646
But we've been able to
give this impression


401
00:21:36,646 --> 00:21:38,946
that all the data has
loaded immediately


402
00:21:38,946 --> 00:21:41,796
and a little bit quicker.


403
00:21:42,026 --> 00:21:45,236
Something else you can do is
load fewer table cells up front.


404
00:21:46,136 --> 00:21:49,816
Right? If you have really
complex cells that have images


405
00:21:49,816 --> 00:21:54,596
and data, then you might only
need four or five of these cells


406
00:21:54,596 --> 00:21:56,596
up front to display to the user.


407
00:21:57,046 --> 00:21:59,536
You're probably going to
be able to load in the rest


408
00:22:00,006 --> 00:22:01,416
after those have been loaded.


409
00:22:01,966 --> 00:22:05,526
So take a look at that.


410
00:22:05,726 --> 00:22:07,756
Also, only update
the information


411
00:22:07,756 --> 00:22:09,246
that has actually changed.


412
00:22:09,476 --> 00:22:11,976
I have seen many
occurrences where one tiny bit


413
00:22:11,976 --> 00:22:14,986
of data has changed and
everything is reloaded.


414
00:22:15,626 --> 00:22:16,736
There's no need for that.


415
00:22:17,046 --> 00:22:19,856
Just only update
what actually needs


416
00:22:19,856 --> 00:22:21,136
to be updated on the screen.


417
00:22:23,026 --> 00:22:26,546
Now, once we move into Interface
Builder, you can see here


418
00:22:26,546 --> 00:22:29,286
that I've started creating
my layout for a controller.


419
00:22:30,056 --> 00:22:32,556
And I'm using a lot
of different groups.


420
00:22:32,556 --> 00:22:34,486
I am hiding and showing
different groups


421
00:22:34,486 --> 00:22:37,686
because depending on
certain data or heuristics,


422
00:22:37,686 --> 00:22:42,296
I am only going to show one at
a time or maybe two at a time.


423
00:22:42,456 --> 00:22:45,306
But what happens is I actually
have all of these objects


424
00:22:45,306 --> 00:22:48,456
in my controller, which means
that the system is going


425
00:22:48,456 --> 00:22:50,436
to instantiate these
all up front


426
00:22:51,006 --> 00:22:53,896
because we actually don't know
when you are going to decide


427
00:22:53,896 --> 00:22:55,406
to hide things or show things.


428
00:22:55,866 --> 00:22:59,326
And so you can optimize this
a little bit in some scenarios


429
00:22:59,556 --> 00:23:02,046
by breaking these out
into separate controllers.


430
00:23:02,756 --> 00:23:05,506
If you have the ability to
load whichever controller you


431
00:23:05,506 --> 00:23:07,146
actually need when you need it,


432
00:23:07,436 --> 00:23:08,906
then that's going
to be most optimal.


433
00:23:12,016 --> 00:23:14,816
Now, moving through
our interface elements,


434
00:23:15,376 --> 00:23:18,806
one that you probably
use a lot are images.


435
00:23:19,686 --> 00:23:23,586
And images should be properly
sized from your server


436
00:23:23,776 --> 00:23:25,086
or the containing iPhone app.


437
00:23:25,986 --> 00:23:27,196
I've seen many cases


438
00:23:27,196 --> 00:23:30,096
where there's a bigger
image that's even bigger


439
00:23:30,096 --> 00:23:33,426
than the dimensions of
the 42-millimeter watch,


440
00:23:33,866 --> 00:23:36,926
and it's just reused
and rescaled everywhere.


441
00:23:37,696 --> 00:23:40,296
I mean, there is additional
performance implications here


442
00:23:40,296 --> 00:23:43,896
for the scaling, and also
that image isn't going to look


443
00:23:43,896 --> 00:23:46,166
as good as it could look
because you didn't give it


444
00:23:46,166 --> 00:23:48,186
at exactly the size
you needed to.


445
00:23:48,866 --> 00:23:51,706
So give properly sized assets.


446
00:23:52,306 --> 00:23:56,936
In watchOS 2, this also is
going to be crucial for video.


447
00:23:57,466 --> 00:24:01,916
You can also optimize
your images


448
00:24:02,306 --> 00:24:05,846
by using 'set image data'
instead of just 'set image.'


449
00:24:07,226 --> 00:24:10,176
In this case, 'set
image' is just going


450
00:24:10,176 --> 00:24:12,886
to use whatever default
compression we use.


451
00:24:13,716 --> 00:24:16,266
With 'set image data,'
you have the ability


452
00:24:16,336 --> 00:24:20,296
to have specific PNG
compression or JPG compression,


453
00:24:20,706 --> 00:24:23,716
and then that turns it
into this NS data blob


454
00:24:24,146 --> 00:24:26,116
for transmitting
over to the Watch.


455
00:24:26,406 --> 00:24:28,696
So you can ensure that
it's getting as small


456
00:24:28,696 --> 00:24:32,176
as you may need it to be.


457
00:24:32,176 --> 00:24:35,266
Also -- and I'm sure you have
heard people banging this drum


458
00:24:35,266 --> 00:24:37,206
-- you should be
using asset catalogs.


459
00:24:38,046 --> 00:24:40,846
Asset catalogs are
not only a great way


460
00:24:40,846 --> 00:24:44,006
to organize your content,
but they also do a lot


461
00:24:44,006 --> 00:24:45,206
of other things for you.


462
00:24:45,706 --> 00:24:50,626
You can set which specific
devices that this asset is for,


463
00:24:51,306 --> 00:24:56,146
and you can set and easily see,
'okay, I've got a 2x asset here,


464
00:24:56,536 --> 00:25:00,466
a version for 38 millimeter, and
a version for 42 millimeter.'


465
00:25:00,466 --> 00:25:06,096
Now, I have been asked by
many developers when and where


466
00:25:06,236 --> 00:25:07,886
to use each of these slots.


467
00:25:08,396 --> 00:25:09,716
So let's go through
these together.


468
00:25:10,866 --> 00:25:13,516
The first is the 2x asset.


469
00:25:13,586 --> 00:25:18,406
And this is going to be used for
an image that you want to use


470
00:25:18,606 --> 00:25:20,716
at the same size
on both devices.


471
00:25:21,216 --> 00:25:23,216
So if that's the case,
you can just put it


472
00:25:23,216 --> 00:25:25,326
in the 2x slot, you
are good to go.


473
00:25:25,326 --> 00:25:27,106
It will be used the
same everywhere.


474
00:25:27,656 --> 00:25:33,336
You can also provide a specific
asset for 38 millimeter.


475
00:25:34,406 --> 00:25:36,666
Now, this will probably
be the same image


476
00:25:36,666 --> 00:25:39,386
that you would have put in
the 2x slot, and that's okay.


477
00:25:39,976 --> 00:25:44,466
And then you can
provide a specific asset


478
00:25:44,466 --> 00:25:48,056
for 42 millimeter, which will
probably be a little larger,


479
00:25:48,056 --> 00:25:49,086
something will be different.


480
00:25:50,026 --> 00:25:53,146
Now, it's okay if you
have a 38 millimeter


481
00:25:53,146 --> 00:25:57,146
and a 42 millimeter version,
it's okay to have that 2x asset


482
00:25:57,146 --> 00:26:01,046
as well because we are going
to fall back to that asset.


483
00:26:01,376 --> 00:26:04,806
So if there's a situation
where we can't use that 38


484
00:26:04,806 --> 00:26:06,956
or 42 millimeter
version, we are going


485
00:26:06,956 --> 00:26:08,806
to fall back to that 2x asset.


486
00:26:09,646 --> 00:26:15,206
So that helps you
future-proof your code base.


487
00:26:15,406 --> 00:26:18,256
One other technique, and
we've found this really useful


488
00:26:18,256 --> 00:26:21,986
in the WWDC app, is using PDFs.


489
00:26:22,696 --> 00:26:26,716
By using PDFs you
can get a whole lot


490
00:26:26,996 --> 00:26:28,976
of free work out of the tools.


491
00:26:30,196 --> 00:26:32,406
First, you can set
the scale factors.


492
00:26:33,816 --> 00:26:37,546
You can also set the
type of image rendering


493
00:26:37,776 --> 00:26:40,796
as template image, so if
you are tinting this image,


494
00:26:40,996 --> 00:26:43,426
then it's just going to look
at the alpha value of the PDF.


495
00:26:44,986 --> 00:26:46,866
Or you can set it
to original image


496
00:26:46,956 --> 00:26:48,756
if you still want those colors


497
00:26:48,756 --> 00:26:51,136
that you specifically
put into your asset.


498
00:26:52,376 --> 00:26:57,896
The neat thing here is that when
the system builds your package,


499
00:26:57,936 --> 00:27:01,476
when you go ahead and build it,
we are going to cut this PDF


500
00:27:01,476 --> 00:27:04,966
at all the sizes and
scales that you need


501
00:27:04,966 --> 00:27:06,316
for the devices you support.


502
00:27:07,106 --> 00:27:09,006
So that's a whole lot
of work just free.


503
00:27:10,326 --> 00:27:12,926
The other cool thing is
that you can actually mix


504
00:27:12,926 --> 00:27:15,796
and match PDFs and bitmaps.


505
00:27:16,576 --> 00:27:20,406
So you could have that 2x
asset be a fall back PDF,


506
00:27:21,526 --> 00:27:26,076
and you can have very specific
assets as bitmaps for the 38


507
00:27:26,076 --> 00:27:27,676
and 42 millimeter versions.


508
00:27:30,836 --> 00:27:35,676
Moving from images, let's
talk about animated images.


509
00:27:36,286 --> 00:27:39,536
In watchOS 1, we have an
animated image sequence


510
00:27:39,886 --> 00:27:41,536
that you can take
full advantage of.


511
00:27:41,976 --> 00:27:43,926
You can do this in
watchOS 2 as well.


512
00:27:44,976 --> 00:27:48,046
Just know that if you have
multiple animated images


513
00:27:48,106 --> 00:27:50,756
on screen at the
same time, well,


514
00:27:50,756 --> 00:27:53,496
that means more processing
and more rendering.


515
00:27:54,056 --> 00:27:59,126
The other thing is that
you should try and reduce


516
00:27:59,636 --> 00:28:03,176
and restrain yourself
with the amount of frames


517
00:28:03,226 --> 00:28:05,036
that you have for an animation.


518
00:28:05,906 --> 00:28:09,236
Now, I have seen cases where
for a two-second animation,


519
00:28:09,236 --> 00:28:10,676
there are 300 frames.


520
00:28:11,446 --> 00:28:12,666
Seems a little overkill.


521
00:28:13,506 --> 00:28:16,406
You would be really
amazed with what you can do


522
00:28:16,406 --> 00:28:18,826
with fewer frames and still get


523
00:28:18,826 --> 00:28:20,366
that effect that
you really want.


524
00:28:20,766 --> 00:28:23,246
Another thing that you can do


525
00:28:23,246 --> 00:28:25,896
with these animated image
sequences is run them


526
00:28:25,896 --> 00:28:26,506
in reverse.


527
00:28:27,346 --> 00:28:29,646
You don't have to create
a whole other image set.


528
00:28:30,156 --> 00:28:32,426
You can just take one
that you are already using


529
00:28:32,656 --> 00:28:34,916
and set the duration
to a negative value.


530
00:28:35,996 --> 00:28:38,636
Now, you do this when
calling 'start animating


531
00:28:38,636 --> 00:28:39,886
with images in range.'


532
00:28:40,386 --> 00:28:42,406
You provide that
negative duration.


533
00:28:43,486 --> 00:28:46,576
Notice that my range is
still forward looking.


534
00:28:47,176 --> 00:28:50,466
It's going from location
0 to a length of 15.


535
00:28:50,606 --> 00:28:51,656
I haven't changed that.


536
00:28:52,496 --> 00:28:53,516
Just the duration.


537
00:28:54,126 --> 00:28:59,866
Now, if you like animations,
there are a lot of things


538
00:28:59,896 --> 00:29:01,776
that you can do under watchOS 2.


539
00:29:02,796 --> 00:29:05,916
With watchOS 2, we are
introducing an animation API


540
00:29:06,066 --> 00:29:10,596
as part of WatchKit, and this
allows you to make really fluid,


541
00:29:10,596 --> 00:29:12,706
great effects within
your Watch apps.


542
00:29:13,966 --> 00:29:16,866
This is similar to how
UIView animations work,


543
00:29:17,346 --> 00:29:20,506
so you have a duration that you
set, and then you have a block


544
00:29:20,506 --> 00:29:22,836
where you can reset
some properties


545
00:29:22,836 --> 00:29:24,556
and they'll all be
animated together.


546
00:29:25,766 --> 00:29:30,216
You can animate things such
as height, width, alpha,


547
00:29:30,576 --> 00:29:32,636
content insets, and much more.


548
00:29:32,986 --> 00:29:35,906
I've seen some really incredible
things that people have done


549
00:29:35,906 --> 00:29:39,686
with this so far, just using
spacer groups and moving items.


550
00:29:39,856 --> 00:29:41,046
It's really, really great.


551
00:29:42,346 --> 00:29:45,746
There's a lot more if you want
to check it out in "Layout


552
00:29:45,746 --> 00:29:47,666
and Animation Techniques
for WatchKit."


553
00:29:48,776 --> 00:29:53,956
And as far as the image
handling, I encourage you


554
00:29:53,956 --> 00:29:56,006
to check out the
"Apple Watch Design Tips


555
00:29:56,006 --> 00:29:57,246
and Tricks" session today.


556
00:29:57,616 --> 00:29:59,416
It's going to take a
lot of those aspects


557
00:29:59,416 --> 00:30:02,696
from the designer mentality,
and they are going to talk


558
00:30:02,696 --> 00:30:04,646
about a ton of other
great things


559
00:30:04,646 --> 00:30:06,286
that you can do and be aware of.


560
00:30:06,726 --> 00:30:09,006
So check it out.


561
00:30:09,286 --> 00:30:12,696
One final piece of
configuration is the use


562
00:30:12,696 --> 00:30:14,336
of the text input controller.


563
00:30:15,736 --> 00:30:18,736
Now, I've been asked by many
developers how can I get the


564
00:30:18,736 --> 00:30:23,266
user from my UI directly
into the dictation UI?


565
00:30:24,096 --> 00:30:27,836
They don't want their
users to be having to get


566
00:30:27,896 --> 00:30:30,666
to this intermediate screen
and tapping on the microphone.


567
00:30:31,056 --> 00:30:33,426
This is really, really
straightforward.


568
00:30:34,356 --> 00:30:37,046
All you do is when you call
'present text input controller


569
00:30:37,046 --> 00:30:39,946
with suggestions,' you set
the suggestions to nil,


570
00:30:40,596 --> 00:30:43,786
and then you set the
'allowed input mode' to plain.


571
00:30:44,676 --> 00:30:47,496
This is going to take the
user right from your app right


572
00:30:47,496 --> 00:30:51,016
into the dictation UI and then
right back to your app again.


573
00:30:51,666 --> 00:30:52,636
Super easy.


574
00:30:56,536 --> 00:30:59,026
So let's also talk
about notifications.


575
00:30:59,586 --> 00:31:02,946
Notifications are a really
meaningful experience


576
00:31:02,946 --> 00:31:05,736
on Apple Watch, and a
huge part of what makes it


577
00:31:05,866 --> 00:31:07,686
so convenient and so amazing.


578
00:31:08,246 --> 00:31:12,306
Let's take a look at
an example payload


579
00:31:12,616 --> 00:31:14,406
for a remote notification.


580
00:31:14,846 --> 00:31:17,136
Let's go over some things
that you should make sure


581
00:31:17,136 --> 00:31:20,116
that you are using in
order to deliver the best


582
00:31:20,116 --> 00:31:22,566
and greatest experience
to your user's wrist.


583
00:31:23,696 --> 00:31:25,556
The first thing to note is


584
00:31:25,556 --> 00:31:27,946
that you should be using
the dictionary value


585
00:31:27,946 --> 00:31:29,106
for the alert key.


586
00:31:29,926 --> 00:31:32,426
This allows you to not
only provide a body,


587
00:31:32,786 --> 00:31:34,676
but also a title.


588
00:31:35,666 --> 00:31:37,356
And this title is
going to be used


589
00:31:37,356 --> 00:31:38,986
in the short-look notification.


590
00:31:39,656 --> 00:31:43,446
So when the user receives the
notification on Apple Watch,


591
00:31:43,536 --> 00:31:47,376
the first thing that they are
going to see is your app's big


592
00:31:47,376 --> 00:31:50,176
and beautiful icon,
and then it's going


593
00:31:50,176 --> 00:31:51,796
to see your app name
at the bottom.


594
00:31:52,466 --> 00:31:55,306
If you've provided a title in
your payload, then you are going


595
00:31:55,306 --> 00:31:58,976
to see that title between
the icon and the app name.


596
00:31:59,676 --> 00:32:03,216
This is an amazing way to
provide a lot more context


597
00:32:03,936 --> 00:32:07,736
to the notification because a
lot of users are going to look


598
00:32:07,736 --> 00:32:10,456
at their wrist, they are
going to see that notification


599
00:32:10,516 --> 00:32:13,496
and decide off that information
whether they are going


600
00:32:13,496 --> 00:32:15,536
to continue to the
long-look notification


601
00:32:15,916 --> 00:32:18,256
or whether they are going to
put it down and visit it later


602
00:32:18,256 --> 00:32:19,436
in Notification Center.


603
00:32:20,396 --> 00:32:22,666
So take advantage of this.


604
00:32:23,596 --> 00:32:26,186
The other thing to be
using is the category.


605
00:32:26,796 --> 00:32:29,346
Categories allow you to specify


606
00:32:29,506 --> 00:32:33,686
which specific controller you
want to use from your storyboard


607
00:32:33,906 --> 00:32:36,096
for which type of notification.


608
00:32:36,926 --> 00:32:40,086
So if you click on the
notification category object,


609
00:32:40,506 --> 00:32:42,506
you can see here that
you can set its name


610
00:32:42,506 --> 00:32:46,896
to that same name used in
the payload, and so you can,


611
00:32:46,896 --> 00:32:51,256
per notification type, set a
sash color and a title color.


612
00:32:51,546 --> 00:32:55,666
So you can provide
other means of intricacy


613
00:32:55,666 --> 00:32:57,526
into your notifications


614
00:32:57,956 --> 00:32:59,886
to really give the user
a great experience.


615
00:33:00,546 --> 00:33:06,226
Now finally, if you want them
to receive the notification


616
00:33:06,426 --> 00:33:10,126
and hear that notification sound
and receive haptic feedback,


617
00:33:10,636 --> 00:33:13,886
you need to set the
sound value to default.


618
00:33:15,036 --> 00:33:16,406
This is going to make sure


619
00:33:16,676 --> 00:33:19,286
that they receive the
sound and feedback.


620
00:33:19,996 --> 00:33:24,486
Now, I'm excited to tell you
that you can do all of this


621
00:33:24,486 --> 00:33:26,546
with UI local notifications
as well.


622
00:33:27,076 --> 00:33:29,816
So it's not just for
remote notifications.


623
00:33:30,426 --> 00:33:36,426
Now, with notifications,
you have two concepts.


624
00:33:37,246 --> 00:33:39,616
The first is the
dynamic notification.


625
00:33:39,866 --> 00:33:42,226
Maybe you receive some
information in that payload,


626
00:33:42,436 --> 00:33:44,906
you need to process it,
you need to get an asset,


627
00:33:44,906 --> 00:33:47,296
you need to do something,
and then you load


628
00:33:47,296 --> 00:33:50,796
that more rich content into
your dynamic notification.


629
00:33:51,486 --> 00:33:53,466
There's also a static
notification,


630
00:33:53,816 --> 00:33:57,056
and I have been asked many
times where that's kind of used.


631
00:33:57,916 --> 00:34:01,426
So a static notification
is always going to be used


632
00:34:01,756 --> 00:34:03,046
from Notification Center.


633
00:34:03,686 --> 00:34:07,056
So if the user taps
on the notification


634
00:34:07,606 --> 00:34:08,906
from Notification Center,


635
00:34:08,985 --> 00:34:11,626
they will always see the
static representation.


636
00:34:12,045 --> 00:34:13,085
So you should make sure


637
00:34:13,085 --> 00:34:15,226
that that experience
is also a great one.


638
00:34:16,406 --> 00:34:19,196
The other time that the
static notification is going


639
00:34:19,196 --> 00:34:23,335
to be used is if your dynamic
notification is taking too long


640
00:34:23,335 --> 00:34:23,896
to load.


641
00:34:24,396 --> 00:34:27,956
Maybe you are processing some
data, retrieving some asset


642
00:34:27,956 --> 00:34:30,656
from the network, and
it's just taking too long.


643
00:34:31,016 --> 00:34:33,295
Then we're going to
just call it a loss


644
00:34:33,666 --> 00:34:36,496
and give the user some
meaningful information right now


645
00:34:36,735 --> 00:34:38,556
in the means of the
static notification.


646
00:34:39,146 --> 00:34:44,216
Now finally, let's
talk about Glances.


647
00:34:45,696 --> 00:34:49,936
With Glances, it's a great
way to provide your users


648
00:34:49,985 --> 00:34:53,036
with meaningful,
timely information.


649
00:34:54,485 --> 00:34:58,406
Now, maybe you've seen this,
where you come to a Glance


650
00:34:58,406 --> 00:35:01,526
that you haven't viewed in
a little while, and it shows


651
00:35:01,566 --> 00:35:03,416
that it's updating the content.


652
00:35:03,876 --> 00:35:07,636
You see this updated last
title string at the bottom,


653
00:35:07,896 --> 00:35:10,356
and you see this spinning
progress indicator


654
00:35:10,356 --> 00:35:11,196
in the top right.


655
00:35:12,316 --> 00:35:15,786
But maybe while it's been
loading, you've seen this.


656
00:35:16,896 --> 00:35:18,356
So let's see that again.


657
00:35:19,046 --> 00:35:21,646
You're loading in the content,
everything's going great,


658
00:35:21,686 --> 00:35:24,806
and then, oh, where did
content go, and then boom,


659
00:35:24,806 --> 00:35:26,756
it slams in when it updates.


660
00:35:28,096 --> 00:35:29,076
Why does this happen?


661
00:35:29,966 --> 00:35:32,936
This happens because 'will
activate' should be treated a


662
00:35:32,936 --> 00:35:35,636
little bit differently within
your Glance controller.


663
00:35:36,656 --> 00:35:37,926
So what happens is


664
00:35:37,926 --> 00:35:41,546
that system-provided snapshot is
going to be removed from the UI


665
00:35:41,546 --> 00:35:44,036
when 'will activate' finishes.


666
00:35:44,896 --> 00:35:49,056
So a little contrary to what you
do within the Watch app itself,


667
00:35:49,396 --> 00:35:50,946
here you want to make sure


668
00:35:50,946 --> 00:35:53,476
that you are doing your
full setup before 'will


669
00:35:53,636 --> 00:35:54,626
activate' finishes.


670
00:35:55,036 --> 00:35:56,866
You want to get all the
information you need,


671
00:35:57,246 --> 00:36:00,606
set it so that the UI is
up and ready to go so that


672
00:36:00,666 --> 00:36:03,576
when we remove that
snapshot, it's right there.


673
00:36:03,886 --> 00:36:07,406
There's no in-between state of
the whole screen disappearing.


674
00:36:07,676 --> 00:36:11,046
You might have placeholder
text in your storyboard


675
00:36:11,166 --> 00:36:13,086
that you might see or
something to that effect.


676
00:36:13,086 --> 00:36:15,776
That doesn't really
provide a great experience.


677
00:36:17,576 --> 00:36:20,086
The other thing that you
should do is reload the


678
00:36:20,086 --> 00:36:21,296
content deliberately.


679
00:36:21,756 --> 00:36:25,056
As a user is swiping
between Glances, well,


680
00:36:25,866 --> 00:36:28,176
'will activate' is going
to get called on yours,


681
00:36:28,176 --> 00:36:31,106
and so if they swipe past yours


682
00:36:31,106 --> 00:36:34,306
and in 'will activate' you're
loading a whole bunch of stuff,


683
00:36:34,336 --> 00:36:37,926
doing some processing, doing
a network request, well,


684
00:36:37,926 --> 00:36:40,206
that's probably not the
most efficient you could be


685
00:36:40,206 --> 00:36:40,726
doing that.


686
00:36:40,996 --> 00:36:43,986
So make sure that you are
reloading very deliberately,


687
00:36:44,176 --> 00:36:47,136
depending on other circumstances
and not just, 'hey,


688
00:36:47,136 --> 00:36:48,156
they looked at my content.'


689
00:36:48,676 --> 00:36:52,696
The other thing, as
in with Watch apps,


690
00:36:52,696 --> 00:36:54,656
is to limit the number
of alternate layouts.


691
00:36:55,146 --> 00:36:56,586
Because again, we
are going to need


692
00:36:56,586 --> 00:37:02,076
to instantiate all
those objects up front.


693
00:37:02,176 --> 00:37:05,726
Finally, you should be using
WK interface date labels


694
00:37:06,096 --> 00:37:10,116
or absolute times and dates
if you're displaying that kind


695
00:37:10,116 --> 00:37:11,496
of content in your Glance.


696
00:37:12,976 --> 00:37:14,876
So if you look here
at an example,


697
00:37:15,096 --> 00:37:18,046
it says that this session
started 35 minutes ago,


698
00:37:18,626 --> 00:37:23,226
and if this is at 1:00 p.m.,
well, it's kind of confusing.


699
00:37:23,226 --> 00:37:24,926
I am seeing that it's updating.


700
00:37:24,986 --> 00:37:27,126
I know. But it started
35 minutes ago,


701
00:37:27,126 --> 00:37:28,286
and it's giving me kind of like


702
00:37:28,356 --> 00:37:29,896
that knee-jerk reaction
of, like, wait.


703
00:37:30,236 --> 00:37:31,716
What time is it actually?


704
00:37:32,596 --> 00:37:36,516
So the better thing to do here
would be to give an absolute.


705
00:37:36,926 --> 00:37:38,616
It started at 10:00.


706
00:37:39,006 --> 00:37:42,196
This allows me already
that affordance of, 'oh,


707
00:37:42,196 --> 00:37:45,206
it was earlier today because
now it's 1:00 or 3:00.'


708
00:37:45,206 --> 00:37:46,476
I am not confused.


709
00:37:46,696 --> 00:37:50,766
That content is loading
in, and it's all good.


710
00:37:51,036 --> 00:37:53,996
So we've talked about
a lot of stuff.


711
00:37:54,736 --> 00:37:56,276
First, we talked about ways


712
00:37:56,276 --> 00:37:59,466
that you can already start
optimizing your watchOS 1


713
00:37:59,466 --> 00:38:02,376
application's networking
so that the transition


714
00:38:02,376 --> 00:38:04,446
to watchOS 2 is even easier,


715
00:38:04,806 --> 00:38:08,296
and hopefully this will really
help you in your application.


716
00:38:08,836 --> 00:38:12,436
Then we talked about ways that
you can improve your layouts


717
00:38:12,436 --> 00:38:15,466
for performance to
take down that amount


718
00:38:15,466 --> 00:38:17,576
of loading time and
do much more.


719
00:38:18,926 --> 00:38:21,156
Then we talked about
how to ensure


720
00:38:21,156 --> 00:38:23,476
that your Glance always
has content visible


721
00:38:23,766 --> 00:38:25,936
so that you are not
leaving an empty screen


722
00:38:25,936 --> 00:38:26,896
in front of the user.


723
00:38:28,636 --> 00:38:33,386
Finally, there's a ton to
check into in watchOS 2.


724
00:38:33,736 --> 00:38:39,106
Aside from updates to watchOS 2
in WatchKit, we've got ClockKit


725
00:38:39,166 --> 00:38:42,146
to create complications
for clock faces.


726
00:38:42,466 --> 00:38:44,896
We've also got the
WatchConnectivity framework


727
00:38:45,176 --> 00:38:47,916
to do all this device-to-device
communication.


728
00:38:48,186 --> 00:38:50,836
And you can still take
full advantage of NSURL


729
00:38:50,896 --> 00:38:52,626
from the WatchKit
extension itself.


730
00:38:54,516 --> 00:38:58,046
If you'd like more information,
we have great documentation.


731
00:38:58,276 --> 00:38:59,426
We've got sample code.


732
00:38:59,666 --> 00:39:03,106
If you have technical
questions, the Forums are there,


733
00:39:03,266 --> 00:39:06,356
as is Developer Technical
Support for one-on-one help.


734
00:39:07,176 --> 00:39:09,216
Finally, if you have
any general questions,


735
00:39:09,216 --> 00:39:10,606
please feel free
to reach out to me.


736
00:39:10,666 --> 00:39:11,566
My email is there.


737
00:39:13,036 --> 00:39:17,716
Today we still have one amazing
design session for Apple Watch,


738
00:39:17,796 --> 00:39:20,076
and that's "Apple Watch
Design Tips and Tricks."


739
00:39:20,216 --> 00:39:22,026
They are going to
go over a whole lot


740
00:39:22,026 --> 00:39:23,926
of really awesome information


741
00:39:24,166 --> 00:39:26,656
to help you create
great Watch apps.


742
00:39:27,466 --> 00:39:30,236
We also had the "Designing
for Apple Watch" session,


743
00:39:30,586 --> 00:39:34,446
the "Introduction to WatchKit
for watchOS 2," and much more.


744
00:39:34,476 --> 00:39:35,936
With that, thank you very much.


745
00:39:36,516 --> 00:39:39,500
[Applause]

