1
00:00:07,516 --> 00:00:19,000
[ Music ]


2
00:00:22,156 --> 00:00:22,756
>> Good afternoon.


3
00:00:23,176 --> 00:00:24,596
[ Applause ]


4
00:00:24,596 --> 00:00:25,016
>> Welcome.


5
00:00:28,136 --> 00:00:31,226
My name is Olivier Gutknecht
and I manage the UIKit team


6
00:00:31,846 --> 00:00:35,416
and today we're going to talk
about what's new in UIKit


7
00:00:36,206 --> 00:00:39,856
and other system
frameworks in iOS X.


8
00:00:40,696 --> 00:00:44,136
But first, I'd like
to talk about,


9
00:00:44,976 --> 00:00:48,456
what is not new, in Cocoa Touch.


10
00:00:49,786 --> 00:00:55,276
Why, since last WWDC,
we introduced a number


11
00:00:55,276 --> 00:00:56,666
of very important products.


12
00:00:58,026 --> 00:01:01,506
The iPhone 6S with 3D Touch.


13
00:01:01,846 --> 00:01:07,706
The iPad Pro 12.9
inch and 9.7 inch.


14
00:01:08,056 --> 00:01:11,616
The Apple Pencil, and
the Smart Keyboard.


15
00:01:12,726 --> 00:01:16,476
And, with these products
there is a number


16
00:01:16,476 --> 00:01:19,096
of key technologies
you can adopt


17
00:01:19,686 --> 00:01:21,616
to make your applications
really shine.


18
00:01:22,856 --> 00:01:25,856
The first thing that I want
to talk about is adaptivity.


19
00:01:26,636 --> 00:01:31,836
When we introduced adaptivity
2 years ago one thing


20
00:01:31,836 --> 00:01:35,306
that we introduced was the
concept of a size class.


21
00:01:36,306 --> 00:01:39,956
The iPhone was a
compact size class.


22
00:01:41,086 --> 00:01:43,426
The iPad is regular.


23
00:01:43,956 --> 00:01:47,506
And now we have the
12.9 inch iPad Pro,


24
00:01:48,676 --> 00:01:50,726
do we need gigantic size class?


25
00:01:52,296 --> 00:01:57,136
We don't. Because now
we have all the tools


26
00:01:57,776 --> 00:02:00,146
in the framework
to express that.


27
00:02:01,356 --> 00:02:02,816
We have the trait system


28
00:02:03,066 --> 00:02:06,526
which is how your application
will understand the context


29
00:02:06,686 --> 00:02:09,106
and environment of
your application.


30
00:02:09,476 --> 00:02:13,166
Size classes, that's one very
important trait but then,


31
00:02:13,786 --> 00:02:15,286
you have everything
you need to be able


32
00:02:15,286 --> 00:02:18,566
to build a size based
layout on these devices.


33
00:02:20,186 --> 00:02:22,926
We added new support
for size classes


34
00:02:23,826 --> 00:02:27,896
in Interface Builder and,
in the framework itself,


35
00:02:28,606 --> 00:02:32,546
from auto layout to asset
catalogs with dynamic type,


36
00:02:33,236 --> 00:02:35,536
with layout guide, and
even UI appearance,


37
00:02:36,076 --> 00:02:38,346
everything is ready
and fully integrated.


38
00:02:39,746 --> 00:02:42,146
We're going to have also,


39
00:02:42,506 --> 00:02:45,816
two sessions this week
making app adaptive.


40
00:02:46,086 --> 00:02:50,196
The first one's going to focus
fundamentals and the tools.


41
00:02:50,806 --> 00:02:54,096
And the second one,
will be about the API


42
00:02:54,096 --> 00:02:55,526
and the techniques you can use


43
00:02:55,826 --> 00:02:57,476
to make your application
adaptive.


44
00:02:58,276 --> 00:03:01,086
And this morning there was
an amazing, session focused


45
00:03:01,086 --> 00:03:03,256
on design, you should watch.


46
00:03:04,156 --> 00:03:08,766
The second thing that I'd like
to talk about is touch input.


47
00:03:10,076 --> 00:03:15,056
Last year, with the iPad
Air 2 and the iPad Pro now,


48
00:03:15,706 --> 00:03:18,416
we have 120 Hz touch scanning.


49
00:03:18,796 --> 00:03:22,656
We are scanning faster than
the screen refresh rate.


50
00:03:23,516 --> 00:03:27,216
And now, with Apple Pencil
we have additional properties


51
00:03:27,566 --> 00:03:31,206
on touches so you can get
orientation precise location,


52
00:03:31,636 --> 00:03:32,306
force.


53
00:03:33,576 --> 00:03:37,466
With iPhone 6S, you have
the same force information


54
00:03:37,466 --> 00:03:43,486
with 3D Touch and we shift
in our iOS 9, in our iOS 9.1.


55
00:03:43,486 --> 00:03:49,316
The APIs you need to build
amazing UIs with these devices.


56
00:03:49,706 --> 00:03:51,316
And Dominique Wagner is going


57
00:03:51,316 --> 00:03:54,726
to present how you can
leverage touch input on iOS.


58
00:03:58,116 --> 00:04:02,806
The last thing that I'd like to
mention is the Smart Keyboard.


59
00:04:03,786 --> 00:04:08,176
We have an API for you, so you
can express keyboard shortcuts


60
00:04:08,176 --> 00:04:12,316
in your apps, I think you have
more users than ever interacting


61
00:04:12,316 --> 00:04:14,256
with your application
with a keyboard.


62
00:04:14,986 --> 00:04:19,096
So you can have dynamic
in context shortcuts.


63
00:04:19,946 --> 00:04:22,036
The API for that is reasonable.


64
00:04:23,186 --> 00:04:26,096
It's actually, an API
that is new in our iOS 7.


65
00:04:27,186 --> 00:04:29,846
And it's important now
because since iOS 9,


66
00:04:30,396 --> 00:04:34,046
we can display these
beautiful automatic shortcuts


67
00:04:34,326 --> 00:04:38,736
when you hold the command key.


68
00:04:38,986 --> 00:04:43,446
Now, let's talk about what
is new in Cocoa Touch.


69
00:04:44,066 --> 00:04:46,686
I'd like to cover
four things today.


70
00:04:47,656 --> 00:04:52,496
One, the core technologies
you probably already use


71
00:04:52,496 --> 00:04:53,536
in your applications.


72
00:04:54,386 --> 00:04:59,886
And, we're going to discuss
how, with UIKit and other API,


73
00:05:00,286 --> 00:05:03,506
you can build better UIs
for your applications.


74
00:05:03,956 --> 00:05:07,396
We're going to show how
the new system features


75
00:05:07,436 --> 00:05:10,216
in iOS X can make your
application better.


76
00:05:11,566 --> 00:05:13,876
And, we're going
to conclude with,


77
00:05:14,076 --> 00:05:17,826
how your application
itself can extend the system


78
00:05:18,016 --> 00:05:19,446
with all new extension points.


79
00:05:21,586 --> 00:05:23,766
So let's talk about
these core technologies.


80
00:05:25,256 --> 00:05:29,356
Swift 3 is probably
the first thing here.


81
00:05:30,006 --> 00:05:36,296
Because with Swift 3, every
single API we have is new again.


82
00:05:36,926 --> 00:05:40,216
Because we change the rules,
we change how we translate


83
00:05:40,846 --> 00:05:43,926
from Objective-C to Swift.


84
00:05:43,926 --> 00:05:47,846
And we are doing that,
to make your code better


85
00:05:48,386 --> 00:05:52,466
so it can feel native really,
when writing that in Swift.


86
00:05:52,806 --> 00:05:55,526
So for instance, something
like preferred font,


87
00:05:56,136 --> 00:05:58,416
we are now using
the first argument


88
00:05:58,566 --> 00:06:00,736
to make the intent clear.


89
00:06:02,436 --> 00:06:05,456
We also try to not repeat
ourselves, UI Color,


90
00:06:05,456 --> 00:06:08,436
black color now is
just white or black.


91
00:06:10,476 --> 00:06:15,946
One thing that I really like
with Swift 3 is how APIs


92
00:06:15,946 --> 00:06:20,416
and core graphics
now really feel great


93
00:06:20,816 --> 00:06:22,856
when writing UIKit application.


94
00:06:23,906 --> 00:06:27,476
And, even something like,
grand central dispatch,


95
00:06:28,796 --> 00:06:32,296
is now a full object API.


96
00:06:34,096 --> 00:06:36,556
Let's talk about grand
central dispatch.


97
00:06:37,206 --> 00:06:42,956
There is a feature that I really
like, something very common


98
00:06:42,956 --> 00:06:45,906
with the dispatch is the
create your own private queue.


99
00:06:46,966 --> 00:06:53,046
And when queue work item to be
executed as synchronously and,


100
00:06:53,786 --> 00:06:58,346
a new thing in iOS X, is you
can actually set the queue


101
00:06:58,836 --> 00:07:04,046
to automatically wrap every work
item in an autorelease pool.


102
00:07:04,876 --> 00:07:07,926
It's real easy to do, you
just create a dispatch queue,


103
00:07:08,556 --> 00:07:11,946
and you pass the
autorelease work item.


104
00:07:12,606 --> 00:07:18,336
We have a full session on GCD,
and conquering programming.


105
00:07:21,046 --> 00:07:24,236
Foundation, foundation
also adapted a lot


106
00:07:24,236 --> 00:07:28,976
of Swift enhancement, we dropped
the MS prefix from many classes


107
00:07:29,356 --> 00:07:33,166
and we have a major new feature,
we are adding value types


108
00:07:33,606 --> 00:07:34,296
to the foundation API.


109
00:07:34,296 --> 00:07:36,626
It's not just that.


110
00:07:36,996 --> 00:07:40,096
We also have full
support for units


111
00:07:40,526 --> 00:07:42,356
and measurements in foundation.


112
00:07:43,766 --> 00:07:48,996
Another thing is a new date
formatter for the AP 601 format.


113
00:07:49,216 --> 00:07:51,176
If you know what AP 601 is,


114
00:07:51,176 --> 00:07:54,196
you're probably very
happy about that.


115
00:07:56,516 --> 00:07:59,546
[ Applause ]


116
00:08:00,046 --> 00:08:05,156
And another nice feature is how
we're making date computation


117
00:08:05,156 --> 00:08:07,536
better with new NS
date interval.


118
00:08:07,946 --> 00:08:09,666
We have two sessions
on foundation,


119
00:08:10,436 --> 00:08:11,926
What's New in Foundation
and Swift,


120
00:08:12,396 --> 00:08:14,066
and Measurements and Units.


121
00:08:16,056 --> 00:08:20,946
Yesterday, we announced
support for universal keyboard,


122
00:08:21,636 --> 00:08:25,586
copy on your Mac and
paste on your iOS device.


123
00:08:26,356 --> 00:08:28,466
So how do you use that
in your application?


124
00:08:29,276 --> 00:08:34,716
You just use the existing UI
Pasteboard API, that's it.


125
00:08:34,716 --> 00:08:36,056
There is one thing
you need to know.


126
00:08:38,275 --> 00:08:43,405
You might have to fetch a very
large asset on your device,


127
00:08:43,405 --> 00:08:46,016
if I do a copy of
a very big image,


128
00:08:46,726 --> 00:08:48,376
it might take a second or two.


129
00:08:48,376 --> 00:08:49,636
So you might see this UI.


130
00:08:50,426 --> 00:08:55,106
So to avoid, problem when
retrieving remote data,


131
00:08:55,296 --> 00:08:58,436
you should check first, if
you need that data or not.


132
00:08:58,436 --> 00:08:59,866
So you can avoid this UI.


133
00:08:59,866 --> 00:09:04,056
We added four new methods
to UI Pasteboard for that


134
00:09:04,376 --> 00:09:09,176
so you can easily check for
screen, URLs, images and colors.


135
00:09:11,616 --> 00:09:15,436
Another thing in
UI Pasteboard is


136
00:09:15,436 --> 00:09:19,326
that you can now control what
you publish on the pasteboard.


137
00:09:19,856 --> 00:09:25,366
So now you can restrict your
data, on the local device


138
00:09:25,986 --> 00:09:27,986
or set an expiration date.


139
00:09:29,516 --> 00:09:35,656
[ Applause ]


140
00:09:36,156 --> 00:09:38,726
Now I'd like to talk
about color.


141
00:09:40,736 --> 00:09:44,686
It's not a software feature,
it's really a hardware feature


142
00:09:44,686 --> 00:09:52,516
that we have now in the new iMac
5K, and the iPad Pro 9.7 inch.


143
00:09:53,906 --> 00:09:57,436
It's a technology shift, you can
now represent colors on screen


144
00:09:58,316 --> 00:10:00,856
that was not physically
possible before.


145
00:10:01,596 --> 00:10:06,786
And, we are changing how we
are going to represent colors.


146
00:10:07,886 --> 00:10:11,346
The iOS devices were using
the sRGB color space.


147
00:10:11,986 --> 00:10:13,706
Now with this device,
you're going to work


148
00:10:13,706 --> 00:10:16,326
in that extended
sRGB color space.


149
00:10:16,806 --> 00:10:17,936
So what does that mean for you?


150
00:10:18,946 --> 00:10:25,046
So first, iOS is actually
already color managed.


151
00:10:25,046 --> 00:10:30,466
iOS and [inaudible] and in
iOS X, we are exposing the API


152
00:10:30,466 --> 00:10:32,676
to work with a wide color range.


153
00:10:34,716 --> 00:10:37,486
The first way is to
just use UI Image View.


154
00:10:38,426 --> 00:10:41,086
UI Image View is actually
already color managed


155
00:10:41,256 --> 00:10:43,796
since iOS 9.3, so
you're ready there.


156
00:10:44,866 --> 00:10:46,416
What about UI Color?


157
00:10:47,876 --> 00:10:49,796
We made that very simple.


158
00:10:50,766 --> 00:10:55,376
We have one existing
initializer, in it with RGB.


159
00:10:56,786 --> 00:11:02,096
Second one, and new one,
in it with display P3 RGB.


160
00:11:03,136 --> 00:11:08,016
The first one is how you can
represent an arbitrary color


161
00:11:08,266 --> 00:11:10,606
in the extended sRGB space.


162
00:11:11,386 --> 00:11:15,016
So now you can express a
color that goes beyond the 0


163
00:11:15,016 --> 00:11:18,796
to 1 range, if you want
to go beyond classic sRGB.


164
00:11:20,046 --> 00:11:22,046
The second one displayP3,


165
00:11:22,536 --> 00:11:24,536
displayP3 is actually
a color display


166
00:11:24,536 --> 00:11:26,876
that is quite common
on the creation side.


167
00:11:26,876 --> 00:11:30,366
So if you receive a spec with
a wide color, it's very likely


168
00:11:30,366 --> 00:11:32,486
that you're going
to use displayP3


169
00:11:32,486 --> 00:11:36,306
which is why we made that,
initializer available.


170
00:11:36,566 --> 00:11:37,106
And that's it.


171
00:11:38,006 --> 00:11:39,886
We don't have a color
space class.


172
00:11:40,546 --> 00:11:47,146
You can just use these two
initiliazers and you're done.


173
00:11:48,096 --> 00:11:51,586
Now, I'd like to talk
about image rendering.


174
00:11:53,816 --> 00:11:57,676
Image rendering is something


175
00:11:57,676 --> 00:12:00,606
that you're probably
already using today


176
00:12:01,076 --> 00:12:03,646
with the UI graphics
begin image context,


177
00:12:04,086 --> 00:12:05,456
add image from text APIs.


178
00:12:05,456 --> 00:12:10,786
Kind of thing that you do in
direct on when you want to,


179
00:12:10,786 --> 00:12:12,466
render an image off screen.


180
00:12:13,056 --> 00:12:14,996
So there is one problem
with this API.


181
00:12:16,256 --> 00:12:21,496
It's actually 32 bits sRGB only,
that's a built in assumption.


182
00:12:22,226 --> 00:12:27,816
Also, that's not our best API,
it was there before the blocks


183
00:12:28,336 --> 00:12:30,616
and it's not really extensible.


184
00:12:30,616 --> 00:12:34,366
So, something that you're
writing with, the graphics,


185
00:12:34,416 --> 00:12:37,246
begin image context, API,
would look like that.


186
00:12:38,106 --> 00:12:40,786
And I don't know how many of
you already made the mistake


187
00:12:40,786 --> 00:12:44,056
of trying to get the image
after the begin image context.


188
00:12:44,626 --> 00:12:46,336
I'm definitely one.


189
00:12:46,696 --> 00:12:49,426
But now, we have a new class,


190
00:12:50,876 --> 00:12:52,756
the new UI graphics
render class.


191
00:12:52,756 --> 00:12:58,646
And what this is giving you is,
first, it's fully color managed.


192
00:12:59,686 --> 00:13:01,536
It's going to do the
right thing by default.


193
00:13:02,516 --> 00:13:06,986
If you're on a 9.7
inch iPad, you're going


194
00:13:06,986 --> 00:13:08,966
to get a wide color context.


195
00:13:09,446 --> 00:13:12,056
If you're not, you will
get the classic context.


196
00:13:12,876 --> 00:13:16,476
The other thing, it's
block based, easier to use.


197
00:13:17,066 --> 00:13:19,666
And, it's an object
based API so we have


198
00:13:19,666 --> 00:13:24,796
to increase our classes
for images and PDFs.


199
00:13:25,366 --> 00:13:27,876
Also, and that's
quite important,


200
00:13:28,756 --> 00:13:33,076
that class will manage the
lifetime of your context.


201
00:13:33,676 --> 00:13:36,276
Which means that we can do
some memory optimization


202
00:13:36,576 --> 00:13:37,146
under the hood.


203
00:13:37,476 --> 00:13:39,436
Let me give you an example.


204
00:13:40,316 --> 00:13:44,586
For that the equivalent
of the one before,


205
00:13:45,146 --> 00:13:46,486
you just create your renderer.


206
00:13:48,056 --> 00:13:51,256
You try to generate an
image, it's just a matter


207
00:13:51,256 --> 00:13:54,216
of passing the block, and
having your drawing code here.


208
00:13:54,606 --> 00:13:57,016
And the thing that's
really cool about that is,


209
00:13:57,626 --> 00:14:01,876
if you call again, the
image method here are going


210
00:14:01,876 --> 00:14:04,686
to just be used the
context again.


211
00:14:09,236 --> 00:14:17,546
A new feature related to
images is asset catalogs.


212
00:14:18,626 --> 00:14:23,466
With asset catalogs, we have
support for wide color assets,


213
00:14:24,366 --> 00:14:28,536
right to left and left to
right assets, and compression.


214
00:14:29,026 --> 00:14:31,116
And of course they're
fully integrated


215
00:14:31,386 --> 00:14:33,686
with the trait system in UIKit.


216
00:14:34,786 --> 00:14:37,016
So, let's see the first one.


217
00:14:38,066 --> 00:14:38,936
What color asset?


218
00:14:39,086 --> 00:14:40,546
So what do we want to do here?


219
00:14:41,406 --> 00:14:44,866
If you're embedding,
a wide color asset,


220
00:14:45,566 --> 00:14:48,696
in your application, you
want to be able to deploy


221
00:14:48,796 --> 00:14:51,116
on a non-wide color device.


222
00:14:51,876 --> 00:14:56,286
So what we are going to do is,
we're going to do a generation


223
00:14:56,326 --> 00:14:59,186
of sRGB variant automatically
for you.


224
00:14:59,976 --> 00:15:02,856
And that's going to be fully
compatible with App Thinning,


225
00:15:03,076 --> 00:15:05,626
so we're going to deploy
only what is needed


226
00:15:06,306 --> 00:15:11,646
on the right device.


227
00:15:12,046 --> 00:15:15,366
The other new feature in
asset catalog is compression.


228
00:15:17,036 --> 00:15:20,096
We added support for a
lossy compression scheme.


229
00:15:20,796 --> 00:15:26,466
And, it's going to automatically
pick, if you choose so,


230
00:15:27,056 --> 00:15:30,996
it's going to automatically
generate the right variants


231
00:15:30,996 --> 00:15:32,056
for a given device.


232
00:15:32,266 --> 00:15:37,416
So you will a great balance
between footprint and quality.


233
00:15:37,416 --> 00:15:41,526
And again, that's completely
compatible with App Thinning


234
00:15:41,526 --> 00:15:45,056
so we only deploy what is
needed on a given device.


235
00:15:46,916 --> 00:15:50,746
The last feature I
want to describe here


236
00:15:50,746 --> 00:15:53,296
for asset catalog
is the direction


237
00:15:53,296 --> 00:15:54,676
or image asset support.


238
00:15:56,286 --> 00:16:00,486
It means that now, directly
at the asset catalog level,


239
00:16:00,876 --> 00:16:05,056
you can specify that an
image should be an RTL asset


240
00:16:06,136 --> 00:16:08,786
or a left to right asset.


241
00:16:09,456 --> 00:16:11,416
Or something that should
be automatically flipped,


242
00:16:12,396 --> 00:16:14,206
directly in the asset
management system.


243
00:16:14,926 --> 00:16:19,606
We also have a full session on
international user interfaces,


244
00:16:20,296 --> 00:16:26,536
where you can learn more about
the improvements in iOS X.


245
00:16:26,776 --> 00:16:28,546
Now, I'd like to switch


246
00:16:28,546 --> 00:16:32,866
to how you can build
better user interfaces


247
00:16:33,216 --> 00:16:35,676
and interactions in iOS X.


248
00:16:37,176 --> 00:16:40,086
And the first thing is,
you need to make sure


249
00:16:41,176 --> 00:16:44,836
that everybody can interact
with your application.


250
00:16:45,656 --> 00:16:48,146
We have the new accessibility
inspector


251
00:16:48,146 --> 00:16:51,856
and one thing you can do with
that is, it's really great,


252
00:16:51,856 --> 00:16:54,936
you can connect to an
app and automatically,


253
00:16:55,206 --> 00:16:58,156
immediately know the
accessibility properties


254
00:16:58,826 --> 00:17:00,056
of a given UI element.


255
00:17:01,826 --> 00:17:03,426
There is another
really nice feature.


256
00:17:07,695 --> 00:17:12,346
You can also run an audit
on the application running


257
00:17:12,806 --> 00:17:14,276
in the simulator or your device.


258
00:17:14,576 --> 00:17:18,425
Just so you can have a
first hint about the kind


259
00:17:18,425 --> 00:17:22,226
of problems you might want to
fix, probably you really want


260
00:17:22,226 --> 00:17:24,006
to fix, with your application.


261
00:17:26,326 --> 00:17:32,086
One thing though, it's just like
Xcode if you have 0 warnings


262
00:17:32,336 --> 00:17:34,076
that doesn't mean that
your application is


263
00:17:34,076 --> 00:17:35,016
absolutely perfect.


264
00:17:35,716 --> 00:17:37,666
But, that's a great first step.


265
00:17:38,956 --> 00:17:41,366
We also have a new
way to interact


266
00:17:41,976 --> 00:17:45,866
with your applications in iOS X.


267
00:17:46,566 --> 00:17:50,246
We added a new gesture,
speech recognizer,


268
00:17:52,016 --> 00:17:56,546
[ Foreign Language ]


269
00:17:57,046 --> 00:17:58,226
And not just for English.


270
00:17:59,136 --> 00:18:01,226
And it's a very simple API.


271
00:18:02,626 --> 00:18:05,846
The SFSpeech recognizer,
is something


272
00:18:05,846 --> 00:18:08,756
that can do continuous
speech recognition.


273
00:18:09,676 --> 00:18:13,276
And, you can connect
it to an audio file


274
00:18:14,206 --> 00:18:16,146
or a live audio stream.


275
00:18:16,556 --> 00:18:22,936
So you can do real time,
speech recognition.


276
00:18:23,036 --> 00:18:27,666
You can configure it to have a
recognition that is optimized


277
00:18:27,986 --> 00:18:31,256
for dictation, or for
very simple strings.


278
00:18:32,336 --> 00:18:35,186
Just want to give you
an example of this API.


279
00:18:35,996 --> 00:18:39,876
You create a recognizer, you
configure it with a request,


280
00:18:40,656 --> 00:18:42,896
you start a task,
and we're going


281
00:18:42,896 --> 00:18:45,366
to call you back with results.


282
00:18:46,266 --> 00:18:47,356
Really easy to use.


283
00:18:47,896 --> 00:18:55,376
We have a video in line in
the WWDC app about this API.


284
00:18:55,616 --> 00:19:01,136
Another great improvement
in iOS X is text input.


285
00:19:02,166 --> 00:19:06,556
One thing you can do now is to
add information about the kind


286
00:19:06,556 --> 00:19:10,136
of content you have
in your text field.


287
00:19:10,966 --> 00:19:15,636
So, with that we can provide
intelligent suggestions


288
00:19:16,066 --> 00:19:16,776
in quick type.


289
00:19:17,066 --> 00:19:20,366
So for instance if my text
field is about location,


290
00:19:20,986 --> 00:19:23,636
I'm going to see an
address in quick type.


291
00:19:25,266 --> 00:19:30,726
We have many predefined
content types, for people,


292
00:19:30,916 --> 00:19:36,606
you can specify first name, last
name, full name, or locations,


293
00:19:36,786 --> 00:19:38,976
and in that case
that was configured


294
00:19:38,976 --> 00:19:41,816
as a full street address.


295
00:19:43,326 --> 00:19:47,236
Or even things like email,
telephone, credit card numbers.


296
00:19:50,276 --> 00:19:52,786
Another thing about text input


297
00:19:53,166 --> 00:19:57,266
and text is how you
can render text in iOS.


298
00:19:58,696 --> 00:20:03,676
In iOS 7 we added support for
dynamic type and in iOS X,


299
00:20:03,886 --> 00:20:06,996
we are making the
content size category


300
00:20:06,996 --> 00:20:08,726
for dynamic type, a trait.


301
00:20:09,866 --> 00:20:10,676
So what does that mean?


302
00:20:11,836 --> 00:20:16,636
Before iOS X the content size
category was just a property


303
00:20:16,846 --> 00:20:17,806
on UI application.


304
00:20:19,406 --> 00:20:23,136
And, you actually sent
the notifications.


305
00:20:23,996 --> 00:20:27,066
If the user was changing,
the content size,


306
00:20:27,066 --> 00:20:33,156
you had to react this
notification and update your UI.


307
00:20:33,346 --> 00:20:38,096
Now, because it's integrated
as a trait, it's available


308
00:20:38,546 --> 00:20:40,476
on view controllers which mean


309
00:20:40,476 --> 00:20:44,866
that you can use dynamic
type in all UI extensions.


310
00:20:47,216 --> 00:20:51,346
And we actually also added
support for dynamic type


311
00:20:51,796 --> 00:20:54,516
in existing elements
in new UIKit.


312
00:20:54,956 --> 00:21:00,716
So if you build your UI with
text field, text view, labels,


313
00:21:01,566 --> 00:21:06,206
and you want to react,
to the size change,


314
00:21:07,626 --> 00:21:10,906
now in iOS X you can
use new adjust font


315
00:21:11,566 --> 00:21:16,326
for content size category
and your label and text view,


316
00:21:16,486 --> 00:21:19,126
text field going to
just react to that.


317
00:21:19,926 --> 00:21:23,246
And your application, if you're
using audio app for instance,


318
00:21:23,636 --> 00:21:25,156
will update automatically.


319
00:21:25,646 --> 00:21:29,396
So I think that's a really
great feature for dynamic type,


320
00:21:29,396 --> 00:21:33,196
full automatic support, for
labels, and text fields.


321
00:21:34,516 --> 00:21:39,666
[ Applause ]


322
00:21:40,166 --> 00:21:45,136
We also wanted to add new
customization in UIKit.


323
00:21:45,456 --> 00:21:48,256
A good example is
the tab bar items,


324
00:21:48,776 --> 00:21:52,566
now you can customize the batch
colors and the text attributes


325
00:21:52,566 --> 00:21:57,096
in tab bar items, and you can
also customize the unselected


326
00:21:57,556 --> 00:21:58,036
theme color.


327
00:21:58,706 --> 00:22:01,286
So let's say that I
have a standard tab bar


328
00:22:01,486 --> 00:22:02,816
that is going to look like that.


329
00:22:03,566 --> 00:22:11,856
If I add this code, to my
application, that's going


330
00:22:11,856 --> 00:22:13,396
to be my new tab bar UI.


331
00:22:14,306 --> 00:22:16,836
Which is probably also
why I'm not a designer.


332
00:22:17,516 --> 00:22:24,806
[ Applause ]


333
00:22:25,306 --> 00:22:27,766
Another great customization,
in web views.


334
00:22:28,986 --> 00:22:33,636
When we ship Peek and
Pop for 3D Touch iPhones,


335
00:22:34,646 --> 00:22:37,906
we had a very simple API in
UIKit for view controllers.


336
00:22:38,266 --> 00:22:41,466
And we had built in
support, WK web view.


337
00:22:42,316 --> 00:22:46,816
And now in iOS X, you
have fine control of Peek


338
00:22:46,816 --> 00:22:49,346
and Pop behaviors
in the web view,


339
00:22:49,346 --> 00:22:53,816
which means that you can
use custom view controllers


340
00:22:54,176 --> 00:22:55,076
when doing a Peek.


341
00:22:55,696 --> 00:23:00,386
And you can have preview
actions, and a great consequence


342
00:23:00,386 --> 00:23:04,226
of that is, when you Pop in
a web view, you can decide


343
00:23:04,226 --> 00:23:06,556
to stay inside your application.


344
00:23:07,276 --> 00:23:13,036
It's available as new delegate
methods on the web view class.


345
00:23:14,416 --> 00:23:17,966
But, the thing that I'm really
excited about for Peek and Pop,


346
00:23:18,436 --> 00:23:22,146
is the new UI preview
interaction class.


347
00:23:22,586 --> 00:23:27,486
So, Peek and Pop in UIKit,
is really two things.


348
00:23:28,676 --> 00:23:33,646
There is a look, this blur
effect, this nice animation


349
00:23:33,646 --> 00:23:35,626
when you want to
preview something.


350
00:23:36,716 --> 00:23:40,706
And there is a feel, how
do we react, to pressure,


351
00:23:40,946 --> 00:23:44,476
how do we detect the intent
of the user, is that attack,


352
00:23:44,476 --> 00:23:46,466
a scroll, the beginning
of a Peek?


353
00:23:47,426 --> 00:23:50,866
With UI preview interaction,
what you can do is


354
00:23:51,246 --> 00:23:55,146
to use a UIKit provided
implementation for the feel,


355
00:23:56,026 --> 00:23:58,436
but have your own
animation for Peek and Pop.


356
00:23:59,446 --> 00:24:04,566
And, that's just a new delegate
on that class, so you can know


357
00:24:04,566 --> 00:24:07,196
when you move from Peek
to Pop, and we are going


358
00:24:07,196 --> 00:24:10,506
to give you the progress,
the progression progress


359
00:24:10,506 --> 00:24:14,386
so you can plug your own
interaction, your own animation.


360
00:24:14,386 --> 00:24:16,886
You can do completely
custom Peek


361
00:24:16,886 --> 00:24:18,916
and Pop UI we think
that's a really big deal.


362
00:24:20,516 --> 00:24:23,876
[ Applause ]


363
00:24:24,376 --> 00:24:28,296
If you want to learn everything
about Peek and Pop and 3D Touch,


364
00:24:28,296 --> 00:24:34,896
we have a full session
here on Thursday at 4 p.m.


365
00:24:35,106 --> 00:24:39,386
Another new thing is
something that we added


366
00:24:39,416 --> 00:24:41,646
in scroll views that
you asked for.


367
00:24:41,646 --> 00:24:46,816
And it's actually full support
for the UI refresh control.


368
00:24:48,516 --> 00:24:53,156
[ Applause ]


369
00:24:53,656 --> 00:24:55,896
It's available on
UI scroll view,


370
00:24:56,696 --> 00:24:58,096
and scroll view of classes.


371
00:24:58,436 --> 00:25:02,006
So we already had support for
table view and refresh control,


372
00:25:02,006 --> 00:25:05,466
so it mean that now you
can use refresh control


373
00:25:05,796 --> 00:25:06,756
in correction views.


374
00:25:08,886 --> 00:25:11,106
Let's talk about
collection view.


375
00:25:12,256 --> 00:25:14,236
That's a great feature in UIKit.


376
00:25:15,316 --> 00:25:18,676
And last year we added support


377
00:25:18,676 --> 00:25:23,126
for automatic self-sizing
cells in flow layout.


378
00:25:24,246 --> 00:25:25,696
What you had to do before is,


379
00:25:25,696 --> 00:25:28,926
you had to compute
that estimated size.


380
00:25:29,936 --> 00:25:32,206
And sometimes it's not easy but,


381
00:25:32,316 --> 00:25:35,986
at the UIKit level we know
what cells are going on screen.


382
00:25:36,406 --> 00:25:38,806
So we have a new
mode in flow layout,


383
00:25:38,806 --> 00:25:42,086
so you can pass automatic
and we're going to do


384
00:25:42,086 --> 00:25:44,726
that estimation for you,
you don't need to try to do


385
00:25:44,726 --> 00:25:46,476
that estimation anymore.


386
00:25:47,516 --> 00:25:53,546
[ Applause ]


387
00:25:54,046 --> 00:25:55,806
Do you know that we
have reordering support


388
00:25:55,806 --> 00:25:56,676
in UI correction view?


389
00:25:57,306 --> 00:25:59,636
We do. And we are improving


390
00:25:59,636 --> 00:26:03,706
that by adding paging
support in collection view.


391
00:26:04,366 --> 00:26:07,276
That's something that is exposed
at the scroll view level,


392
00:26:07,276 --> 00:26:10,256
and correction view will now
do the right thing for you.


393
00:26:11,656 --> 00:26:16,776
But, one feature this year,
that I'm really excited


394
00:26:16,776 --> 00:26:19,576
about for collection view
is, smooth scrolling.


395
00:26:20,906 --> 00:26:23,316
It's a real simple,
and smart idea.


396
00:26:24,156 --> 00:26:28,826
So, if I have a grid,
in a collection view,


397
00:26:29,126 --> 00:26:31,336
and I'm going to
scroll that grid.


398
00:26:32,786 --> 00:26:37,506
At some point, I'm going to
need to bring three cells


399
00:26:38,076 --> 00:26:40,106
on screen at the same time.


400
00:26:40,756 --> 00:26:45,566
And if your cells are a
little bit complex to layout,


401
00:26:45,976 --> 00:26:48,936
it might take some time
and you might rob a frame.


402
00:26:49,996 --> 00:26:50,586
That's not great.


403
00:26:51,506 --> 00:26:55,496
So what we are doing
now, is something


404
00:26:55,496 --> 00:26:57,146
that we call cell prefetching.


405
00:26:58,756 --> 00:27:04,586
The idea here is before we
actually need a cell on screen,


406
00:27:05,306 --> 00:27:08,826
we're going to ask you for
that cell, and we are not going


407
00:27:08,826 --> 00:27:14,246
to ask for a cell as a block
of cell like an entire row.


408
00:27:14,246 --> 00:27:17,656
We're going to ask for one
cell, then another and another.


409
00:27:17,876 --> 00:27:22,566
So we're going to, amortize
the cost for the cell set


410
00:27:22,566 --> 00:27:24,146
up in your application.


411
00:27:25,916 --> 00:27:28,686
A great thing about
that it's automatic.


412
00:27:28,686 --> 00:27:32,486
If you rebuild your
application for iOS X,


413
00:27:32,886 --> 00:27:35,236
you get that behavior
completely for free.


414
00:27:36,516 --> 00:27:43,936
[ Applause ]


415
00:27:44,436 --> 00:27:45,576
But there is more.


416
00:27:47,276 --> 00:27:54,016
We have a new protocol, we
call that data prefetching.


417
00:27:54,916 --> 00:27:57,026
Because sometimes, it's not just


418
00:27:57,026 --> 00:27:59,556
about doing the layout
for your cell.


419
00:28:00,266 --> 00:28:01,806
Sometimes you need
to fetch data.


420
00:28:03,116 --> 00:28:04,296
You need to read from the disc.


421
00:28:04,596 --> 00:28:08,516
You need to fetch data from the
network so it would be great


422
00:28:08,516 --> 00:28:12,396
if we could tell you hey, we are
going to need that index fast.


423
00:28:13,306 --> 00:28:15,316
So you can prepare, in advance.


424
00:28:17,006 --> 00:28:18,836
That's exactly what
this new protocol does.


425
00:28:19,336 --> 00:28:22,966
You implement a few delegate
methods, we're going to tell you


426
00:28:22,966 --> 00:28:27,066
when we, are about
to ask for a cell


427
00:28:27,066 --> 00:28:28,626
so you can have the data ready.


428
00:28:29,086 --> 00:28:31,836
So that's going to improve,
again, the performance


429
00:28:31,836 --> 00:28:33,926
of your collection
view based application.


430
00:28:34,816 --> 00:28:38,506
And, we made also that
available on table views.


431
00:28:40,516 --> 00:28:45,500
[ Applause ]


432
00:28:51,006 --> 00:28:55,206
We have an entire session
about new UI collection view,


433
00:28:55,586 --> 00:28:57,846
cell prefetching,
data prefetching,


434
00:28:58,056 --> 00:29:03,206
reordering, don't miss this one.


435
00:29:04,716 --> 00:29:10,476
But I think the major new
feature in UIKit this year,


436
00:29:11,276 --> 00:29:13,946
is something that we call the
UI View Property Animator,


437
00:29:15,366 --> 00:29:16,776
It's a new animation API.


438
00:29:18,286 --> 00:29:20,896
It's a new animation
API that's going


439
00:29:20,896 --> 00:29:25,006
to let you build
interruptible animation.


440
00:29:25,526 --> 00:29:29,476
Animation you can scrub,
animation you can reverse.


441
00:29:30,806 --> 00:29:34,626
We are exposing a new
set of timing curves.


442
00:29:35,156 --> 00:29:37,076
And it's fully dynamic.


443
00:29:37,886 --> 00:29:39,676
You can add animation
on the fly.


444
00:29:40,236 --> 00:29:44,416
And the way, I describe
that new API is,


445
00:29:45,046 --> 00:29:47,996
just like a timeline in a movie.


446
00:29:48,316 --> 00:29:52,666
Something that you can
scrub, post, play, reverse.


447
00:29:53,216 --> 00:29:57,536
The model is really simple,
it's really easy to use.


448
00:29:58,446 --> 00:30:02,206
You just have to
create a new animator.


449
00:30:03,536 --> 00:30:05,996
You set the timing
parameters and the duration,


450
00:30:06,356 --> 00:30:07,576
you add your animation.


451
00:30:08,036 --> 00:30:10,346
And you start the animation,
and because you have an object


452
00:30:10,896 --> 00:30:14,566
that represent that animation,
that's how you can post that


453
00:30:15,066 --> 00:30:17,386
or change its progress.


454
00:30:19,046 --> 00:30:20,976
It's also fully integrated


455
00:30:21,196 --> 00:30:24,816
in the view controller
operation system and we're going


456
00:30:24,816 --> 00:30:28,456
to explain everything
about that,


457
00:30:28,456 --> 00:30:31,916
in Advances in UI Animation
and Techniques this Wednesday.


458
00:30:32,946 --> 00:30:36,976
But I'd like to show you,
what you can build with that.


459
00:30:37,796 --> 00:30:43,896
So, this is a very simple
photo app, that's something


460
00:30:43,896 --> 00:30:47,216
that you could do before,
have customization transition


461
00:30:47,986 --> 00:30:49,156
in a navigation controller.


462
00:30:50,116 --> 00:30:54,996
But with this animation API,
I can start the transition,


463
00:30:55,526 --> 00:31:00,596
catch that mid flight
with a gesture, move it,


464
00:31:01,736 --> 00:31:08,786
release it, and catch
that again.


465
00:31:08,996 --> 00:31:10,776
I'm going to reverse
my transition,


466
00:31:11,756 --> 00:31:13,106
and let the animation finish.


467
00:31:14,196 --> 00:31:16,266
And what's amazing about that,


468
00:31:17,266 --> 00:31:19,306
is that it's just
one transition.


469
00:31:19,706 --> 00:31:24,416
So we are moving the same
context from non-interactive


470
00:31:25,126 --> 00:31:29,016
to interactive gesture driven
to non-interactive again,


471
00:31:29,316 --> 00:31:32,186
to gesture driven to
interactive to non-interactive.


472
00:31:32,406 --> 00:31:36,206
You can fully blend
gestured based interactions


473
00:31:36,686 --> 00:31:37,476
and animation.


474
00:31:37,476 --> 00:31:40,336
We think that's a great
feature, we cannot wait


475
00:31:40,336 --> 00:31:41,996
to see what you're going
to build with that.


476
00:31:43,516 --> 00:31:50,166
[ Applause ]


477
00:31:50,666 --> 00:31:56,996
Now, I'd like to talk about some
new features we have in iOS X.


478
00:31:59,696 --> 00:32:04,106
And the key thing here
is, there's nothing


479
00:32:04,106 --> 00:32:06,186
that you absolutely
need to adopt.


480
00:32:06,636 --> 00:32:09,176
No, it's quite the opposite,
what can we do to help you.


481
00:32:09,786 --> 00:32:11,746
We have new feature
that we think are going


482
00:32:11,746 --> 00:32:14,436
to make your application better.


483
00:32:15,936 --> 00:32:18,956
Features are going to
simplify your architecture.


484
00:32:20,296 --> 00:32:23,376
Things that are going to measure
application more integrated.


485
00:32:24,356 --> 00:32:26,996
A good example of that
is something very simple.


486
00:32:27,566 --> 00:32:30,106
Is how we changed, openURL.


487
00:32:30,946 --> 00:32:33,756
So first, we made
that asynchronous


488
00:32:34,456 --> 00:32:40,356
with a completion handler but we
also added for universal links.


489
00:32:40,666 --> 00:32:43,796
So you know universal link
is when you open a URL,


490
00:32:44,986 --> 00:32:46,836
to a social network
for instance,


491
00:32:46,836 --> 00:32:50,606
if you have a native app it's
going to open the native app.


492
00:32:51,496 --> 00:32:55,146
But now, with this new
API, you can actually check


493
00:32:56,386 --> 00:33:00,206
if there was an application
on the system install.


494
00:33:00,936 --> 00:33:04,396
So if there was not, you can
stay in your application,


495
00:33:04,396 --> 00:33:07,876
you can still keep
the experience instead


496
00:33:07,876 --> 00:33:10,356
of opening [inaudible]
for instance.


497
00:33:10,856 --> 00:33:13,736
So that's going to really
improve how you can integrate


498
00:33:14,036 --> 00:33:17,216
content and deal with those
application in the system.


499
00:33:18,636 --> 00:33:23,306
Another great feature, is the
changes we made to Core Data.


500
00:33:24,536 --> 00:33:29,136
The first one is something
that we call, query generation.


501
00:33:30,026 --> 00:33:35,276
The idea here is, it's quite
common to have a context


502
00:33:35,276 --> 00:33:39,956
for your menu I and
that you're doing work


503
00:33:40,126 --> 00:33:43,796
on background queues,
in separate context.


504
00:33:44,776 --> 00:33:47,296
And what you can do is
query generation is,


505
00:33:47,776 --> 00:33:54,006
you can actually pin,
your model on your menu i,


506
00:33:54,776 --> 00:33:58,666
you can control exactly when you
want to move from one version,


507
00:33:59,346 --> 00:34:01,266
to another version
of your model.


508
00:34:01,946 --> 00:34:06,226
So it mean that you don't have
to deal with force anymore,


509
00:34:06,316 --> 00:34:07,976
because something changed
in the background queue


510
00:34:07,976 --> 00:34:12,686
because you can decide exactly
when the menu i should move


511
00:34:13,136 --> 00:34:14,326
to a new version of your data.


512
00:34:15,036 --> 00:34:16,706
That's a really great way


513
00:34:16,706 --> 00:34:20,266
to simplify your core data
code in your applications.


514
00:34:20,746 --> 00:34:24,656
The other feature is,
about connection pooling.


515
00:34:25,186 --> 00:34:27,426
Now in a store we
have full support


516
00:34:27,426 --> 00:34:31,036
for a multiple reader,
one writer mode.


517
00:34:31,036 --> 00:34:33,775
That's going to give you
great performance enhancement.


518
00:34:34,306 --> 00:34:39,636
We also have, new features on
the tool side, but for that,


519
00:34:40,106 --> 00:34:42,235
I suggest you go
to the What's New


520
00:34:42,235 --> 00:34:45,606
in Core Data session on Friday.


521
00:34:47,446 --> 00:34:48,806
Another way to model data


522
00:34:48,806 --> 00:34:50,886
in your application
is to use CloudKit.


523
00:34:50,886 --> 00:34:56,235
So CloudKit, we already had
to hold for public databases,


524
00:34:56,996 --> 00:35:00,616
and private per user databases.


525
00:35:01,216 --> 00:35:04,646
And what we are adding in
iOS X is record sharing.


526
00:35:05,196 --> 00:35:09,656
So you can have multiple users,
accessing the same record.


527
00:35:09,986 --> 00:35:12,686
So that's going to open
a completely new class


528
00:35:13,136 --> 00:35:14,766
of application with CloudKit.


529
00:35:16,336 --> 00:35:17,086
So that's great.


530
00:35:17,776 --> 00:35:21,426
But something that is
sometimes, difficult to do


531
00:35:21,426 --> 00:35:26,146
with collaboration based app,
is how to deal with the UI flow.


532
00:35:26,146 --> 00:35:30,546
How do you invite person to
collaborate on a document?


533
00:35:31,466 --> 00:35:34,856
How do you do that in a way
that is going to be secure?


534
00:35:35,496 --> 00:35:39,856
So we added the new UI
cloud sharing controller.


535
00:35:40,366 --> 00:35:42,466
Which is a view controller
expose by UIKit


536
00:35:42,466 --> 00:35:47,866
and it's really easy to use
just pass the new share object


537
00:35:48,046 --> 00:35:50,876
that is going to control
record sharing in CloudKit.


538
00:35:51,386 --> 00:35:55,716
And we're going to generate
automatically for you that UI


539
00:35:56,056 --> 00:36:00,446
to manage the invitation
flow, and the invitee list.


540
00:36:01,206 --> 00:36:04,096
That's really easy to build
a collaboration based app


541
00:36:04,496 --> 00:36:05,296
in CloudKit.


542
00:36:05,916 --> 00:36:07,816
We have an entire
session on CloudKit,


543
00:36:07,816 --> 00:36:10,316
What's New with CloudKit,
that's going to be


544
00:36:10,316 --> 00:36:11,906
in Presidio on Thursday.


545
00:36:14,096 --> 00:36:18,656
Now, I'd like to talk
about NS user activity.


546
00:36:19,526 --> 00:36:23,586
NS user activity is
a class that we use


547
00:36:23,586 --> 00:36:26,816
to capture the state,
of your application.


548
00:36:27,436 --> 00:36:30,496
And, we are using that already,


549
00:36:30,826 --> 00:36:34,136
for things like Handoff
and Spotlight.


550
00:36:34,856 --> 00:36:38,506
What we are doing now, in iOS
X, is we are adding support


551
00:36:38,506 --> 00:36:41,156
for locations in user activity.


552
00:36:41,156 --> 00:36:45,136
So if I'm in an application
that deals with addresses,


553
00:36:45,756 --> 00:36:49,316
I can express that, the
current activity for the user,


554
00:36:50,806 --> 00:36:52,066
is about this address.


555
00:36:52,316 --> 00:36:56,936
So you just pass a map kit item
you attach that to the activity


556
00:36:57,006 --> 00:37:02,006
and now you understand how
I build that suggestion


557
00:37:02,096 --> 00:37:04,136
in the text field
a few minutes ago.


558
00:37:04,556 --> 00:37:07,916
The system will notice
that, oh maybe this app,


559
00:37:08,706 --> 00:37:10,156
is dealing with these addresses.


560
00:37:10,326 --> 00:37:12,006
So that's probably a
very good suggestion


561
00:37:12,006 --> 00:37:14,756
for a text filed
about an address.


562
00:37:15,036 --> 00:37:18,476
That's going to open completely
automatically for you,


563
00:37:19,146 --> 00:37:20,606
if you had options
under activity.


564
00:37:21,396 --> 00:37:25,576
We have many new ways you
can use to increase usage


565
00:37:25,576 --> 00:37:29,186
of your application with what
we call proactive suggestion


566
00:37:29,186 --> 00:37:33,746
which is this intelligence
based, activity based,


567
00:37:33,746 --> 00:37:36,436
features in iOS X,
on your applications.


568
00:37:37,946 --> 00:37:45,996
Another place, where we use
NS user activity is in search.


569
00:37:46,746 --> 00:37:51,096
So in iOS 9, we added support
for indexed activities.


570
00:37:51,876 --> 00:37:57,776
It was real easy to use,
we just create an activity


571
00:37:57,776 --> 00:37:59,806
and pass text field information


572
00:37:59,806 --> 00:38:02,146
and that would just
show in Spotlight.


573
00:38:02,996 --> 00:38:04,816
But now what you can do is,


574
00:38:05,476 --> 00:38:07,936
we have a new button
here, search in app.


575
00:38:09,006 --> 00:38:13,796
And, your user can now go
back, directly to your app,


576
00:38:14,016 --> 00:38:18,256
and you can continue
search automatically


577
00:38:18,566 --> 00:38:19,696
in your own application.


578
00:38:20,376 --> 00:38:22,236
It's real easy to adopt.


579
00:38:22,236 --> 00:38:26,426
Step one, you need to add,
a new key to your info plist


580
00:38:27,636 --> 00:38:31,066
to tell us that you support
Spotlight continuation.


581
00:38:31,616 --> 00:38:36,946
The second step is to
implement a new UI application


582
00:38:36,946 --> 00:38:37,716
delegate method.


583
00:38:38,676 --> 00:38:40,906
It's real easy to implement.


584
00:38:41,606 --> 00:38:45,206
We are giving you the user
activity, you can build the UI


585
00:38:45,246 --> 00:38:48,496
and display the search,
continued in your application.


586
00:38:49,836 --> 00:38:54,576
The recent thing new also
with search, last year,


587
00:38:55,606 --> 00:38:57,916
we added support for
indexing your content


588
00:38:58,206 --> 00:38:59,196
with Core Spotlight.


589
00:39:00,066 --> 00:39:05,256
But now you can actually search
for your data in Spotlight.


590
00:39:05,296 --> 00:39:07,346
We are opening the
Spotlight index.


591
00:39:07,966 --> 00:39:09,416
And that's great
because we have,


592
00:39:10,136 --> 00:39:14,636
a fully optimized implementation
of that index for power


593
00:39:14,836 --> 00:39:18,866
and performance and we have
very powerful quarry model.


594
00:39:19,406 --> 00:39:21,246
So it's real easy to use.


595
00:39:22,416 --> 00:39:28,536
You just build a search
query, you pass a request


596
00:39:29,296 --> 00:39:32,396
and you can search the
Spotlight index for your data.


597
00:39:32,806 --> 00:39:37,416
So you can integrate
system indexed data and data


598
00:39:37,416 --> 00:39:40,206
from [inaudible] coming from a
network for your application.


599
00:39:41,166 --> 00:39:46,256
We have a new session, this year
about search APIs that's going


600
00:39:46,256 --> 00:39:48,406
to cover continuation,


601
00:39:49,246 --> 00:39:51,626
Core Spotlight search,
and other features.


602
00:39:56,576 --> 00:39:59,836
We shipped Replay
Kit, that was a way


603
00:39:59,836 --> 00:40:01,866
to record your screen
in your application.


604
00:40:02,306 --> 00:40:06,756
In iOS X, you can use
Replay Kit as a live stream.


605
00:40:07,756 --> 00:40:10,366
So you can have live
broadcasting,


606
00:40:10,906 --> 00:40:14,766
of your application and because
we are also providing extension


607
00:40:14,766 --> 00:40:18,666
point, it mean that third-party
services can give you


608
00:40:19,116 --> 00:40:21,486
that live broadcast ability.


609
00:40:21,486 --> 00:40:25,086
And we are using that for
instance, in playgrounds.


610
00:40:29,336 --> 00:40:32,966
Another great framework
is SceneKit.


611
00:40:34,846 --> 00:40:38,676
SceneKit is really powerful
3D engine you can use


612
00:40:38,676 --> 00:40:43,066
to integrate 3D interactive
component in your application.


613
00:40:44,166 --> 00:40:47,466
The major new feature of
this year is a completely new


614
00:40:47,766 --> 00:40:50,606
rendering engine,
physically based rendering.


615
00:40:52,006 --> 00:40:55,896
I could say that it now
supports high dynamic range


616
00:40:56,526 --> 00:40:59,456
or is internally using
a linear cross space.


617
00:40:59,456 --> 00:41:01,046
But I think that's
better to show you.


618
00:41:02,246 --> 00:41:05,996
This is your fire
truck on iOS 9.


619
00:41:07,026 --> 00:41:10,076
This is your fire
truck on iOS X.


620
00:41:10,836 --> 00:41:11,766
That's really amazing.


621
00:41:12,516 --> 00:41:16,916
[ Applause ]


622
00:41:17,416 --> 00:41:19,736
And it's now available
on the Watch OS 2.


623
00:41:20,556 --> 00:41:23,406
We have a full session of
SceneKit Rendering in Presidio.


624
00:41:26,656 --> 00:41:29,476
Then I'd like to
talk about Apple Pay.


625
00:41:30,766 --> 00:41:31,896
Two things about Apple Pay.


626
00:41:33,536 --> 00:41:38,186
First, we are extending
how Apple Pay is going


627
00:41:38,186 --> 00:41:40,316
to be available to your users.


628
00:41:41,096 --> 00:41:46,306
Today, Apple Pay is on
iOS and on the Watch,


629
00:41:46,686 --> 00:41:49,416
and as you learned
yesterday, we are expanding


630
00:41:49,416 --> 00:41:51,486
that Apple Pay on the web.


631
00:41:52,186 --> 00:41:54,626
We have support for
Apple Pay on the Mac.


632
00:41:54,806 --> 00:41:57,456
So for users, Apple
Pay is everywhere.


633
00:41:58,676 --> 00:42:01,486
But what's great
is, as a developer,


634
00:42:02,136 --> 00:42:04,406
we already have support
for Apple Pay


635
00:42:04,506 --> 00:42:06,796
in your UIKit based application.


636
00:42:07,446 --> 00:42:10,706
But now, you can use
Apple Pay in Safari


637
00:42:10,706 --> 00:42:12,906
with the new Javascript
framework.


638
00:42:13,366 --> 00:42:16,966
But it could also mean
that, you can use Apple Pay


639
00:42:17,356 --> 00:42:20,536
in your [inaudible]
Safari view controllers.


640
00:42:21,356 --> 00:42:24,236
The other place where you
can use Apple Pay now,


641
00:42:24,726 --> 00:42:26,976
is in non-UI code.


642
00:42:28,006 --> 00:42:31,086
We have a new API,
for non-UI extensions.


643
00:42:31,456 --> 00:42:36,346
And using Apple Pay in
extension, is, really amazing,


644
00:42:36,346 --> 00:42:39,196
that's a great feature for
instant for your iMessage apps.


645
00:42:39,526 --> 00:42:43,626
This is the kind of flow
you can now build directly


646
00:42:43,626 --> 00:42:45,516
in messages with an extension.


647
00:42:45,886 --> 00:42:50,316
I would like to point you to
the two session on Apple Pay.


648
00:42:50,696 --> 00:42:52,286
The first one that
is unfortunately


649
00:42:52,286 --> 00:42:54,756
at the same time
Apple Pay on the Web.


650
00:42:54,856 --> 00:42:57,646
And just after that,
there is What's New


651
00:42:57,646 --> 00:42:58,866
in Wallet in Apple Pay.


652
00:43:01,636 --> 00:43:08,406
I would like to, finish with
how you can make iOS better.


653
00:43:08,756 --> 00:43:11,616
How you can integrate with iOS.


654
00:43:12,136 --> 00:43:17,596
We have major new
extension points in iOS X,


655
00:43:18,046 --> 00:43:21,266
messages, Siri, CallKit.


656
00:43:22,166 --> 00:43:25,006
We also improved
existing extension,


657
00:43:25,006 --> 00:43:26,946
for instance something
like keyboards,


658
00:43:27,346 --> 00:43:33,206
now you can use the same
globe key, keyboard peeker


659
00:43:33,526 --> 00:43:35,346
from your keyboard extension.


660
00:43:35,346 --> 00:43:38,706
We can also give you
hints about the language,


661
00:43:39,066 --> 00:43:40,876
the user is interacting with.


662
00:43:41,256 --> 00:43:43,576
So you can build
multi-language support


663
00:43:43,576 --> 00:43:45,116
in your third-party extension.


664
00:43:46,276 --> 00:43:49,156
Another thing that
we improved in iOS X,


665
00:43:49,486 --> 00:43:51,686
is the new display
modes for widgets.


666
00:43:52,246 --> 00:43:57,386
So, before, you were just,
you just had to pass us


667
00:43:57,386 --> 00:43:58,506
with you preferred size.


668
00:43:59,006 --> 00:44:02,006
Now we have a user
controlled size.


669
00:44:02,406 --> 00:44:08,226
The compact mode, which is fixed
height and the expanded mode


670
00:44:08,426 --> 00:44:09,596
which is variable height.


671
00:44:10,196 --> 00:44:12,516
It's really easy to adopt.


672
00:44:12,516 --> 00:44:14,566
You don't have to do
anything, but we have new API


673
00:44:14,726 --> 00:44:17,836
so you can know when the
widgets are going to move


674
00:44:17,836 --> 00:44:19,796
from compact to extended.


675
00:44:20,206 --> 00:44:23,536
You can give us a maximum size,
you can know the display mode.


676
00:44:23,536 --> 00:44:26,356
You can customize the
information you want to display.


677
00:44:27,106 --> 00:44:30,226
There is one thing that,
I'd like to point out about,


678
00:44:30,226 --> 00:44:35,006
widget though is, this is going
to appear on the lock screen.


679
00:44:36,066 --> 00:44:41,146
So, be careful about the kind
of data you're presenting here.


680
00:44:41,776 --> 00:44:47,476
One thing to keep in mind is,
be consistent with the kind


681
00:44:47,476 --> 00:44:49,836
of data you're presenting
in your widget.


682
00:44:50,126 --> 00:44:52,596
If I configure, if
I add your widget


683
00:44:52,596 --> 00:44:54,446
to my home screen,
the lock screen.


684
00:44:55,516 --> 00:44:58,556
I expect that I'm always going
to see the same kind of data


685
00:44:58,556 --> 00:45:01,606
at the same level of privacy
and that I'm not going


686
00:45:01,606 --> 00:45:05,326
to be surprised by thing
that I don't want to see


687
00:45:05,636 --> 00:45:07,786
on my lock screen when
my iPhone is locked.


688
00:45:10,476 --> 00:45:14,966
A completely new framework in
iOS X is user notifications.


689
00:45:15,656 --> 00:45:21,286
So user notification, that's
something that we used to have


690
00:45:21,876 --> 00:45:23,606
at the UI application level.


691
00:45:24,216 --> 00:45:27,806
We have a new framework but, we
are exposing the same features.


692
00:45:28,306 --> 00:45:30,426
We are adding a few
enhancement there.


693
00:45:30,576 --> 00:45:35,506
First, we are unifying local
and remote notification.


694
00:45:35,806 --> 00:45:37,806
So much easier to deal with.


695
00:45:38,516 --> 00:45:43,976
[ Applause ]


696
00:45:44,476 --> 00:45:48,076
You have better control on
how you're going to deliver,


697
00:45:48,526 --> 00:45:51,426
how we are going to deliver
notification to the user.


698
00:45:52,706 --> 00:45:55,486
Another great thing is,
we're going to tell you,


699
00:45:57,056 --> 00:45:58,916
before displaying
the notification.


700
00:45:59,446 --> 00:46:02,606
So in-app, you have
better control


701
00:46:02,726 --> 00:46:04,316
on the notification itself.


702
00:46:05,896 --> 00:46:10,786
And, that's also a unified model
across all different platforms.


703
00:46:12,596 --> 00:46:15,876
In addition to these
API enhancements,


704
00:46:17,016 --> 00:46:18,726
we also have two extensions.


705
00:46:19,706 --> 00:46:22,736
The first one is the
service extension.


706
00:46:24,076 --> 00:46:27,516
The service extension is
something that you can insert,


707
00:46:28,256 --> 00:46:33,546
on the device when we are
receiving the notification


708
00:46:33,546 --> 00:46:35,686
and before, it's
actually displayed.


709
00:46:36,026 --> 00:46:41,586
So you can process the payload
before it appears on the screen.


710
00:46:42,316 --> 00:46:46,666
And, two great use cases, the
thing you can build with that.


711
00:46:47,636 --> 00:46:53,296
You can have media attachment,
the payload is pretty small.


712
00:46:53,976 --> 00:46:57,346
But if you know what you want
to display for a given, payload,


713
00:46:57,346 --> 00:47:00,726
you can, when receiving
that notification,


714
00:47:01,046 --> 00:47:02,606
fetch that and display.


715
00:47:02,606 --> 00:47:07,026
And the other great feature
is end to end encryption,


716
00:47:07,596 --> 00:47:10,466
because now you're in
charge, on both sides.


717
00:47:10,856 --> 00:47:13,406
On the server and
of the local device.


718
00:47:13,906 --> 00:47:15,246
So you can receive something,


719
00:47:15,806 --> 00:47:17,986
and decrypt that
in your own code.


720
00:47:17,986 --> 00:47:20,366
We think that's a
great new feature


721
00:47:20,706 --> 00:47:22,586
and great new possibility
for extensions.


722
00:47:23,516 --> 00:47:29,746
[ Applause ]


723
00:47:30,246 --> 00:47:32,826
This is the other
extension we have


724
00:47:33,016 --> 00:47:35,756
for the user notification
framework.


725
00:47:36,526 --> 00:47:41,636
You can have embedded UI
views in your notification.


726
00:47:42,716 --> 00:47:46,266
There is one restriction though,
you cannot directly interact,


727
00:47:47,346 --> 00:47:51,246
with the view, but you have
the notification actions.


728
00:47:52,086 --> 00:47:56,956
We have two session on user
notifications, Introduction


729
00:47:56,956 --> 00:47:59,046
to Notification and
Advanced Notification


730
00:47:59,556 --> 00:48:00,886
in Pacific Heights on Wednesday.


731
00:48:02,746 --> 00:48:07,226
Another new framework in
iOS X is CallKit and again,


732
00:48:07,226 --> 00:48:09,926
we are offering a new
extension point here.


733
00:48:11,306 --> 00:48:13,316
The directory extension,


734
00:48:13,676 --> 00:48:18,516
we let you configure how we
should block incoming calls.


735
00:48:19,656 --> 00:48:20,996
You have full control on that.


736
00:48:22,126 --> 00:48:27,746
The second feature is, how
we identify a phone number


737
00:48:28,066 --> 00:48:29,136
and display our label.


738
00:48:29,686 --> 00:48:32,836
So when we receive a call,
we first going to check


739
00:48:32,836 --> 00:48:37,246
in the address book and then
if we cannot find a match,


740
00:48:37,756 --> 00:48:39,186
we can add your extension.


741
00:48:39,776 --> 00:48:42,056
It's real easy to use API.


742
00:48:43,196 --> 00:48:45,576
It's non-UI extension point.


743
00:48:45,926 --> 00:48:47,716
It's really two methods.


744
00:48:48,416 --> 00:48:51,596
But the real great new feature


745
00:48:51,826 --> 00:48:55,496
in CallKit is the
call provider API.


746
00:48:56,496 --> 00:48:58,126
With the call provider API,


747
00:48:58,926 --> 00:49:01,936
we have a real first
party experience


748
00:49:02,416 --> 00:49:05,156
for your voice over
IP application.


749
00:49:05,516 --> 00:49:07,766
Which mean that now,
you can have something


750
00:49:07,766 --> 00:49:10,556
like full screen
incoming call UI


751
00:49:11,306 --> 00:49:12,826
when you receive a
call in your app.


752
00:49:13,276 --> 00:49:14,306
But it's not just that,


753
00:49:15,106 --> 00:49:17,336
we are fully integrating
your application


754
00:49:18,166 --> 00:49:20,766
with a core management on iOS.


755
00:49:21,096 --> 00:49:25,676
And things like,
favorites and recents,


756
00:49:25,676 --> 00:49:29,416
we are automatically get, the
calls from your application.


757
00:49:30,876 --> 00:49:33,136
You can support Siri,
you can support CarPlay,


758
00:49:33,256 --> 00:49:36,496
you will be integrated with
do not disturb and Bluetooth.


759
00:49:36,736 --> 00:49:39,256
That's a major new
feature for a mobile hone.


760
00:49:40,516 --> 00:49:43,936
[ Applause ]


761
00:49:44,436 --> 00:49:47,186
We can learn all about
that in the Enhancing Voice


762
00:49:47,186 --> 00:49:49,266
Over IP apps with CallKit.


763
00:49:49,846 --> 00:49:54,846
I'd like to talk about Siri.


764
00:49:56,156 --> 00:49:59,846
So, you might not
know about that.


765
00:50:00,486 --> 00:50:05,066
But Siri is actually
something that is different,


766
00:50:05,736 --> 00:50:07,006
depending on the context.


767
00:50:07,006 --> 00:50:11,516
So if you're using Siri,
from the home screen


768
00:50:11,786 --> 00:50:15,866
with the home button, or if
you're using Siri with hey Siri,


769
00:50:16,946 --> 00:50:19,576
or if you're using
Siri with CarPlay,


770
00:50:20,926 --> 00:50:23,036
or as an accessibility feature.


771
00:50:24,146 --> 00:50:27,956
Siri is going to tune
itself to that context


772
00:50:28,166 --> 00:50:31,706
so you can have the best
possible interaction with Siri.


773
00:50:33,446 --> 00:50:34,996
It's a quite complex task.


774
00:50:35,306 --> 00:50:38,396
Because it's involved
the recognition phase,


775
00:50:39,776 --> 00:50:42,996
understanding the domain,
understanding the environment,


776
00:50:43,346 --> 00:50:46,306
and that's something that we
are going to do for you for free


777
00:50:46,896 --> 00:50:50,026
when you build a
SiriKit extension.


778
00:50:50,486 --> 00:50:51,866
What we're going to give you,


779
00:50:52,396 --> 00:50:55,406
is an intent representing
the request,


780
00:50:55,466 --> 00:50:59,426
and that's how your extension
will interact with that.


781
00:51:00,396 --> 00:51:05,816
And, you can also help Siri
by giving your own vocabulary,


782
00:51:06,346 --> 00:51:10,036
which might be specific to your
app, or specific to the user,


783
00:51:10,396 --> 00:51:13,426
so we can again,
tune the recognition


784
00:51:13,866 --> 00:51:16,006
of the interaction with Siri.


785
00:51:17,156 --> 00:51:18,146
So how did that work?


786
00:51:18,296 --> 00:51:21,376
The idea behind intents
extension is,


787
00:51:22,256 --> 00:51:25,926
it's a non-UI extension that
will represent that interaction


788
00:51:25,926 --> 00:51:28,306
between Siri and
your application.


789
00:51:29,556 --> 00:51:32,206
So it's based on the
concept of intents,


790
00:51:32,576 --> 00:51:34,486
coming from Siri and responses.


791
00:51:34,786 --> 00:51:36,576
And the main idea here is,


792
00:51:36,946 --> 00:51:39,926
intents are a domain
specific thing.


793
00:51:40,246 --> 00:51:41,926
So you have the messaging
domain,


794
00:51:42,426 --> 00:51:44,096
the payment domain, etcetera.


795
00:51:44,306 --> 00:51:47,506
And for messaging, you
have a list of intents


796
00:51:47,806 --> 00:51:52,046
that Siri can recognize
and interact and send


797
00:51:52,046 --> 00:51:55,626
to your application for
[inaudible] Siri interaction.


798
00:51:56,346 --> 00:52:01,306
So the main goal here, for
Siri intents, extension is


799
00:52:01,306 --> 00:52:05,686
to make sure that, you and
Siri are on the same page


800
00:52:05,966 --> 00:52:07,686
when Siri understood a request.


801
00:52:08,066 --> 00:52:11,456
That valid request, that we need
to have a confirmation on that,


802
00:52:11,456 --> 00:52:15,226
let's execute the request,
that's basically the flow.


803
00:52:15,726 --> 00:52:19,076
And when you use Siri
to say something like,


804
00:52:19,446 --> 00:52:23,146
"tell Miko on WWDC chat
that we need to meet


805
00:52:23,146 --> 00:52:26,186
after this session," what
Siri is going to encode


806
00:52:26,186 --> 00:52:30,366
in the intent is the fact that,
it's in the messaging domain.


807
00:52:30,796 --> 00:52:34,166
It's the same messaging intent,
there is a receipt in here,


808
00:52:34,556 --> 00:52:37,296
that's about your app and
we have content from you.


809
00:52:37,866 --> 00:52:41,986
We have a second
extension for Siri Kit


810
00:52:42,476 --> 00:52:44,366
that the intents UI extension.


811
00:52:44,996 --> 00:52:46,786
It's actually an
optional extension.


812
00:52:47,326 --> 00:52:51,826
But with that you can embed
your own UI into Siri transcript


813
00:52:51,996 --> 00:52:55,696
so you can have a confirmation
that is tune to your content.


814
00:52:56,106 --> 00:52:57,036
That's really great.


815
00:52:58,246 --> 00:53:02,336
And, another great thing
about the intent system is,


816
00:53:03,026 --> 00:53:05,626
it's not just about Siri.


817
00:53:05,626 --> 00:53:09,326
It's a way to describe the
request, of course we use


818
00:53:09,326 --> 00:53:12,456
that in Siri to communicate
with your app.


819
00:53:13,106 --> 00:53:15,896
But, that's also how we
integrate with CallKit,


820
00:53:16,216 --> 00:53:20,206
that's how we do the right
sharing extension in maps.


821
00:53:20,206 --> 00:53:22,436
And the reason the
feature that is,


822
00:53:22,496 --> 00:53:26,926
really great is that's how
you can donate information


823
00:53:26,926 --> 00:53:30,406
to the system about what
you're user is doing.


824
00:53:30,526 --> 00:53:32,396
For instance, in
your message app.


825
00:53:33,096 --> 00:53:36,476
And it's combined with and
it's user activity of course,


826
00:53:36,706 --> 00:53:38,976
and with that, let's say


827
00:53:38,976 --> 00:53:45,956
that I am sending a message
using my WWDC chat application,


828
00:53:46,306 --> 00:53:51,506
then in the contacts UI, we're
going to show the information


829
00:53:51,506 --> 00:53:53,356
about this contacts
automatically.


830
00:53:53,806 --> 00:53:56,416
And when we have,
a list of actions,


831
00:53:57,526 --> 00:54:02,576
we can show you directly your
application there, if you expose


832
00:54:02,576 --> 00:54:05,566
that information
through an intent.


833
00:54:06,466 --> 00:54:08,516
And at some point,


834
00:54:10,046 --> 00:54:12,646
your application will be
just default application


835
00:54:12,986 --> 00:54:14,866
in the standard contact card.


836
00:54:15,386 --> 00:54:17,106
That's really amazing in term


837
00:54:17,106 --> 00:54:20,186
of adding visibility
to your application.


838
00:54:20,376 --> 00:54:25,556
I'd like to conclude
with the iMessage apps.


839
00:54:26,726 --> 00:54:30,306
So, messages is really
becoming a platform,


840
00:54:30,306 --> 00:54:34,866
and we have two features
here, one is the sticker packs


841
00:54:35,606 --> 00:54:38,146
and the other one is
the messages extension.


842
00:54:38,476 --> 00:54:43,316
So sticker packs, no code
required, you just have


843
00:54:43,376 --> 00:54:47,406
to package your images,
static or animated.


844
00:54:48,006 --> 00:54:53,246
You use Xcode for that and
you can just distribute


845
00:54:53,246 --> 00:54:54,956
that on the messages store.


846
00:54:56,196 --> 00:54:58,796
The other thing you can do,


847
00:54:59,286 --> 00:55:03,116
with iMessage apps is use
a new messages extension.


848
00:55:03,686 --> 00:55:08,116
With that you can write, a
fully UIKit based extension


849
00:55:08,816 --> 00:55:10,816
and you can do things like,


850
00:55:11,546 --> 00:55:14,866
dynamically generating
stickers content.


851
00:55:15,236 --> 00:55:17,526
You can even use a
camera in that extension


852
00:55:17,526 --> 00:55:18,686
which is completely new.


853
00:55:19,256 --> 00:55:22,826
And, you can tune your
UI to have this compact


854
00:55:22,826 --> 00:55:26,906
or expanded mode and that's
going to live-in messages,


855
00:55:27,206 --> 00:55:29,836
that's a great feature
but you can do even more.


856
00:55:29,836 --> 00:55:32,746
You can custom the
bubble itself,


857
00:55:33,296 --> 00:55:35,206
it mean that your extension,


858
00:55:35,436 --> 00:55:39,026
using the messages
framework can actually have,


859
00:55:39,446 --> 00:55:44,266
a concept of a conversation in
messages integrate with that,


860
00:55:44,526 --> 00:55:48,506
connect with what the
other user changed.


861
00:55:48,646 --> 00:55:51,106
We have full support
for messages extension


862
00:55:51,576 --> 00:55:53,336
in [inaudible] and iOS X.


863
00:55:53,606 --> 00:55:57,826
That's real easy to use and
that's great feature for you


864
00:55:58,276 --> 00:55:59,816
to integrate in messages.


865
00:56:01,686 --> 00:56:05,186
The other thing that you can
have with that is of course,


866
00:56:05,186 --> 00:56:10,556
completely custom content
in your interactive bubble.


867
00:56:10,716 --> 00:56:16,476
We have two session for iMessage
applications, messages, apps,


868
00:56:16,476 --> 00:56:20,066
and sticker, that was this
morning, and the second one,


869
00:56:20,066 --> 00:56:23,876
focusing on the extension part
that's going to be on Thursday


870
00:56:23,876 --> 00:56:27,976
at 1:40 p.m. Thank you
very much, enjoy WWDC.


871
00:56:28,516 --> 00:56:38,410
[ Applause ]

