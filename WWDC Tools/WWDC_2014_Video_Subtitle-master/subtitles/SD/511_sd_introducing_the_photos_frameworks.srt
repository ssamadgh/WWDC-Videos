1
00:00:00,506 --> 00:00:11,546
[ Silence ]


2
00:00:12,046 --> 00:00:12,196
>> All right.


3
00:00:12,296 --> 00:00:12,976
Good morning, everyone.


4
00:00:13,516 --> 00:00:15,556
[ Applause ]


5
00:00:16,056 --> 00:00:17,916
Welcome to Session 511.


6
00:00:17,916 --> 00:00:20,356
This is the "Introduction
to the Photos Frameworks",


7
00:00:20,426 --> 00:00:22,206
collectively known as PhotoKit.


8
00:00:23,156 --> 00:00:24,846
And my name is Adam Swift.


9
00:00:25,146 --> 00:00:26,106
No jokes, please.


10
00:00:26,366 --> 00:00:30,066
I'm a software engineer on the
iOS Photos Frameworks Team.


11
00:00:32,436 --> 00:00:33,046
All right.


12
00:00:33,046 --> 00:00:34,446
So, we're really excited


13
00:00:34,446 --> 00:00:37,616
about introducing you
to PhotoKit today.


14
00:00:37,616 --> 00:00:40,606
PhotoKit is comprised
of two frameworks.


15
00:00:40,606 --> 00:00:42,736
The first framework is
the Photos Framework,


16
00:00:43,046 --> 00:00:46,716
which gives you access
to the photos and videos


17
00:00:46,896 --> 00:00:48,656
from the user's photo library.


18
00:00:49,436 --> 00:00:52,066
And you can use it to
build a full-featured app


19
00:00:52,366 --> 00:00:54,196
like the built-in
Photos application.


20
00:00:54,976 --> 00:00:57,836
The second framework is
the Photos UI framework,


21
00:00:58,186 --> 00:01:00,316
and this is a framework
that will allow you


22
00:01:00,316 --> 00:01:03,646
to build a photo editing
extension, app extension,


23
00:01:03,876 --> 00:01:06,726
that can be used right within
the built-in Photos app.


24
00:01:09,716 --> 00:01:12,966
So, in this session we're
going to focus first


25
00:01:12,966 --> 00:01:17,196
on how you can use the
Photos Framework to fetch


26
00:01:17,196 --> 00:01:19,146
and manipulate photo
library model data,


27
00:01:19,606 --> 00:01:23,786
handle external changes, and
both retrieve and edit photo


28
00:01:23,786 --> 00:01:26,806
and video content in
the iOS 8 photo library.


29
00:01:28,046 --> 00:01:29,706
Then we're going to
turn our attention


30
00:01:29,736 --> 00:01:33,596
to the PhotosUI Framework and
walk you through the steps


31
00:01:33,596 --> 00:01:36,296
and the concepts you need
to understand in order


32
00:01:36,296 --> 00:01:38,566
to build your own app extension


33
00:01:38,566 --> 00:01:40,546
for editing photo
and video content.


34
00:01:42,666 --> 00:01:43,726
All right.


35
00:01:43,726 --> 00:01:46,146
So, let's get started
with the Photos Framework.


36
00:01:46,856 --> 00:01:53,406
The Photos Framework is a new
Objective-C framework in iOS 8.


37
00:01:54,256 --> 00:01:59,366
And it allows you to make
your application a first-class


38
00:01:59,366 --> 00:02:03,736
citizen of the system photo
library for everything,


39
00:02:03,736 --> 00:02:06,126
from something simple
like a custom image picker


40
00:02:06,126 --> 00:02:08,026
in your application to going


41
00:02:08,026 --> 00:02:11,846
and building a full-featured
custom application


42
00:02:11,846 --> 00:02:14,286
for browsing the photo
library and editing.


43
00:02:15,356 --> 00:02:19,096
And we really believe in this


44
00:02:19,096 --> 00:02:22,746
because we're using the Photos
Framework in our own Photos


45
00:02:22,746 --> 00:02:25,456
and Camera applications
that are built-in in iOS 8.


46
00:02:25,966 --> 00:02:29,036
For those of you who have
worked with photos in the past,


47
00:02:29,726 --> 00:02:31,546
this Photos Framework
is designed


48
00:02:31,596 --> 00:02:33,536
to supersede the
ALAssetsLibrary,


49
00:02:33,536 --> 00:02:34,756
which doesn't provide,


50
00:02:35,516 --> 00:02:41,096
[ Laughter and Applause ]


51
00:02:41,596 --> 00:02:44,126
which doesn't provide much of
the functionality and features


52
00:02:44,126 --> 00:02:45,616
that you'll get with
the Photos Framework.


53
00:02:47,076 --> 00:02:50,626
So what do you get with
the Photos Framework?


54
00:02:50,986 --> 00:02:53,056
You get access to
photo and video assets,


55
00:02:53,056 --> 00:02:56,126
albums and moments,
something you didn't get


56
00:02:56,126 --> 00:02:57,116
with the assets library.


57
00:02:57,676 --> 00:03:03,976
And then you can also
add, remove, modify assets


58
00:03:03,976 --> 00:03:06,596
and albums right in the
system-wide photo library.


59
00:03:07,286 --> 00:03:12,336
You can then also edit photo
and video content and metadata


60
00:03:12,696 --> 00:03:15,706
that is written directly into
the system photo library.


61
00:03:17,776 --> 00:03:19,086
We're excited about it, too.


62
00:03:19,086 --> 00:03:19,696
That's okay.


63
00:03:20,246 --> 00:03:24,856
So, we're going to walk through
this API in a couple of steps.


64
00:03:24,856 --> 00:03:27,746
The first section is going
to focus on the model data


65
00:03:27,906 --> 00:03:30,486
and this is going to
walk you through how


66
00:03:30,486 --> 00:03:33,746
to fetch the model objects,
how to change model data,


67
00:03:34,116 --> 00:03:35,876
how to handle external changes.


68
00:03:36,216 --> 00:03:38,576
And then we'll turn our
attention to working


69
00:03:38,576 --> 00:03:41,816
with the image and video
content of those assets,


70
00:03:42,686 --> 00:03:46,266
how to retrieve it efficiently,
and tips for working


71
00:03:46,266 --> 00:03:49,646
with different types of image
and video content, and then how


72
00:03:49,646 --> 00:03:51,226
to go ahead and make changes


73
00:03:51,616 --> 00:03:53,556
and apply those back
to the photo library.


74
00:03:54,246 --> 00:03:57,716
So I'm going to start off
looking at model data.


75
00:03:58,506 --> 00:04:01,736
So, model data in the Photos
Framework is represented


76
00:04:01,736 --> 00:04:03,586
with what we call model objects.


77
00:04:03,696 --> 00:04:07,006
And these represent the
structure of the photo library.


78
00:04:07,426 --> 00:04:10,196
These are the records
that represent photo


79
00:04:10,196 --> 00:04:13,756
and video assets, moments,
albums and folders.


80
00:04:14,806 --> 00:04:19,086
And the key concept I want you
to take away from this section,


81
00:04:19,755 --> 00:04:23,556
one of the key concepts is that
model objects that are presented


82
00:04:23,556 --> 00:04:25,696
in the Photo Framework
are read-only,


83
00:04:25,926 --> 00:04:30,206
and that is a nice benefit
because it means you can work


84
00:04:30,206 --> 00:04:32,246
with those objects in
a thread-safe manner.


85
00:04:32,246 --> 00:04:34,616
You can pass them between
threads without worrying


86
00:04:34,616 --> 00:04:36,656
about their data changing
out from underneath you.


87
00:04:37,096 --> 00:04:42,086
There's no worries about locking
and handling concurrent changes.


88
00:04:43,476 --> 00:04:47,176
So I'd like to walk through
the different model objects


89
00:04:47,176 --> 00:04:50,876
that we provide with an
illustration using the built-in


90
00:04:50,876 --> 00:04:52,576
iOS 8 Photos application.


91
00:04:53,676 --> 00:04:55,446
So we'll start with the assets.


92
00:04:55,826 --> 00:04:57,106
These are the photos and videos


93
00:04:57,106 --> 00:04:58,926
that you see here
in the Photos App.


94
00:04:58,926 --> 00:05:04,546
And then containing assets,
we have at the next level up,


95
00:05:05,086 --> 00:05:07,846
Asset Collections, what
we call Asset Collections


96
00:05:07,846 --> 00:05:08,756
in the Photos Framework.


97
00:05:09,426 --> 00:05:13,236
And in the case we're looking
at a view that shows moments.


98
00:05:13,236 --> 00:05:16,126
And a moment is comprised
of a collection of assets.


99
00:05:16,676 --> 00:05:20,496
At the next level above that,


100
00:05:21,246 --> 00:05:23,566
we have what we call
Collection Lists,


101
00:05:23,896 --> 00:05:26,196
and these are lists
of Asset Collections.


102
00:05:26,606 --> 00:05:28,236
And in the case you're
looking at here,


103
00:05:28,236 --> 00:05:31,526
we're seeing the year moment
view, which is comprised


104
00:05:31,526 --> 00:05:32,716
of a series of moments,


105
00:05:32,816 --> 00:05:35,796
which then in turn are
comprised of assets.


106
00:05:38,236 --> 00:05:41,416
Now let's walk through
these Model Objects in terms


107
00:05:41,416 --> 00:05:43,076
of the APIs that
are exposed to you


108
00:05:43,076 --> 00:05:44,146
through the Photos Framework.


109
00:05:44,776 --> 00:05:46,676
The first one we'll
look at is the Assets,


110
00:05:46,676 --> 00:05:47,686
the photos and videos.


111
00:05:48,226 --> 00:05:51,016
And photos and videos
assets are represented


112
00:05:51,016 --> 00:05:52,696
by the PHAsset class.


113
00:05:53,816 --> 00:05:57,236
And as you look through this
UI in the Photos Application,


114
00:05:57,236 --> 00:05:59,266
you can see it's a photo.


115
00:05:59,266 --> 00:06:00,266
That's the media type.


116
00:06:01,446 --> 00:06:02,286
But then at the top


117
00:06:02,286 --> 00:06:05,096
of the screen you can see we're
displaying the creation date


118
00:06:05,096 --> 00:06:08,116
and the location, which are
both properties of the asset.


119
00:06:09,106 --> 00:06:11,966
Down at the bottom of the screen
you can see an icon representing


120
00:06:12,256 --> 00:06:14,796
a heart, that is, whether


121
00:06:14,796 --> 00:06:16,766
that asset has been
marked as a favorite.


122
00:06:17,386 --> 00:06:19,436
And these are all
properties available to you


123
00:06:19,436 --> 00:06:21,296
in the model object, PHAsset.


124
00:06:21,726 --> 00:06:25,756
At the next level
up we're talking


125
00:06:25,756 --> 00:06:27,586
about the Asset Collection
and, again,


126
00:06:27,586 --> 00:06:29,466
we're illustrating
that with the moment.


127
00:06:29,846 --> 00:06:34,176
An Asset Collection is a general
ordered collection of assets,


128
00:06:34,326 --> 00:06:35,596
so there are a couple
of different types.


129
00:06:35,596 --> 00:06:37,706
We've got moments,
like you can see here.


130
00:06:37,706 --> 00:06:40,266
But we also have
albums and smart albums.


131
00:06:40,776 --> 00:06:44,246
The Asset Collection,
unsurprisingly,


132
00:06:44,546 --> 00:06:47,676
represented by the
PHAssetCollection class,


133
00:06:48,246 --> 00:06:50,916
and it has the properties
of the type, title,


134
00:06:51,516 --> 00:06:52,566
and start and end date.


135
00:06:52,566 --> 00:06:54,676
And you can see these
properties reflected in the UI.


136
00:06:56,816 --> 00:07:00,606
Going one level higher, we
have the Collection List.


137
00:07:01,316 --> 00:07:04,556
And a Collection List
is an ordered collection


138
00:07:04,556 --> 00:07:05,456
of collections.


139
00:07:05,796 --> 00:07:08,776
And in the case we're looking at
here, we've got a moment year.


140
00:07:09,316 --> 00:07:11,086
But you can also have
a Collection List


141
00:07:11,086 --> 00:07:12,556
that represents a folder.


142
00:07:13,166 --> 00:07:15,426
And something that's
unique about a folder


143
00:07:15,426 --> 00:07:19,026
versus a moment year type
of Collection List is


144
00:07:19,026 --> 00:07:21,796
that a folder can
actually contain subfolders


145
00:07:21,946 --> 00:07:23,276
as well as albums.


146
00:07:23,436 --> 00:07:27,486
So that's why we say an ordered
collection of collections


147
00:07:27,486 --> 00:07:30,316
where those collections
might be an Asset Collection


148
00:07:30,866 --> 00:07:32,716
or a Collection List.


149
00:07:33,316 --> 00:07:38,306
The Collection List class
is the PHCollectionList and,


150
00:07:38,306 --> 00:07:40,166
similar to the Asset
Collection, has a type,


151
00:07:40,716 --> 00:07:44,916
title and a start and end date.


152
00:07:46,086 --> 00:07:48,306
So when you want to work
with these model objects,


153
00:07:48,836 --> 00:07:50,726
you need to get them out
of the photo library.


154
00:07:51,296 --> 00:07:55,466
So, in order to get
these model objects


155
00:07:55,466 --> 00:07:58,576
out of the photo library, the
key concept here that I want you


156
00:07:58,656 --> 00:08:00,626
to focus on in this
section for fetching,


157
00:08:00,626 --> 00:08:05,236
is that you use the class
methods on the model object


158
00:08:05,236 --> 00:08:06,256
that you want to fetch out.


159
00:08:06,846 --> 00:08:08,916
So when you want to
fetch out assets - say,


160
00:08:08,916 --> 00:08:10,766
you wanted to fetch all
of the video assets -


161
00:08:11,696 --> 00:08:14,536
you look for the class
method on the PHAsset class,


162
00:08:14,616 --> 00:08:20,486
fetchAssetsWithMediaType,
specifying the media type video.


163
00:08:20,656 --> 00:08:22,986
Similarly, as I said before,


164
00:08:22,986 --> 00:08:24,906
a moment is a type
of Asset Collection.


165
00:08:25,236 --> 00:08:28,446
So to fetch moments,
we use a class method


166
00:08:28,446 --> 00:08:32,576
on the Asset Collection class,
to fetchMomentsWithOptions.


167
00:08:33,476 --> 00:08:36,635
Now in both of these examples
I've omitted the options,


168
00:08:36,986 --> 00:08:39,856
but they give you an opportunity
to do things like filter


169
00:08:39,856 --> 00:08:42,446
or sort the results
that you get back.


170
00:08:44,606 --> 00:08:48,496
So the next key concept
I want to cover as far


171
00:08:48,496 --> 00:08:52,326
as collections are
concerned is that collections


172
00:08:52,426 --> 00:08:56,656
in the Photos Framework
runtime don't actually cache


173
00:08:56,656 --> 00:08:57,486
their contents.


174
00:08:57,486 --> 00:08:57,916
[ Cough ]


175
00:08:57,916 --> 00:08:59,526
Excuse me.


176
00:08:59,796 --> 00:09:03,016
So what that means is that
in order to find the assets


177
00:09:03,016 --> 00:09:06,266
that live in an album you need
to perform a fetch similar


178
00:09:06,266 --> 00:09:08,916
to the ones that we just saw
for general purpose fetching.


179
00:09:09,486 --> 00:09:10,886
So here's an illustration
of that.


180
00:09:11,246 --> 00:09:13,656
To fetch the assets in an
Asset Collection represented


181
00:09:13,656 --> 00:09:17,786
by an album, we're getting back
assets, so we use a class method


182
00:09:17,786 --> 00:09:19,586
on the PHAsset class


183
00:09:20,066 --> 00:09:22,776
and fetchAssetsInAsset
Collection:myAlbum.


184
00:09:23,356 --> 00:09:27,526
Now the next construct
that I want


185
00:09:27,526 --> 00:09:31,406
to cover here is something we
call a Transient Collection.


186
00:09:31,406 --> 00:09:36,376
And this is a really useful
construct that we've made a lot


187
00:09:36,376 --> 00:09:40,146
of use of in the photos
application where we wanted


188
00:09:40,146 --> 00:09:43,636
to represent a collection
that isn't represented


189
00:09:43,636 --> 00:09:45,146
in the actual photo library.


190
00:09:45,556 --> 00:09:49,316
An example of that is a search
result or a user selection


191
00:09:49,316 --> 00:09:51,266
as they're picking
off items in the UI.


192
00:09:52,196 --> 00:09:57,966
And by taking that selection
of items or model objects


193
00:09:57,966 --> 00:09:59,816
and putting it into a
Transient Collection,


194
00:10:00,166 --> 00:10:04,926
the benefit is the Transient
Collection is interchangeable


195
00:10:04,986 --> 00:10:07,146
with the regular collections
that you might fetch


196
00:10:07,146 --> 00:10:07,976
out of the photo library.


197
00:10:08,976 --> 00:10:12,376
So you can do things like reuse
your existing view controllers


198
00:10:12,436 --> 00:10:14,846
or fetch the contents of
a Transient Collection


199
00:10:15,116 --> 00:10:17,496
without worrying about whether
it's represented by something


200
00:10:17,496 --> 00:10:20,186
that really exists
on the photo library


201
00:10:20,436 --> 00:10:21,306
or if it's just something


202
00:10:21,306 --> 00:10:23,106
that your user is working
with in the runtime.


203
00:10:23,496 --> 00:10:27,726
To create a Transient Collection
there's a class method


204
00:10:27,726 --> 00:10:29,236
on the Asset Collection class


205
00:10:29,236 --> 00:10:30,896
to create a Transient
Asset Collection.


206
00:10:30,956 --> 00:10:33,066
You could also create a
Transient Collection list.


207
00:10:33,606 --> 00:10:35,576
But to create a Transient
Asset Collection we call


208
00:10:35,576 --> 00:10:38,806
transientAssetCollection
WithAssets and simply pass


209
00:10:38,806 --> 00:10:41,746
in an array of assets as
well as an optional title.


210
00:10:44,946 --> 00:10:48,526
So what are you getting back
when you perform these fetches?


211
00:10:48,946 --> 00:10:51,386
Most of the time when you're
writing an application to work


212
00:10:51,386 --> 00:10:53,846
with photos, you're going
to be reading those objects,


213
00:10:54,366 --> 00:10:56,076
looking through them,
working with them.


214
00:10:56,266 --> 00:10:58,266
So we wanted to make it
as simple as possible


215
00:10:58,266 --> 00:11:00,696
to get those objects out and
to work with them directly.


216
00:11:01,016 --> 00:11:03,016
So you wanted to get
synchronous results


217
00:11:03,016 --> 00:11:04,086
and you want them quickly.


218
00:11:05,866 --> 00:11:09,056
But, especially when you think
about iCloud Photo Library,


219
00:11:09,176 --> 00:11:12,996
the results of the fetch could
be potentially very large,


220
00:11:13,256 --> 00:11:15,536
in the tens of thousands
of assets or even more.


221
00:11:16,516 --> 00:11:17,886
So it's really important


222
00:11:17,886 --> 00:11:20,316
that you don't fetch all those
objects into memory at once.


223
00:11:20,976 --> 00:11:23,466
And you really want to
work with them in batches


224
00:11:23,466 --> 00:11:25,956
as you're working with them
or displaying them on screen.


225
00:11:27,166 --> 00:11:29,166
But we didn't want to put
that complexity on you.


226
00:11:30,186 --> 00:11:33,486
So what we did is we've
introduced a class


227
00:11:33,486 --> 00:11:35,266
to represent the
objects that you get back


228
00:11:35,266 --> 00:11:37,466
from a fetch called
a PHFetchResult.


229
00:11:38,606 --> 00:11:43,296
And the PHFetchResult takes care
of tracking the full results set


230
00:11:43,586 --> 00:11:44,316
by keeping track


231
00:11:44,316 --> 00:11:46,856
of the lightweight
IDs representing each


232
00:11:46,856 --> 00:11:48,536
of the contents of that fetch.


233
00:11:48,986 --> 00:11:52,776
But when you access the contents
of that fetch result to pull one


234
00:11:52,776 --> 00:11:55,776
of the objects out, we'll vend
you a fully realized object


235
00:11:56,086 --> 00:11:56,896
that you can work with.


236
00:11:57,896 --> 00:12:00,906
It's got an API that's familiar
and similar to the NSArray


237
00:12:00,906 --> 00:12:03,406
so it should be easy
to work with.


238
00:12:03,806 --> 00:12:07,896
And I'd like to show you
an example of what it looks


239
00:12:07,896 --> 00:12:10,426
like as you're working
with a fetch result.


240
00:12:11,406 --> 00:12:16,146
So on the slide here I've
shown a fetch result that's


241
00:12:16,146 --> 00:12:18,416
representing, say, a
fetch of 10,000 assets


242
00:12:19,096 --> 00:12:21,706
and as we're iterating
through that result set,


243
00:12:21,706 --> 00:12:26,666
pulling out assets, as we
access one of the indexes,


244
00:12:27,076 --> 00:12:29,916
we'll behind the scenes pull
in a full batch to represent


245
00:12:29,916 --> 00:12:32,026
that object as well
as many of the others.


246
00:12:32,816 --> 00:12:36,696
And as you iterate through over
that batch to the next batch,


247
00:12:36,876 --> 00:12:38,976
we'll pull in the
next batch of objects


248
00:12:39,246 --> 00:12:42,346
but release the previous ones
so you don't wind up holding


249
00:12:42,346 --> 00:12:43,266
onto all that in memory.


250
00:12:45,326 --> 00:12:48,806
So now that you've got the
[applause] - ah, thanks.


251
00:12:51,076 --> 00:12:53,656
Now that you've got model
objects that you're working


252
00:12:53,656 --> 00:12:58,736
with in your application, your
user may, will, oftentimes want


253
00:12:58,736 --> 00:13:00,206
to make changes to
those objects.


254
00:13:00,706 --> 00:13:03,786
So I want to take a look at
how you can make model changes


255
00:13:04,426 --> 00:13:07,176
with those model
objects to support things


256
00:13:07,176 --> 00:13:11,516
like the user wanting to
favorite a photo or add a photo


257
00:13:11,516 --> 00:13:15,056
to an album because,
as I said earlier,


258
00:13:15,376 --> 00:13:17,156
the model objects
themselves are read-only


259
00:13:17,156 --> 00:13:18,666
so you can't mutate
them directly.


260
00:13:20,416 --> 00:13:22,786
So the way we express changes is


261
00:13:22,786 --> 00:13:25,346
through a Change
Request API that's based


262
00:13:25,346 --> 00:13:30,056
on change request
classes that you create


263
00:13:30,056 --> 00:13:33,376
in a change request block and
then hand to the photo library


264
00:13:34,056 --> 00:13:36,736
so that it can apply those
changes asynchronously


265
00:13:36,896 --> 00:13:37,856
out of process.


266
00:13:38,666 --> 00:13:41,196
And the reasons those changes
are applied out of process


267
00:13:41,356 --> 00:13:43,286
and asynchronously is twofold.


268
00:13:44,096 --> 00:13:47,556
The first reason is,
for some operations,


269
00:13:47,736 --> 00:13:51,516
it may be very expensive
or processor-intensive


270
00:13:51,516 --> 00:13:52,736
or just take a long time.


271
00:13:53,346 --> 00:13:56,296
But even more importantly than
that, because you're working


272
00:13:56,296 --> 00:13:58,346
with the user's actual
photo library,


273
00:13:58,756 --> 00:14:02,406
some of those actions may
require user authentication.


274
00:14:02,736 --> 00:14:05,066
For example, if you
wanted to delete 10 photos,


275
00:14:06,276 --> 00:14:08,626
the photo library's going
to prompt the user to say,


276
00:14:09,086 --> 00:14:13,406
"Is this application allowed
to delete these 10 photos?"


277
00:14:13,666 --> 00:14:17,636
to allow the user to have
a chance to confirm that.


278
00:14:19,406 --> 00:14:21,426
So let's take a look at
the change request classes.


279
00:14:21,426 --> 00:14:22,796
It's actually pretty simple.


280
00:14:22,796 --> 00:14:26,416
For each model object class,
there is a change request class.


281
00:14:26,416 --> 00:14:28,036
We've got the
AssetChangeRequest,


282
00:14:28,036 --> 00:14:29,466
the
AssetCollectionChangeRequest,


283
00:14:29,816 --> 00:14:32,016
and the
CollectionListChangeRequest.


284
00:14:32,666 --> 00:14:35,796
And each of these change
request classes provide model


285
00:14:35,796 --> 00:14:38,966
object-specific APIs to allow
you to perform the types


286
00:14:38,966 --> 00:14:40,116
of changes that they allow.


287
00:14:41,256 --> 00:14:45,716
So the example I'm showing here
is for the asset change request


288
00:14:45,716 --> 00:14:48,126
where you can set the
creation date for an asset


289
00:14:48,436 --> 00:14:49,646
or to set it as a favorite.


290
00:14:53,666 --> 00:14:55,936
Some other things to understand


291
00:14:55,936 --> 00:14:57,356
about the change
request classes is


292
00:14:57,356 --> 00:15:00,556
that they are not subclasses
of the model classes.


293
00:15:00,556 --> 00:15:02,396
And there's a good
reason for that.


294
00:15:02,626 --> 00:15:05,016
We wanted to provide a
really clear separation


295
00:15:05,016 --> 00:15:08,436
between the thread-safe,
immutable model objects


296
00:15:08,566 --> 00:15:10,496
and the objects that
express mutations.


297
00:15:10,796 --> 00:15:12,266
That's the change
request classes.


298
00:15:13,056 --> 00:15:15,726
These change request classes
are also only valid to work


299
00:15:15,726 --> 00:15:17,616
within a change request block.


300
00:15:18,086 --> 00:15:22,546
So I'd like to illustrate
that with an example now.


301
00:15:23,086 --> 00:15:29,436
So here's an example where I've
provided a sample implementation


302
00:15:29,436 --> 00:15:33,856
of a method to toggle whether
an asset has been marked


303
00:15:33,856 --> 00:15:34,436
as a favorite.


304
00:15:35,586 --> 00:15:37,226
So the first thing we'll do


305
00:15:37,226 --> 00:15:41,526
in this method is ask
the shared photo library


306
00:15:41,526 --> 00:15:43,776
to perform some changes,
and we'll pass


307
00:15:43,776 --> 00:15:45,276
in a change request block here.


308
00:15:47,776 --> 00:15:51,336
First step in that block is
to create a change request


309
00:15:51,336 --> 00:15:53,516
for the asset that we were
provided in the method.


310
00:15:54,246 --> 00:15:57,026
And we're using the
PHAssetChangeRequest class here


311
00:15:57,026 --> 00:15:57,556
you can see.


312
00:15:58,126 --> 00:16:03,236
And then the last
step is simply to set


313
00:16:03,846 --> 00:16:08,466
on the change request the value
of Favorite to the inverse value


314
00:16:08,466 --> 00:16:11,036
of what the asset currently has.


315
00:16:12,346 --> 00:16:16,446
That's enough for the block to
get passed to the photo library


316
00:16:16,836 --> 00:16:19,366
and those changes to be
performed on your behalf.


317
00:16:20,936 --> 00:16:23,626
After those changes are
performed we'll call back the


318
00:16:23,626 --> 00:16:28,206
completion handler and let
you know if it was successful


319
00:16:28,546 --> 00:16:29,756
in performing those changes.


320
00:16:33,416 --> 00:16:36,296
So one other aspect of
working with change requests


321
00:16:36,296 --> 00:16:40,276
that you'll want to do is
to create new model objects.


322
00:16:40,726 --> 00:16:42,526
And you can create
new model objects


323
00:16:42,606 --> 00:16:44,466
with these same change
request classes


324
00:16:44,696 --> 00:16:45,866
but creating a different kind


325
00:16:45,866 --> 00:16:49,056
of change request using
a creation request.


326
00:16:49,196 --> 00:16:50,886
So in this case I've
shown as an example


327
00:16:50,886 --> 00:16:53,106
where you can create a new asset


328
00:16:53,106 --> 00:16:56,966
from an image using the
creationRequestForAssetFromImage


329
00:16:57,256 --> 00:16:57,946
class method.


330
00:16:59,246 --> 00:17:02,316
And if all you want to
do is create a new asset


331
00:17:02,316 --> 00:17:04,955
from an image, you're done.


332
00:17:04,955 --> 00:17:08,156
You just make this call
within a change request block


333
00:17:08,156 --> 00:17:10,406
and the library will take
care of adding the asset.


334
00:17:11,506 --> 00:17:13,996
But if you want to
work with that asset


335
00:17:14,165 --> 00:17:17,896
within that change request block
to do some additional work, say,


336
00:17:17,896 --> 00:17:21,455
to add it to an album, well,


337
00:17:21,455 --> 00:17:24,566
remember that the asset
won't actually be created


338
00:17:24,566 --> 00:17:26,665
until the work is
performed out of process.


339
00:17:27,306 --> 00:17:32,566
So within the same change
request block you can access a


340
00:17:32,566 --> 00:17:35,736
placeholder object from the
change request representing


341
00:17:35,736 --> 00:17:37,286
that new unsaved object.


342
00:17:37,616 --> 00:17:40,986
And then you can use that
placeholder to add the new asset


343
00:17:40,986 --> 00:17:45,396
to a collection or even
potentially a new placeholder


344
00:17:45,396 --> 00:17:46,166
for a collection.


345
00:17:48,076 --> 00:17:49,306
One other thing you can get


346
00:17:49,306 --> 00:17:52,836
from a placeholder object is you
can access the localIdentifier


347
00:17:52,836 --> 00:17:55,886
which is a unique string
that you can use later


348
00:17:55,886 --> 00:17:58,766
in your application to
fetch that object back even


349
00:17:58,766 --> 00:17:59,886
on another invocation.


350
00:18:01,736 --> 00:18:04,096
So what happens to
these changes?


351
00:18:05,766 --> 00:18:07,446
Well, the changes are done


352
00:18:07,446 --> 00:18:09,106
when the completion
handler is invoked.


353
00:18:10,016 --> 00:18:12,466
But the model objects
are read-only


354
00:18:12,466 --> 00:18:14,806
and they aren't automatically
refreshed or modified


355
00:18:14,806 --> 00:18:15,776
out from underneath you.


356
00:18:16,636 --> 00:18:19,336
But more important than these
two things when we're talking


357
00:18:19,336 --> 00:18:22,466
about changes, there's a really
important thing to understand.


358
00:18:23,536 --> 00:18:26,906
The changes that you requested
may incur side effects


359
00:18:27,636 --> 00:18:31,406
or may be influenced by
external changes coming


360
00:18:31,406 --> 00:18:32,126
in from elsewhere.


361
00:18:33,106 --> 00:18:35,766
In fact, there are a lot
of sources for change


362
00:18:35,766 --> 00:18:36,946
into the photo library.


363
00:18:37,216 --> 00:18:38,526
There's your application.


364
00:18:38,626 --> 00:18:40,066
There's the built-in
application.


365
00:18:40,376 --> 00:18:41,766
There's iCloud Photo Library,


366
00:18:42,036 --> 00:18:44,416
Cloud Photo Sharing
and my Photo Stream.


367
00:18:44,926 --> 00:18:47,366
And all of these things can
have an impact on the data


368
00:18:47,366 --> 00:18:48,176
that you're working with.


369
00:18:48,926 --> 00:18:51,816
So what we recommend is
that, instead of trying


370
00:18:51,816 --> 00:18:54,676
to take the result of a change
in your completion handler,


371
00:18:55,316 --> 00:18:58,406
you work with a single
change notification system


372
00:18:58,656 --> 00:19:00,566
to handle changes
there and reflect them


373
00:19:00,566 --> 00:19:03,606
to your user that way.


374
00:19:03,796 --> 00:19:06,556
So what happens is,
anytime there is a change


375
00:19:06,556 --> 00:19:09,646
to the photo library,
we'll publish a PHChange


376
00:19:09,686 --> 00:19:11,556
to registered observers.


377
00:19:12,616 --> 00:19:14,866
And that change is delivered
on a background queue


378
00:19:15,296 --> 00:19:18,596
and it provides details on
updated and deleted objects.


379
00:19:19,236 --> 00:19:22,276
But where it begins to
get really powerful is


380
00:19:22,276 --> 00:19:23,866
when you're working
with fetch results,


381
00:19:24,716 --> 00:19:27,566
where it can provide you
details on what indexes


382
00:19:27,566 --> 00:19:30,426
and objects were inserted,
updated, deleted or moved


383
00:19:30,726 --> 00:19:32,216
that apply to that fetch result.


384
00:19:33,516 --> 00:19:34,766
And I want to dig
a little deeper


385
00:19:34,766 --> 00:19:36,976
into the fetch result
change details.


386
00:19:38,026 --> 00:19:40,476
When you create a fetch
result by performing a fetch


387
00:19:40,476 --> 00:19:42,726
for a collection or any
other general-purpose fetch,


388
00:19:43,396 --> 00:19:45,906
the fetch result will
implicitly register itself


389
00:19:46,146 --> 00:19:48,936
with the photo library
for calculating changes.


390
00:19:49,816 --> 00:19:53,576
And all those changed details
are calculated in the background


391
00:19:53,816 --> 00:19:57,066
so they don't run while
your user is interacting


392
00:19:57,066 --> 00:19:57,926
with your application.


393
00:19:59,816 --> 00:20:03,456
If you're fetching a fetch
result and you're not interested


394
00:20:03,516 --> 00:20:05,486
in change details, you can opt


395
00:20:05,486 --> 00:20:08,796
out of the difference
calculation via one


396
00:20:08,796 --> 00:20:09,726
of those fetch options.


397
00:20:10,266 --> 00:20:13,296
But if you do want the details,


398
00:20:13,296 --> 00:20:18,046
if you want those incremental
differences, then it's important


399
00:20:18,046 --> 00:20:21,636
that you get the updated fetch
result for the fetch result


400
00:20:21,636 --> 00:20:26,746
that you started with from
the PHFetchResultChangeDetails


401
00:20:26,746 --> 00:20:27,336
object.


402
00:20:27,956 --> 00:20:29,626
And I'm going to walk
you through an example


403
00:20:29,626 --> 00:20:31,816
to demonstrate why
that's so important.


404
00:20:32,186 --> 00:20:36,166
When the photo library
receives a change,


405
00:20:36,726 --> 00:20:39,016
if you've registered
yourself as an observer,


406
00:20:39,316 --> 00:20:41,396
we'll call the
PhotoLibraryDidChange method


407
00:20:41,396 --> 00:20:43,376
and pass you the
PHChange instance.


408
00:20:43,916 --> 00:20:48,326
In this case, in this
example, which by the way,


409
00:20:48,326 --> 00:20:50,896
this example is taken from the
sample code that's provided


410
00:20:50,896 --> 00:20:53,996
with this session, so I've
omitted some of the details


411
00:20:53,996 --> 00:20:55,796
to make it a little
clearer on stage,


412
00:20:56,236 --> 00:20:58,666
but all of this is
available in the sample code


413
00:20:58,666 --> 00:21:02,336
that you can download
from the WWDC website.


414
00:21:03,476 --> 00:21:05,646
Anyway, getting back to that.


415
00:21:06,436 --> 00:21:08,086
The first thing we're
going to want to do


416
00:21:08,086 --> 00:21:12,816
in our change handler here is
to dispatch to the main queue.


417
00:21:12,816 --> 00:21:14,966
And the reason for that is
because we're going to work


418
00:21:14,966 --> 00:21:17,796
with our user interface
objects, our view controllers,


419
00:21:18,086 --> 00:21:20,976
and you know it's only safe to
access those on the main queue.


420
00:21:22,556 --> 00:21:24,576
So once we've dispatched


421
00:21:24,576 --> 00:21:27,316
to the main queue we'll
ask the change instance,


422
00:21:28,276 --> 00:21:30,826
"Were there any changed
details for the fetch result


423
00:21:30,826 --> 00:21:32,886
that we are working with
in our view controller?"


424
00:21:32,886 --> 00:21:36,496
And in this case, we've got -
I've represented self.assets.


425
00:21:36,496 --> 00:21:41,646
That's a fetch result that we're
presenting in a collection view.


426
00:21:42,726 --> 00:21:46,056
So if there's a change that
affects the collection view,


427
00:21:46,056 --> 00:21:47,336
the contents of that
collection view,


428
00:21:47,446 --> 00:21:48,876
we want to know what
those details are.


429
00:21:48,876 --> 00:21:51,226
So we'll ask the change instance
for those change details.


430
00:21:51,746 --> 00:21:55,666
And if there were any change
details then we know we need


431
00:21:55,666 --> 00:22:00,196
to update our fetch result based
on what those changes were.


432
00:22:00,536 --> 00:22:02,346
And the way to get
those details,


433
00:22:02,346 --> 00:22:04,656
or to get that updated fetch
result as I was saying,


434
00:22:04,916 --> 00:22:07,806
is to get it directly from
the change details object.


435
00:22:08,666 --> 00:22:10,826
The change details have
already done that work for us,


436
00:22:11,016 --> 00:22:13,856
and that way we're sure that the
other details we're going to ask


437
00:22:13,856 --> 00:22:16,096
for about inserts, updates
and deletes are going


438
00:22:16,096 --> 00:22:19,166
to exactly match up to the new
result that we're working with.


439
00:22:20,376 --> 00:22:21,966
So on the second slide here,


440
00:22:22,476 --> 00:22:26,056
I'm going to show you how
nicely this works with an object


441
00:22:26,056 --> 00:22:26,996
like the collectionView.


442
00:22:27,786 --> 00:22:29,446
So now we can tell
the collectionView


443
00:22:29,946 --> 00:22:32,716
to perform a batch
of updates and walk


444
00:22:32,716 --> 00:22:36,376
through the changed details to
see where there removed indexes?


445
00:22:36,596 --> 00:22:39,016
If there were, we'll
translate them into index paths


446
00:22:39,016 --> 00:22:41,256
that the collectionView
can understand and tell it


447
00:22:41,256 --> 00:22:44,796
to delete the items
at those paths.


448
00:22:44,966 --> 00:22:46,986
Similarly, we'll ask
the change details,


449
00:22:46,986 --> 00:22:49,186
were there inserted indexes
in that fetch result?


450
00:22:49,806 --> 00:22:51,936
If there were, we'll tell
the collectionView again


451
00:22:52,296 --> 00:22:55,546
to insert items at those paths.


452
00:22:55,546 --> 00:22:59,146
And same with changed indexes
that affect the fetch results.


453
00:22:59,486 --> 00:23:01,876
We'll ask the collectionVew
to reload those items.


454
00:23:03,106 --> 00:23:06,796
So now I'd like to take a moment
to show you a demonstration


455
00:23:06,796 --> 00:23:10,706
of the sample code that we've
provided with this session.


456
00:23:11,476 --> 00:23:12,536
So the first thing I'm going


457
00:23:12,536 --> 00:23:16,876
to do before I actually run the
sample app is just give you a


458
00:23:16,876 --> 00:23:19,326
view of the photo library
that we're working with here.


459
00:23:20,576 --> 00:23:23,676
And so I'm running the
iOS 8 built-in Photos app.


460
00:23:24,906 --> 00:23:28,496
And you can see I've got
a series of Smart Albums


461
00:23:28,496 --> 00:23:33,046
in this album list here and, in
particular, I've got nine photos


462
00:23:33,046 --> 00:23:34,106
in my Favorites Library.


463
00:23:34,636 --> 00:23:38,486
Now I'm going to switch over
to the sample application


464
00:23:40,916 --> 00:23:45,636
and we've got a listing here
with a special entry on top,


465
00:23:45,886 --> 00:23:47,526
all the photos in
the Photo Library.


466
00:23:47,526 --> 00:23:48,556
We can take a quick look.


467
00:23:48,556 --> 00:23:51,136
You can see we've got a pretty
good-sized library here.


468
00:23:51,826 --> 00:23:53,666
But we have also got
those Smart Albums.


469
00:23:54,186 --> 00:23:58,506
So I'm going to tap
on the Favorites Album


470
00:23:59,676 --> 00:24:01,646
and you can see it's
the same contents.


471
00:24:02,746 --> 00:24:05,016
But it's pretty obvious
that one of the photos


472
00:24:05,016 --> 00:24:06,286
in this group doesn't belong.


473
00:24:06,916 --> 00:24:11,236
So I'm going to tap on my moose
and you can see when you look


474
00:24:11,236 --> 00:24:14,556
at the sample code, we're going
to use - I'll bring up the menu


475
00:24:14,556 --> 00:24:16,656
with this Edit button.


476
00:24:16,896 --> 00:24:19,766
When I press Unfavorite,
the code is going


477
00:24:19,766 --> 00:24:22,556
to create a change
request to set that asset


478
00:24:22,966 --> 00:24:24,506
as not being a Favorite anymore.


479
00:24:25,986 --> 00:24:30,966
Okay? When I back out to the
Favorites smart album you'll


480
00:24:30,966 --> 00:24:32,206
notice the moose is gone.


481
00:24:32,896 --> 00:24:35,816
Nothing in the code actually
asked to remove that moose


482
00:24:35,816 --> 00:24:36,816
from that Smart Album.


483
00:24:37,056 --> 00:24:38,876
This is one of those side
effects I was talking


484
00:24:38,876 --> 00:24:39,956
about where a change


485
00:24:39,956 --> 00:24:42,676
that I requested has
triggered a secondary change


486
00:24:42,936 --> 00:24:45,436
that was reflected in
the user interface.


487
00:24:45,946 --> 00:24:51,686
Now if we switch back to the
built-in photos application,


488
00:24:52,056 --> 00:24:55,096
you can see that change is
immediately reflected there


489
00:24:55,096 --> 00:24:55,546
as well.


490
00:24:55,976 --> 00:24:58,996
The photo's been taken out of
that Favorites Smart Album, too.


491
00:25:00,046 --> 00:25:02,156
Now there's one other
thing I want to quickly go


492
00:25:02,156 --> 00:25:06,556
through to show you in
terms of the sample code,


493
00:25:06,896 --> 00:25:11,496
and that is if I go into the
photo list and I find a photo


494
00:25:11,496 --> 00:25:15,256
that I think the user wants to
delete, where I as the user want


495
00:25:15,256 --> 00:25:18,666
to delete, I'm going to
go ahead and create a -


496
00:25:18,666 --> 00:25:19,886
if you look at the sample code -


497
00:25:19,886 --> 00:25:22,086
you'll see I create a
Delete change request.


498
00:25:22,566 --> 00:25:25,946
But there's no code
in the application


499
00:25:25,946 --> 00:25:27,006
to provide this prompt.


500
00:25:27,276 --> 00:25:30,716
This is the photo library
performing some work


501
00:25:30,716 --> 00:25:32,626
out-of-process to
let the user know


502
00:25:32,626 --> 00:25:35,916
that an application has
requested a change that's


503
00:25:35,916 --> 00:25:38,916
destructive to their library
and asking for confirmation.


504
00:25:39,166 --> 00:25:42,516
So you can see, "Allow Sample
Photos App to delete 1 photo?"


505
00:25:42,516 --> 00:25:45,146
And in this case I'm
not going to delete it.


506
00:25:45,456 --> 00:25:48,696
But you can see how some of
the work that is performed


507
00:25:48,696 --> 00:25:51,076
out of process can have such
an impact on your changes.


508
00:25:53,686 --> 00:25:54,126
All right.


509
00:25:54,456 --> 00:25:58,936
Well, that covers the work with
model objects that I wanted


510
00:25:58,936 --> 00:26:01,036
to introduce from
the Photos Framework.


511
00:26:01,996 --> 00:26:03,296
But there's a lot more
that you could see


512
00:26:03,296 --> 00:26:06,216
in the sample application when
you look at all the images


513
00:26:06,216 --> 00:26:07,826
and image data that
was presented.


514
00:26:08,256 --> 00:26:11,046
So I'd like to invite Karl
up to talk about image


515
00:26:11,046 --> 00:26:11,926
and video data, thanks.


516
00:26:12,516 --> 00:26:17,596
[ Applause ]


517
00:26:18,096 --> 00:26:19,136
>> So, good morning.


518
00:26:19,136 --> 00:26:20,056
My name is Karl Hsu.


519
00:26:20,056 --> 00:26:21,906
I also work on the
iOS Photos Frameworks.


520
00:26:23,006 --> 00:26:25,816
So we've just spent a
little while talking


521
00:26:25,816 --> 00:26:28,816
about how you can discover
and work with the structure


522
00:26:28,896 --> 00:26:30,196
of the user's photo library.


523
00:26:30,196 --> 00:26:30,926
And that's great.


524
00:26:31,236 --> 00:26:33,266
But we're missing
a key ingredient


525
00:26:33,566 --> 00:26:35,406
because it is the
user's photo library.


526
00:26:35,946 --> 00:26:37,446
How do we actually get a hold of


527
00:26:37,446 --> 00:26:39,906
and display image
and video data?


528
00:26:41,456 --> 00:26:44,406
Before we begin,
it's useful to know


529
00:26:44,746 --> 00:26:49,736
that the user's photo library
actually caches a variety


530
00:26:49,736 --> 00:26:51,636
of representations
for each asset.


531
00:26:51,866 --> 00:26:54,916
For images, we might
have representations


532
00:26:54,916 --> 00:26:58,476
that vary all the way from the
full size original all the way


533
00:26:58,476 --> 00:26:59,816
down to small thumbnails.


534
00:27:00,526 --> 00:27:04,456
Videos might be cached in a
variety of bitrates and sizes.


535
00:27:04,716 --> 00:27:06,836
They might even be
streaming, okay?


536
00:27:07,486 --> 00:27:11,256
With iCloud Photo Library we
might not actually have all


537
00:27:11,286 --> 00:27:13,896
of those representations
cached on disks.


538
00:27:13,896 --> 00:27:15,906
Some or all of them,
or in some cases,


539
00:27:15,906 --> 00:27:17,376
even none of them
might be available.


540
00:27:18,246 --> 00:27:20,206
That makes it kind of
a pain when you want


541
00:27:20,206 --> 00:27:21,206
to display image data.


542
00:27:21,876 --> 00:27:24,346
So what we have is
we provide you


543
00:27:24,906 --> 00:27:26,806
with a class, the
PHImageManager.


544
00:27:27,306 --> 00:27:31,956
The PHImageManager's job is to
abstract a way, sort of this,


545
00:27:31,956 --> 00:27:34,016
your decision, from
having to decide, you know,


546
00:27:34,016 --> 00:27:36,886
do I want a thumbnail, do I
want a medium size, a large?


547
00:27:36,986 --> 00:27:37,576
What do you want?


548
00:27:37,856 --> 00:27:40,246
So basically it's
a usage-based API.


549
00:27:40,756 --> 00:27:43,606
For images, you tell us how
big do you want the image?


550
00:27:43,606 --> 00:27:44,886
What are you trying
to do with it?


551
00:27:44,886 --> 00:27:47,016
Are you trying to display it
in a small grid on the screen?


552
00:27:47,016 --> 00:27:48,916
Are you trying to -
you want the full size?


553
00:27:48,916 --> 00:27:50,236
You want something
that's screen size?


554
00:27:50,236 --> 00:27:51,866
And we'll try to find the right,


555
00:27:51,866 --> 00:27:54,146
the best available
representation we have for you.


556
00:27:54,666 --> 00:27:55,776
Similarly, videos.


557
00:27:56,006 --> 00:27:57,426
You tell us what
quality you'd like


558
00:27:57,426 --> 00:27:58,736
and what you plan
on doing with it.


559
00:27:58,736 --> 00:28:00,106
Is it just for user playback?


560
00:28:00,106 --> 00:28:01,466
Are you planning
on exporting it?


561
00:28:01,466 --> 00:28:03,076
Or are you going to work
with it in some other way?


562
00:28:03,666 --> 00:28:05,946
And we'll try to pick
the right representation.


563
00:28:07,506 --> 00:28:12,416
One key thing here is that
unlike the model object API,


564
00:28:12,916 --> 00:28:14,486
which is largely synchronous,


565
00:28:15,336 --> 00:28:19,486
the image request APIs
are largely asynchronous.


566
00:28:20,176 --> 00:28:23,356
And that's because even if
the data is available locally,


567
00:28:23,356 --> 00:28:26,596
we may have to do work before
we can hand you the data.


568
00:28:26,596 --> 00:28:28,146
JPEGs have to be
read off a disk.


569
00:28:28,146 --> 00:28:29,136
They have to be decoded.


570
00:28:29,726 --> 00:28:33,716
But the most important case
is in the case of something


571
00:28:33,716 --> 00:28:34,996
like iCloud Photo Library,


572
00:28:35,256 --> 00:28:38,636
we may not have the data
locally available at all, right?


573
00:28:38,636 --> 00:28:40,346
We may have to go
out to the network,


574
00:28:40,676 --> 00:28:44,036
get it and then bring
it back to you.


575
00:28:44,266 --> 00:28:46,676
So let's take a quick look
at what that looks like.


576
00:28:46,926 --> 00:28:49,856
This is a very straightforward
fetch request.


577
00:28:49,996 --> 00:28:51,516
I'm sorry, image request.


578
00:28:52,636 --> 00:28:55,336
In this case we're
trying to fill sort


579
00:28:55,336 --> 00:28:58,166
of a straightforward
four-across grid on an iPhone.


580
00:28:58,536 --> 00:29:01,106
It turns out to be
about 160 by 160 pixels.


581
00:29:01,696 --> 00:29:03,556
So we set the target size,


582
00:29:03,556 --> 00:29:06,336
we tell it that the image
should fill that target size,


583
00:29:06,336 --> 00:29:07,876
and then we issue the request.


584
00:29:07,876 --> 00:29:08,716
And when it comes back,


585
00:29:09,266 --> 00:29:11,706
if there's any image data
available, we'll hand it to you.


586
00:29:11,706 --> 00:29:14,916
The Info Dictionary is there and
we'll tell you a little bit more


587
00:29:14,916 --> 00:29:16,146
about what we handed you back.


588
00:29:16,146 --> 00:29:17,826
Specifically, is
it a substandard?


589
00:29:17,826 --> 00:29:19,096
Is it the right size?


590
00:29:19,656 --> 00:29:19,966
It's good.


591
00:29:21,316 --> 00:29:23,016
So let's take a look
at a little bit more


592
00:29:23,016 --> 00:29:24,356
of an advanced image request.


593
00:29:25,486 --> 00:29:29,086
So when you want to make
a more advanced request,


594
00:29:29,086 --> 00:29:30,986
you create an
ImageRequestOption.


595
00:29:31,876 --> 00:29:34,516
In this case, after
I create the option,


596
00:29:35,096 --> 00:29:37,356
I really want this photo, right?


597
00:29:38,046 --> 00:29:40,136
So I'm going to tell the
option that, yes, it's allowed


598
00:29:40,136 --> 00:29:41,236
to go out to the network.


599
00:29:41,236 --> 00:29:43,906
It can go out to iCloud
and fetch the data down.


600
00:29:44,156 --> 00:29:45,786
And because that might
take a little bit of time,


601
00:29:45,786 --> 00:29:47,306
I'd like a progress
handler as well.


602
00:29:47,786 --> 00:29:48,936
Again, this is a good idea.


603
00:29:48,936 --> 00:29:50,526
You can always show
the user that we're,


604
00:29:50,526 --> 00:29:52,336
in fact, doing work, okay?


605
00:29:52,336 --> 00:29:56,036
And then, finally, just
set it as an option


606
00:29:56,036 --> 00:29:57,486
when you actually
make the request.


607
00:30:00,396 --> 00:30:05,146
I want to spend a second
and talk about the callback


608
00:30:05,676 --> 00:30:07,316
that actually produces the data.


609
00:30:07,696 --> 00:30:09,176
There's two things
to keep in mind.


610
00:30:09,176 --> 00:30:14,016
Again, this block will be
called back on the main thread.


611
00:30:14,546 --> 00:30:17,296
And the reason is
because the feeling is


612
00:30:17,296 --> 00:30:18,916
that generally you
want to use it for -


613
00:30:18,916 --> 00:30:19,996
if it's an asynchronous
callback,


614
00:30:19,996 --> 00:30:22,046
you're typically using it for
display on the main thread.


615
00:30:22,726 --> 00:30:24,856
There's an optional way to
make a synchronous request


616
00:30:24,856 --> 00:30:26,286
if you're working in
background threads.


617
00:30:26,736 --> 00:30:28,656
Okay. The other thing
is actually,


618
00:30:29,306 --> 00:30:32,516
this block can be called
multiple times for each request


619
00:30:32,926 --> 00:30:37,906
because it turns out that a
really common UIDesign is the


620
00:30:37,906 --> 00:30:40,926
user wants to see their image
data as soon as possible.


621
00:30:41,546 --> 00:30:44,726
So if we have any image
data available we'll return


622
00:30:44,726 --> 00:30:46,586
that to you right away.


623
00:30:47,836 --> 00:30:50,346
And then, if that
isn't sufficient


624
00:30:50,466 --> 00:30:53,116
to fulfill your request,
we go out,


625
00:30:53,526 --> 00:30:56,606
possibly to the disk,
possibly to iCloud.


626
00:30:56,836 --> 00:30:58,796
We'll go get the data
and, when it arrives,


627
00:30:58,856 --> 00:31:00,966
then we'll call it
a second time.


628
00:31:01,356 --> 00:31:03,356
[ Applause ]


629
00:31:03,696 --> 00:31:04,076
Thank you.


630
00:31:04,996 --> 00:31:06,806
Of course, if the
data's already available,


631
00:31:07,086 --> 00:31:08,886
then you only get
the first callout.


632
00:31:09,396 --> 00:31:12,606
Let's take a quick look
at requesting videos.


633
00:31:12,606 --> 00:31:15,616
So in this case, the user
has scrolled to some video


634
00:31:15,616 --> 00:31:17,056
and they just want playback.


635
00:31:17,216 --> 00:31:19,946
So we're requesting a
PlayerItem for the video.


636
00:31:20,006 --> 00:31:22,366
When we get back a player item
you can create an AVPlayer


637
00:31:22,366 --> 00:31:23,376
out of it.


638
00:31:23,376 --> 00:31:24,776
It looks very much
like the Image Request.


639
00:31:24,776 --> 00:31:25,706
It's pretty straightforward.


640
00:31:26,656 --> 00:31:31,196
And, again, if we want a more
advanced request - let's say,


641
00:31:31,586 --> 00:31:35,416
the user now wants
to push this video


642
00:31:35,446 --> 00:31:37,846
up to their own sharing service,
a different sharing service.


643
00:31:38,166 --> 00:31:40,586
So now we're going to
create a VideoRequestOption.


644
00:31:41,046 --> 00:31:44,736
And, of course, because
we're sharing it,


645
00:31:44,846 --> 00:31:47,806
we want it to be high quality.


646
00:31:47,806 --> 00:31:51,896
Maybe you're on an iPhone and
you wanted the full 1080p, okay?


647
00:31:52,516 --> 00:31:53,916
So, we want it to
be high quality


648
00:31:53,976 --> 00:31:55,386
and if it's not available -


649
00:31:56,036 --> 00:31:57,266
because we were playing
it before.


650
00:31:57,266 --> 00:31:58,346
That might have been streaming.


651
00:31:58,876 --> 00:32:00,626
We are, you know, we say,
okay, it's all right.


652
00:32:00,626 --> 00:32:02,286
You can go out to the
network and download it.


653
00:32:02,576 --> 00:32:04,866
And it's particularly
important for videos, of course,


654
00:32:04,866 --> 00:32:08,106
to have progress because
videos can be very large.


655
00:32:08,696 --> 00:32:11,026
And then, finally,
we set the option.


656
00:32:11,326 --> 00:32:13,636
Note here that we're actually
using a slightly different API.


657
00:32:13,636 --> 00:32:18,486
We're specifically requesting
an export session rather


658
00:32:18,486 --> 00:32:19,966
than a playback item.


659
00:32:20,496 --> 00:32:22,356
So this is good.


660
00:32:23,596 --> 00:32:26,286
We can fetch individual images,
and that works pretty well.


661
00:32:26,446 --> 00:32:30,656
But, it's really common
for a photo app to want


662
00:32:30,656 --> 00:32:32,066
to show lots of images.


663
00:32:32,066 --> 00:32:33,566
The user doesn't want to scroll


664
00:32:33,566 --> 00:32:34,966
through their images
one at a time.


665
00:32:35,326 --> 00:32:37,226
They want to see
a grid of images


666
00:32:37,226 --> 00:32:41,946
in either a regular square grid
or a more interesting, you know,


667
00:32:41,946 --> 00:32:43,516
tile and brick mortar layout.


668
00:32:43,816 --> 00:32:45,626
That poses some performance
problems.


669
00:32:45,626 --> 00:32:47,936
Even if the individual
images are relatively cheap,


670
00:32:47,936 --> 00:32:48,676
there's a lot of them.


671
00:32:49,216 --> 00:32:50,276
So what do we do?


672
00:32:50,276 --> 00:32:52,836
The general thing that people
want to do is you create a cache


673
00:32:52,836 --> 00:32:54,446
around what the user's
looking at.


674
00:32:54,446 --> 00:32:56,256
You figure out which
direction they're going


675
00:32:56,256 --> 00:32:58,346
and you start caching
ahead of them


676
00:32:58,346 --> 00:32:59,666
and you stop caching behind.


677
00:33:00,126 --> 00:33:01,506
So this is a pain, right?


678
00:33:01,826 --> 00:33:03,856
You kind of have to
track all of this data.


679
00:33:03,856 --> 00:33:06,276
You have to know to retrieve
stuff from that cache.


680
00:33:06,496 --> 00:33:08,676
We've already got an API
for doing a lot of this.


681
00:33:09,616 --> 00:33:13,246
And that API is the
PHCachingImageManager, okay?


682
00:33:13,766 --> 00:33:17,216
The caching image manager's job
is exactly what it sounds like.


683
00:33:17,216 --> 00:33:20,496
Its job is to cache images
on your behalf, okay?


684
00:33:20,966 --> 00:33:23,616
As you make requests against
the caching image manager,


685
00:33:23,686 --> 00:33:26,526
if it's in its cache, it
will return that directly.


686
00:33:26,526 --> 00:33:28,736
And if not, it will
automatically fall back


687
00:33:28,736 --> 00:33:30,416
to the default image
request behavior.


688
00:33:31,066 --> 00:33:33,116
Now the general suggestion is


689
00:33:33,116 --> 00:33:36,006
that you create a caching
image manager for each sort


690
00:33:36,006 --> 00:33:38,776
of distinct view controller
that you have in your app.


691
00:33:39,006 --> 00:33:41,816
That's because each view
controller typically has its own


692
00:33:41,816 --> 00:33:45,126
display of image data, right?


693
00:33:45,126 --> 00:33:47,856
You know, a grid view
controller is going to behave -


694
00:33:47,856 --> 00:33:49,596
it's going to need
different caching behaviors


695
00:33:49,596 --> 00:33:52,296
than like a one-up view where
you're scrolling through.


696
00:33:53,616 --> 00:33:55,496
So let's take a quick look at
what I'm talking about here.


697
00:33:55,496 --> 00:33:57,486
So we have the user's phone.


698
00:33:58,226 --> 00:34:00,106
They're looking at
some nice pictures


699
00:34:00,106 --> 00:34:01,386
and they're scrolling
through it.


700
00:34:01,676 --> 00:34:03,056
Now this is what the user sees.


701
00:34:03,996 --> 00:34:07,376
But we know that underneath what
they actually have is this sort


702
00:34:07,376 --> 00:34:10,856
of long scroll view of
photos above and behind.


703
00:34:10,956 --> 00:34:13,096
And what they only see
is the visible range.


704
00:34:13,706 --> 00:34:17,366
So as they're scrolling down,
we want to start caching ahead


705
00:34:17,366 --> 00:34:20,636
of where they are so that the
data's available immediately


706
00:34:21,085 --> 00:34:23,496
when you need to
display it to the user.


707
00:34:23,946 --> 00:34:25,616
And, of course, for
memory reasons,


708
00:34:25,616 --> 00:34:27,156
we want to stop caching behind.


709
00:34:27,505 --> 00:34:29,686
You just sort of calculate
this range and maintain it,


710
00:34:30,266 --> 00:34:32,726
and as you scroll
just keep updating.


711
00:34:33,896 --> 00:34:38,106
Okay? The API for the caching
image manager is actually


712
00:34:38,106 --> 00:34:38,936
pretty straightforward.


713
00:34:39,376 --> 00:34:42,176
You calculate what's
going to be visible soon.


714
00:34:42,406 --> 00:34:43,735
You tell us to start caching it.


715
00:34:44,366 --> 00:34:50,176
And as stuff is scrolled off,
you tell us to stop caching it.


716
00:34:50,766 --> 00:34:54,726
The only key thing here is when
you start and stop caching,


717
00:34:56,036 --> 00:34:58,936
use the same target
size, content mode,


718
00:34:58,936 --> 00:35:02,066
and options that you will use
for the actual request image.


719
00:35:02,686 --> 00:35:05,086
Otherwise, we don't
know how to look it up.


720
00:35:05,346 --> 00:35:08,976
So now we know how to get hold
of image data and we know how


721
00:35:08,976 --> 00:35:10,246
to get a hold of it fast.


722
00:35:10,806 --> 00:35:12,746
We know how to get a
hold of video data.


723
00:35:12,746 --> 00:35:16,096
But, of course, just looking
at data's only half the story.


724
00:35:16,906 --> 00:35:19,466
Users love to touch
their photos.


725
00:35:19,466 --> 00:35:22,706
They want to adjust them, crop
it so it looks just right,


726
00:35:22,706 --> 00:35:24,436
apply a filter so
their kids look,


727
00:35:24,436 --> 00:35:26,196
you know, extra special pretty.


728
00:35:26,706 --> 00:35:28,776
So let's talk about editing.


729
00:35:30,306 --> 00:35:34,316
If the asset is editable,
the edits are now in place.


730
00:35:34,906 --> 00:35:38,086
Okay? You no longer need to
save your edits as a new asset.


731
00:35:38,086 --> 00:35:41,166
You can edit any
asset that's editable.


732
00:35:41,766 --> 00:35:45,516
The edits are, just
like in the real photos


733
00:35:45,516 --> 00:35:46,566
out there, are nondestructive.


734
00:35:46,566 --> 00:35:48,036
The user can always revert.


735
00:35:48,106 --> 00:35:49,816
You can also programmatically
revert.


736
00:35:50,966 --> 00:35:53,026
Changes that you make
are visible everywhere.


737
00:35:53,306 --> 00:35:54,516
They'll show up in your app.


738
00:35:54,636 --> 00:35:55,906
They show up in the Photos app.


739
00:35:55,906 --> 00:36:00,116
They show up in mail
messages, other 3rd-party apps.


740
00:36:00,666 --> 00:36:04,256
And with iCloud Photo Library
they're actually visible


741
00:36:04,256 --> 00:36:05,956
across all of your
devices as well.


742
00:36:07,166 --> 00:36:09,556
Okay. So how does editing work?


743
00:36:10,156 --> 00:36:14,586
Well, at a very simple,
basic level,


744
00:36:14,666 --> 00:36:16,606
you ask us for an input image.


745
00:36:18,066 --> 00:36:21,036
We hand it to you.


746
00:36:21,146 --> 00:36:24,196
And you do whatever
transformations you want


747
00:36:24,196 --> 00:36:24,706
to do on it.


748
00:36:24,706 --> 00:36:25,496
You can crop it.


749
00:36:25,496 --> 00:36:26,356
You can edit it.


750
00:36:26,356 --> 00:36:30,456
You can go and do, you know,
pixel operations on it.


751
00:36:30,456 --> 00:36:33,956
And when you're done,
you generate a new image,


752
00:36:33,956 --> 00:36:36,746
a new output image,
and you hand it to us,


753
00:36:36,746 --> 00:36:38,316
and then we save it
on top of the asset.


754
00:36:39,366 --> 00:36:39,756
That's it.


755
00:36:40,676 --> 00:36:43,976
So let's take a look at
how that works, okay?


756
00:36:44,836 --> 00:36:47,016
First you want to ask
us for the input image.


757
00:36:47,586 --> 00:36:52,386
You ask the asset for its
content editing input, okay?


758
00:36:53,056 --> 00:36:54,876
And what that comes with is,


759
00:36:54,876 --> 00:36:57,516
the content editing input
carries a bunch of information


760
00:36:57,516 --> 00:37:00,746
that you'll need in order
to actually do your work.


761
00:37:01,086 --> 00:37:03,076
It gives you a URL
with a reference


762
00:37:03,076 --> 00:37:04,236
to the full size asset.


763
00:37:04,456 --> 00:37:06,376
It gives you some
orientation information.


764
00:37:06,946 --> 00:37:10,026
So, in this case, I'm
creating a Core Image image


765
00:37:10,476 --> 00:37:11,936
and I'm sure I'm
going to be using some


766
00:37:11,936 --> 00:37:14,656
of the new filter stuff that
we have available for you now.


767
00:37:15,266 --> 00:37:17,566
And I'm going to do some work.


768
00:37:17,876 --> 00:37:19,896
So, I've done some work.


769
00:37:19,896 --> 00:37:20,696
You just cropped it.


770
00:37:20,866 --> 00:37:22,006
Maybe you applied a filter.


771
00:37:22,006 --> 00:37:22,546
It looks great.


772
00:37:23,656 --> 00:37:24,326
How do we save it?


773
00:37:26,006 --> 00:37:29,126
Well, you create, ta-da,
a Content Editing Output.


774
00:37:30,166 --> 00:37:33,876
You take your data, the
fully-rendered output,


775
00:37:33,876 --> 00:37:36,056
save it as a JPEG,
write it to the URL,


776
00:37:36,056 --> 00:37:38,296
and then you set
the adjustmentData.


777
00:37:39,006 --> 00:37:40,876
I'll talk about the
adjustmentData in just a second.


778
00:37:41,176 --> 00:37:42,676
And then how do you save it?


779
00:37:42,676 --> 00:37:45,196
It's the same as saving
any other model change.


780
00:37:45,556 --> 00:37:49,016
You create an
PHAssetChangeRequest.


781
00:37:49,556 --> 00:37:51,506
You sent the content
editing output on it,


782
00:37:52,416 --> 00:37:54,706
put the whole thing in a
change block, and that's it.


783
00:37:55,406 --> 00:37:57,806
So, it's a little
bit misleading,


784
00:37:57,806 --> 00:37:59,516
actually when I said
it was that simple.


785
00:37:59,726 --> 00:38:02,476
So there's another
wrinkle, which is,


786
00:38:03,036 --> 00:38:07,926
what if someone has
already edited that image?


787
00:38:08,926 --> 00:38:12,176
Well, the key point
here is that actually


788
00:38:12,766 --> 00:38:17,426
when you edit an image you
actually have the base image


789
00:38:18,136 --> 00:38:19,296
and some adjustment data.


790
00:38:19,626 --> 00:38:21,916
Your output image, the thing
that you give us at the end,


791
00:38:21,916 --> 00:38:22,866
is actually the result


792
00:38:22,866 --> 00:38:25,656
of applying this
adjustment to the base image.


793
00:38:26,266 --> 00:38:31,846
So, really, what we hand you
is the base image plus whatever


794
00:38:31,846 --> 00:38:33,926
adjustment data is
already on that image.


795
00:38:34,896 --> 00:38:37,266
And that way the user
can continue editing


796
00:38:37,406 --> 00:38:41,286
as if they had never left
their editing session, right?


797
00:38:41,486 --> 00:38:45,726
You do a crop-down and then what
we hand you is the original plus


798
00:38:45,726 --> 00:38:48,286
the crop information so that
you can show the user the crop,


799
00:38:48,286 --> 00:38:50,366
that they can extend
the crop in and out.


800
00:38:50,366 --> 00:38:51,546
They can remove it entirely.


801
00:38:51,546 --> 00:38:52,266
They can change it.


802
00:38:52,926 --> 00:38:58,436
And when you're done, you
hand us your output image


803
00:38:59,536 --> 00:39:01,216
and the new adjustment data.


804
00:39:01,536 --> 00:39:03,006
So that cycle will
just continue.


805
00:39:03,006 --> 00:39:06,286
So the next person that asks
will get back the base image


806
00:39:06,286 --> 00:39:08,426
plus the new adjustment data.


807
00:39:09,736 --> 00:39:11,886
So how do you save
the adjustment data?


808
00:39:11,886 --> 00:39:13,876
Well, the adjustment
data actually can be -


809
00:39:13,876 --> 00:39:16,336
you use a PHAdjustmentData
object,


810
00:39:16,336 --> 00:39:20,116
but really the data can be
whatever you want, all right?


811
00:39:20,486 --> 00:39:22,926
For instance, it could be
the name and parameters


812
00:39:22,926 --> 00:39:24,236
for a Core Image filter.


813
00:39:24,456 --> 00:39:28,586
It could be anything that you
want that describes your edits.


814
00:39:30,226 --> 00:39:33,596
Notice here that actually beyond
just that data we also ask you


815
00:39:33,596 --> 00:39:36,296
to include a format
identifier and a format version.


816
00:39:37,616 --> 00:39:40,146
They basically are a way for you


817
00:39:40,146 --> 00:39:43,766
to identify what
edit it actually is.


818
00:39:43,766 --> 00:39:44,906
Who did this edit?


819
00:39:44,906 --> 00:39:46,156
What's the format of it?


820
00:39:46,666 --> 00:39:50,266
Okay? And I'll talk a little
bit more about that in a second.


821
00:39:50,756 --> 00:39:54,286
So, I misled you again.


822
00:39:54,746 --> 00:39:56,636
There is one additional
case, of course.


823
00:39:57,156 --> 00:39:59,976
What if someone else
had edited the image?


824
00:40:00,076 --> 00:40:04,786
The scenario that I
described before is great


825
00:40:04,786 --> 00:40:07,046
if you were the one who
previously edited it.


826
00:40:07,046 --> 00:40:11,106
But if somebody went to App
A and they applied a crop?


827
00:40:11,106 --> 00:40:15,926
And then they go to App B and
they want to do more editing?


828
00:40:16,236 --> 00:40:19,216
Well, you have to tell us
whether you understand the


829
00:40:19,216 --> 00:40:19,866
adjustment data.


830
00:40:19,866 --> 00:40:20,516
We'll ask you.


831
00:40:20,516 --> 00:40:21,896
We'll give you the
PHAdjustmentData.


832
00:40:22,776 --> 00:40:23,496
And you tell us.


833
00:40:23,986 --> 00:40:25,376
Do you understand what this is?


834
00:40:25,836 --> 00:40:26,596
So, looking at this,


835
00:40:26,596 --> 00:40:28,666
this actually seems
relatively straightforward


836
00:40:28,986 --> 00:40:30,566
but we're not putting
any restrictions


837
00:40:30,566 --> 00:40:33,136
on what the format identifier
and the format version can be.


838
00:40:33,666 --> 00:40:35,956
Several developers from
different companies could,


839
00:40:35,956 --> 00:40:39,106
for instance, get together
and define a common identifier


840
00:40:39,106 --> 00:40:42,066
and version and, you know,
adjustment data format.


841
00:40:42,066 --> 00:40:45,226
And that way the user could move
seamlessly between those apps.


842
00:40:45,226 --> 00:40:48,146
Okay. But let's see
what happens,


843
00:40:48,236 --> 00:40:51,416
depending on what you return
when we ask you this question,


844
00:40:51,416 --> 00:40:53,176
can you understand this?


845
00:40:53,436 --> 00:40:55,026
Do you understand it?


846
00:40:55,406 --> 00:40:56,566
Yes. You say, yes.


847
00:40:56,746 --> 00:40:57,276
That's great.


848
00:40:57,516 --> 00:41:00,706
We'll hand you the base
image and the adjustment data


849
00:41:00,706 --> 00:41:03,786
and you can behave as if
the user had just sort


850
00:41:03,786 --> 00:41:05,616
of turned around, waited
a second, and come back


851
00:41:05,616 --> 00:41:06,706
and started editing again.


852
00:41:07,266 --> 00:41:08,656
That's sort of the ideal case.


853
00:41:08,946 --> 00:41:12,336
But what if you tell
no, you don't?


854
00:41:12,636 --> 00:41:13,886
Well, in this case,
unfortunately,


855
00:41:13,886 --> 00:41:14,816
we don't have any choice.


856
00:41:14,816 --> 00:41:16,826
We have to hand you the
fully rendered output


857
00:41:16,826 --> 00:41:17,706
from the previous edit.


858
00:41:17,706 --> 00:41:21,576
So the user can continue
editing but they can't back out.


859
00:41:21,576 --> 00:41:25,336
Like, in this case, the previous
app applied a noir filter


860
00:41:25,576 --> 00:41:27,346
and it's effectively
blocking my filter.


861
00:41:27,346 --> 00:41:29,036
We've thrown away the
color information.


862
00:41:29,036 --> 00:41:29,536
We don't have it.


863
00:41:30,206 --> 00:41:33,206
If the user wants to go
back, they basically have


864
00:41:33,236 --> 00:41:34,486
to revert back to original.


865
00:41:35,326 --> 00:41:38,186
Okay. So, let's take
a quick demo.


866
00:41:39,196 --> 00:41:39,836
So, here we are.


867
00:41:40,446 --> 00:41:41,866
So, this is what we had before.


868
00:41:42,586 --> 00:41:44,436
And I want to take a look.


869
00:41:45,956 --> 00:41:46,536
Let's see.


870
00:41:46,536 --> 00:41:47,916
Let's look at our
Favorites again.


871
00:41:49,636 --> 00:41:51,476
And here we go.


872
00:41:51,986 --> 00:41:52,856
She looks very nice.


873
00:41:53,926 --> 00:41:55,606
But I want to play
with it a little bit.


874
00:41:55,606 --> 00:41:57,296
I think that this
photo could be better.


875
00:41:58,706 --> 00:42:02,006
So, actually, I'm going
to - let's try Posterize.


876
00:42:03,066 --> 00:42:03,876
You know what?


877
00:42:03,876 --> 00:42:06,106
I didn't - I don't know.


878
00:42:06,176 --> 00:42:07,816
That doesn't look
quite right to me.


879
00:42:08,706 --> 00:42:11,496
Okay? So at this point we
started with the original image


880
00:42:11,496 --> 00:42:12,566
and there are no adjustments.


881
00:42:12,566 --> 00:42:14,206
So we didn't even ask,
"Do you understand?"


882
00:42:14,206 --> 00:42:14,906
because it doesn't matter.


883
00:42:15,336 --> 00:42:16,326
We have the base image.


884
00:42:16,656 --> 00:42:18,796
This time, when I go
into edit, what's going


885
00:42:18,796 --> 00:42:22,496
to happen is we're going to
say, do you understand the edit?


886
00:42:22,496 --> 00:42:24,536
And this app happens
to be the same app.


887
00:42:24,536 --> 00:42:25,816
So I says yes, I understand.


888
00:42:26,156 --> 00:42:29,386
So this time I hand
you the base image,


889
00:42:29,846 --> 00:42:32,826
which is effectively the
original, plus the adjustment


890
00:42:32,826 --> 00:42:35,946
that did the Posterize
which allows us


891
00:42:37,236 --> 00:42:38,206
to switch it completely.


892
00:42:38,206 --> 00:42:40,386
And now it's in Sepia, right?


893
00:42:40,436 --> 00:42:43,116
But it's not sepia applied
on top of the Posterize.


894
00:42:43,116 --> 00:42:45,466
It's Sepia applied
instead of the Posterize.


895
00:42:45,896 --> 00:42:46,876
Actually, I kind of like this.


896
00:42:46,876 --> 00:42:47,796
I think I'm going to leave it.


897
00:42:47,796 --> 00:42:50,096
I like that old-time look.


898
00:42:50,796 --> 00:42:53,206
And just to prove it, look.


899
00:42:54,386 --> 00:42:55,706
The Photos app sees it as well.


900
00:42:57,286 --> 00:42:57,676
All right.


901
00:42:58,036 --> 00:43:00,466
So we've talked about
doing this in the context


902
00:43:00,466 --> 00:43:03,376
of your own application,
but, of course, as we showed


903
00:43:03,376 --> 00:43:05,886
in the Keynote, we can
do this from inside


904
00:43:05,886 --> 00:43:06,926
of the Photos app as well.


905
00:43:06,986 --> 00:43:09,816
And to tell you about how
to do that, Simon Bovet.


906
00:43:11,516 --> 00:43:16,736
[ Applause ]


907
00:43:17,236 --> 00:43:18,656
>> Good morning.


908
00:43:18,876 --> 00:43:20,376
My name is Simon Bovet.


909
00:43:20,376 --> 00:43:22,616
And in this last
part of the session,


910
00:43:22,966 --> 00:43:24,876
let's talk about Photo
Editing Extensions.


911
00:43:26,326 --> 00:43:28,206
So what are Photo
Editing Extensions?


912
00:43:28,676 --> 00:43:30,626
How can they be useful
to you developers?


913
00:43:31,086 --> 00:43:32,716
And what do they
bring to our users?


914
00:43:32,796 --> 00:43:39,856
So it's a new feature in iOS 8
that allows the users to access


915
00:43:39,966 --> 00:43:44,846
to your Image or Video
Editing tool right


916
00:43:44,846 --> 00:43:49,076
from within the built-in
camera or photo applications.


917
00:43:50,486 --> 00:43:52,856
No need for the user to
switch between applications.


918
00:43:53,136 --> 00:43:56,036
No need for the user to
grant specific access rights


919
00:43:56,036 --> 00:43:56,876
to your application.


920
00:43:57,206 --> 00:44:01,696
It's a very simple way for your
tool to reach its audience.


921
00:44:02,226 --> 00:44:03,606
And we think it's a great way


922
00:44:03,836 --> 00:44:07,096
to put your creativity inside
the hands of our users.


923
00:44:08,086 --> 00:44:11,326
So this feature has been shown
in the Keynote on Monday,


924
00:44:11,326 --> 00:44:13,356
but let me refresh your
memories with a few slides.


925
00:44:14,256 --> 00:44:20,346
So here we are on iPhone editing
an image using the iOS 8's


926
00:44:20,446 --> 00:44:22,036
built-in Photos application.


927
00:44:22,996 --> 00:44:25,966
The user can tap on
the top left button


928
00:44:26,796 --> 00:44:29,576
and access any available
editing extension.


929
00:44:30,596 --> 00:44:31,266
Can pick one.


930
00:44:31,946 --> 00:44:37,326
And this could be your Editing
tool extending the reading


931
00:44:37,326 --> 00:44:39,056
capabilities of the
built-in apps.


932
00:44:39,876 --> 00:44:41,326
So now the user can interact


933
00:44:41,326 --> 00:44:43,036
with whatever interface
you want to provide.


934
00:44:43,676 --> 00:44:47,796
And when the user is done,
the changes are saved right


935
00:44:47,796 --> 00:44:50,156
in place inside the
user's photo library.


936
00:44:50,626 --> 00:44:52,686
No need to create the
duplicated assets.


937
00:44:53,506 --> 00:44:56,276
And if the user has turned
on iCloud Photo Library,


938
00:44:56,916 --> 00:44:59,986
those changes will be
applied to all of the devices.


939
00:45:00,436 --> 00:45:01,766
So the user could go on his iPad


940
00:45:01,766 --> 00:45:04,896
and then draw your beautiful
effects on a larger screen.


941
00:45:06,036 --> 00:45:09,386
So, what do you need to
create your own photo


942
00:45:09,386 --> 00:45:10,426
editing extension?


943
00:45:11,576 --> 00:45:13,426
And it turns out that
it's really simple.


944
00:45:13,926 --> 00:45:15,236
It's basically three steps.


945
00:45:15,916 --> 00:45:18,606
The first one is to create
an app extension target.


946
00:45:19,896 --> 00:45:22,016
The second one is to
provide a view controller


947
00:45:22,336 --> 00:45:24,556
which will manage the
UI of your extension.


948
00:45:25,406 --> 00:45:27,286
And then this view
controller needs


949
00:45:27,286 --> 00:45:31,216
to adopt a specific protocol
which is a set of methods


950
00:45:31,736 --> 00:45:33,546
that Photos will call in order


951
00:45:33,546 --> 00:45:34,926
to communicate with
your extension.


952
00:45:35,456 --> 00:45:41,966
The good news is the first two
steps are really easy thanks


953
00:45:41,966 --> 00:45:42,886
to the new Xcode.


954
00:45:44,186 --> 00:45:46,196
Basically all that
you need to do is,


955
00:45:46,196 --> 00:45:49,856
from your application's Xcode
project, add a new target


956
00:45:50,846 --> 00:45:53,506
and select the Photo
Editing Extension template.


957
00:45:54,496 --> 00:45:57,736
Xcode will create whatever is
necessary for you go get started


958
00:45:58,156 --> 00:45:59,306
and have something working.


959
00:46:00,406 --> 00:46:04,026
It will create a view controller
which you can start using


960
00:46:04,836 --> 00:46:07,266
or which you can replace
with your own if you happen


961
00:46:07,266 --> 00:46:10,026
to have your existing
tool or view controller


962
00:46:10,026 --> 00:46:10,926
that you want to reuse.


963
00:46:11,456 --> 00:46:13,196
A note about the user interface.


964
00:46:14,506 --> 00:46:16,866
You've seen photo extensions
are shown fullscreen.


965
00:46:17,746 --> 00:46:21,116
Now on the top bar, with the
Cancel and Done buttons as well


966
00:46:21,116 --> 00:46:23,666
as the title of your
application,


967
00:46:24,046 --> 00:46:26,396
it's shown automatically
for you by the Photos app.


968
00:46:27,646 --> 00:46:30,636
So if you, say, you'd like
to design your extension not


969
00:46:30,636 --> 00:46:32,076
to have its own navigation bar.


970
00:46:34,886 --> 00:46:38,096
Now onto the protocol
adoption, so the protocol


971
00:46:38,096 --> 00:46:39,946
which is specific
to photo extensions.


972
00:46:41,186 --> 00:46:44,276
And this protocol is defining
the photo's UIFramework


973
00:46:44,926 --> 00:46:47,426
and is the
PHContentEditingController.


974
00:46:48,276 --> 00:46:49,696
It consists of four methods.


975
00:46:50,336 --> 00:46:53,536
And the first one,
quite obviously,


976
00:46:54,116 --> 00:46:57,066
is called when the user
selects your extension.


977
00:46:57,796 --> 00:47:02,056
And this where you get the input
data before your extension is


978
00:47:02,056 --> 00:47:02,986
presented onscreen.


979
00:47:03,626 --> 00:47:09,446
A simple implementation
could look like this.


980
00:47:09,656 --> 00:47:12,966
And the first thing you might
notice is that the input object


981
00:47:12,966 --> 00:47:15,586
which is given to you,
the PHContentEditingInput,


982
00:47:15,646 --> 00:47:17,686
is exactly the same object


983
00:47:17,936 --> 00:47:20,496
as the one Karl described
just a few minutes ago.


984
00:47:21,086 --> 00:47:23,286
So, basically, we have
the exact same classes,


985
00:47:23,286 --> 00:47:26,746
the exact same concepts, as
when editing a photo using the


986
00:47:26,746 --> 00:47:29,986
photo's framework just here
wrapped slightly differently


987
00:47:29,986 --> 00:47:31,776
for the specific
needs of an extension.


988
00:47:33,116 --> 00:47:37,256
So, you would typically
read out the input image.


989
00:47:37,676 --> 00:47:39,236
In this particular case
we're going to work


990
00:47:39,236 --> 00:47:40,876
with a display-size
representation.


991
00:47:41,116 --> 00:47:43,146
We don't need the full-size
image right away here.


992
00:47:43,836 --> 00:47:46,716
Then we're going to decode
any input.adjustmentData


993
00:47:47,226 --> 00:47:50,076
or fall back to some default
settings if there's none.


994
00:47:51,156 --> 00:47:55,526
Then you set up your user
interface the way you need it.


995
00:47:55,526 --> 00:47:57,486
And you typically find
it's useful to hold


996
00:47:57,486 --> 00:47:59,566
on to the input object
that was given to you.


997
00:48:00,316 --> 00:48:03,396
Now the user will interact
with your extension.


998
00:48:03,626 --> 00:48:06,846
And when the user is done, the
second method will be called.


999
00:48:07,616 --> 00:48:09,386
And this is when your extension,


1000
00:48:09,746 --> 00:48:13,796
we need to provide the final
output data and hand it back.


1001
00:48:15,126 --> 00:48:17,406
Second implementation
can look like this.


1002
00:48:18,286 --> 00:48:20,976
For images, you drag
a JPEG representation


1003
00:48:20,976 --> 00:48:23,706
of the full-size image with
your effects applied to it.


1004
00:48:24,396 --> 00:48:26,466
You still create this
adjustment's data object


1005
00:48:26,466 --> 00:48:30,026
which describe whatever you've
applied to the input image.


1006
00:48:30,716 --> 00:48:32,266
And then you create
an output object


1007
00:48:32,266 --> 00:48:34,026
that wraps all this information.


1008
00:48:34,506 --> 00:48:36,676
And when you're done, you
call the completionHandler.


1009
00:48:39,036 --> 00:48:42,736
You notice in this example
that the flow is synchronous,


1010
00:48:42,996 --> 00:48:43,856
but it doesn't have to be.


1011
00:48:44,256 --> 00:48:46,196
If you prefer to have an
asynchronous workflow,


1012
00:48:46,196 --> 00:48:46,946
it's totally fine.


1013
00:48:47,226 --> 00:48:49,156
You just have to call
the completionHandler


1014
00:48:49,546 --> 00:48:50,946
when your output is ready.


1015
00:48:55,296 --> 00:48:59,206
Now you remember the story
about resuming editing.


1016
00:48:59,496 --> 00:49:03,736
So we imagine that the user
selects your extension using an


1017
00:49:03,736 --> 00:49:06,086
image or a video that
already has been edited


1018
00:49:06,086 --> 00:49:07,696
and that has some
adjustments data.


1019
00:49:08,766 --> 00:49:11,766
You remember the first
question that we asked you is,


1020
00:49:12,106 --> 00:49:16,206
do you understand that given the
existing adjustment data on it,


1021
00:49:16,206 --> 00:49:18,996
and that way we can provide
you with the appropriate input.


1022
00:49:19,596 --> 00:49:26,356
And this is when this method can
handle adjustments data is going


1023
00:49:26,356 --> 00:49:28,016
to get called a new extension.


1024
00:49:28,576 --> 00:49:32,706
And, typically, implementation
could be as simple


1025
00:49:32,706 --> 00:49:36,926
as checking whether you support
the formatIdentifier and version


1026
00:49:36,926 --> 00:49:38,956
of this adjustment data.


1027
00:49:38,956 --> 00:49:42,596
And, finally, the last
method pretty obviously is


1028
00:49:42,596 --> 00:49:45,056
when the user cancels
your extension.


1029
00:49:45,936 --> 00:49:47,766
One thing to notice,
which isn't obvious,


1030
00:49:47,766 --> 00:49:50,126
is that this method can
be called at any time.


1031
00:49:50,906 --> 00:49:53,616
So, for example, if your
extension requires some time


1032
00:49:53,616 --> 00:49:55,476
to produce the output
- for example,


1033
00:49:55,476 --> 00:49:58,786
you're editing a video
- the user could decide


1034
00:49:58,786 --> 00:50:00,976
to interrupt you and cancel
right away at any time.


1035
00:50:01,046 --> 00:50:05,996
So just keep that in mind.


1036
00:50:06,146 --> 00:50:09,196
And this is basically
all what you need


1037
00:50:09,556 --> 00:50:11,646
to create your own
photo editing extension.


1038
00:50:12,126 --> 00:50:15,796
So we are really excited to see
all the tools that you are going


1039
00:50:15,796 --> 00:50:17,936
to create and all the great
ideas that you are going


1040
00:50:17,936 --> 00:50:20,336
to provide to our
users using this API.


1041
00:50:21,096 --> 00:50:26,336
And let me conclude with a
short demo of that in action.


1042
00:50:30,056 --> 00:50:32,926
So let's switch to
our demo device.


1043
00:50:33,546 --> 00:50:38,966
And I'm going to go to
the Photos application.


1044
00:50:40,376 --> 00:50:43,906
And here is the image
that has been just applied


1045
00:50:43,906 --> 00:50:47,056
or just has been edited by
Karl with this Sepia filter.


1046
00:50:47,896 --> 00:50:50,746
Now it turns out that this
simple app is actually vending a


1047
00:50:50,746 --> 00:50:51,936
photo editing extension.


1048
00:50:52,316 --> 00:50:56,096
So what I can do is right from
within the Photos app, tap Edit,


1049
00:50:56,676 --> 00:51:00,106
select the top left
extension button,


1050
00:51:00,536 --> 00:51:02,446
and here you see our
sample extension.


1051
00:51:02,716 --> 00:51:04,326
So let me select it.


1052
00:51:05,276 --> 00:51:08,336
And what I can do is not
only apply our filters


1053
00:51:08,336 --> 00:51:10,966
but I can also resume what
was previously edited.


1054
00:51:11,476 --> 00:51:14,056
So, for example, I could decide
here to bring back the colors


1055
00:51:14,316 --> 00:51:15,856
and even enhance them.


1056
00:51:15,996 --> 00:51:17,776
So I'm going to replace
the Sepia filter


1057
00:51:17,776 --> 00:51:19,906
that was previously
applied and I'm going


1058
00:51:19,906 --> 00:51:21,756
to choose a Chrome filter.


1059
00:51:23,116 --> 00:51:25,226
And that's it.


1060
00:51:26,306 --> 00:51:29,376
You see how easy it is for
the user in just a few taps


1061
00:51:29,906 --> 00:51:32,386
to use your photo
editing extension.


1062
00:51:38,136 --> 00:51:40,496
So time to wrap up this session.


1063
00:51:41,376 --> 00:51:42,226
What have we learned?


1064
00:51:42,466 --> 00:51:45,806
We've introduced the new Photos
framework which allows you


1065
00:51:45,806 --> 00:51:49,936
to access the user's
photo library


1066
00:51:50,186 --> 00:51:51,826
and which allows
your application


1067
00:51:52,836 --> 00:51:56,726
to gain all the features like
the one which we provided


1068
00:51:56,726 --> 00:51:57,926
with the Photos application.


1069
00:51:58,506 --> 00:52:02,086
So your app can be a
first-class citizen


1070
00:52:02,086 --> 00:52:03,956
of the iOS Photos ecosystem.


1071
00:52:04,566 --> 00:52:06,546
And then we've seen
how easy it is for you


1072
00:52:06,896 --> 00:52:09,266
to provide your Editing
tool using the photos


1073
00:52:09,266 --> 00:52:10,216
editing extensions.


1074
00:52:10,896 --> 00:52:15,096
If you want more information
you can contact our Evangelist,


1075
00:52:15,096 --> 00:52:15,836
Allan Schaffer.


1076
00:52:16,056 --> 00:52:17,606
You can read our documentation.


1077
00:52:17,946 --> 00:52:21,046
And if you want to ask questions
or find answers, you can check


1078
00:52:21,046 --> 00:52:22,776
out our Developer Forums.


1079
00:52:23,496 --> 00:52:26,006
We have a couple of
related sessions.


1080
00:52:26,646 --> 00:52:28,176
Some of them have
already taken place.


1081
00:52:28,176 --> 00:52:30,246
So check out the
videos, like the one


1082
00:52:30,246 --> 00:52:33,716
about what extensions you
can create on iOS and OS X


1083
00:52:33,846 --> 00:52:36,006
or how you can capture content


1084
00:52:36,006 --> 00:52:39,706
from the camera using even
more control on iOS 8.


1085
00:52:40,566 --> 00:52:43,026
And we have two sessions
taking place this afternoon


1086
00:52:43,616 --> 00:52:47,156
if you're interested in knowing
more about how to edit images


1087
00:52:47,156 --> 00:52:49,956
and apply your custom
filters using Core Image.


1088
00:52:50,996 --> 00:52:53,486
And with that, I thank you
very much for your attention.


1089
00:52:54,016 --> 00:52:54,956
Enjoy the rest of the show.


1090
00:52:55,516 --> 00:53:06,980
[ Applause ]

